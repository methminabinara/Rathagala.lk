import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const UserScalarFieldEnumSchema = z.enum(['id','name','email','emailVerified','image','createdAt','updatedAt','twoFactorEnabled','role','banned','banReason','banExpires']);

export const SessionScalarFieldEnumSchema = z.enum(['id','expiresAt','token','createdAt','updatedAt','ipAddress','userAgent','userId','activeOrganizationId','impersonatedBy']);

export const AccountScalarFieldEnumSchema = z.enum(['id','accountId','providerId','userId','accessToken','refreshToken','idToken','accessTokenExpiresAt','refreshTokenExpiresAt','scope','password','createdAt','updatedAt']);

export const VerificationScalarFieldEnumSchema = z.enum(['id','identifier','value','expiresAt','createdAt','updatedAt']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','slug','logo','createdAt','metadata']);

export const MemberScalarFieldEnumSchema = z.enum(['id','organizationId','userId','role','createdAt']);

export const InvitationScalarFieldEnumSchema = z.enum(['id','organizationId','email','role','status','expiresAt','inviterId']);

export const TwoFactorScalarFieldEnumSchema = z.enum(['id','secret','backupCodes','userId']);

export const TasksScalarFieldEnumSchema = z.enum(['id','name','done']);

export const AdScalarFieldEnumSchema = z.enum(['id','orgId','createdBy','title','description','type','price','published','isDraft','boosted','featured','boostExpiry','featureExpiry','status','expiryDate','seoTitle','seoDescription','seoSlug','categoryId','tags','condition','brand','model','trimEdition','manufacturedYear','modelYear','mileage','engineCapacity','fuelType','transmission','bodyType','bikeType','vehicleType','serviceType','partType','maintenanceType','name','phoneNumber','whatsappNumber','termsAndConditions','location','address','province','district','city','specialNote','metadata','createdAt','updatedAt']);

export const AdRevisionScalarFieldEnumSchema = z.enum(['id','adId','version','data','createdAt']);

export const AdAnalyticsScalarFieldEnumSchema = z.enum(['id','adId','views','clicks','impressions','createdAt','updatedAt']);

export const CategoryScalarFieldEnumSchema = z.enum(['id','name','slug']);

export const TagScalarFieldEnumSchema = z.enum(['id','name','slug']);

export const MediaScalarFieldEnumSchema = z.enum(['id','uploaderId','url','type','filename','size','createdAt']);

export const PaymentScalarFieldEnumSchema = z.enum(['id','adId','userId','type','status','amount','sessionId','metadata','createdAt']);

export const FavoriteScalarFieldEnumSchema = z.enum(['id','userId','adId']);

export const SavedSearchScalarFieldEnumSchema = z.enum(['id','userId','name','filters','createdAt']);

export const GeoHeatmapScalarFieldEnumSchema = z.enum(['id','adId','lat','lng','country','region','city','timestamp']);

export const MessageScalarFieldEnumSchema = z.enum(['id','senderId','receiverId','content','read','adId','createdAt']);

export const UserNotificationScalarFieldEnumSchema = z.enum(['id','userId','type','title','message','read','data','createdAt']);

export const ShareEventScalarFieldEnumSchema = z.enum(['id','adId','platform','ipAddress','userAgent','sharedAt']);

export const ReportScalarFieldEnumSchema = z.enum(['id','userId','adId','reason','details','status','createdAt']);

export const AuditLogScalarFieldEnumSchema = z.enum(['id','userId','orgId','action','resource','resourceId','metadata','ipAddress','userAgent','createdAt']);

export const AdMediaScalarFieldEnumSchema = z.enum(['id','adId','mediaId','order']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const AdTypeSchema = z.enum(['CAR','VAN','MOTORCYCLE','BICYCLE','THREE_WHEEL','BUS','LORRY','HEAVY_DUTY','TRACTOR','AUTO_SERVICE','RENTAL','AUTO_PARTS','MAINTENANCE','BOAT']);

export type AdTypeType = `${z.infer<typeof AdTypeSchema>}`

export const MediaTypeSchema = z.enum(['IMAGE','VIDEO','PDF','OTHER']);

export type MediaTypeType = `${z.infer<typeof MediaTypeSchema>}`

export const PaymentTypeSchema = z.enum(['BOOST','FEATURE']);

export type PaymentTypeType = `${z.infer<typeof PaymentTypeSchema>}`

export const PaymentStatusSchema = z.enum(['PENDING','PAID','FAILED','REFUNDED']);

export type PaymentStatusType = `${z.infer<typeof PaymentStatusSchema>}`

export const AdStatusSchema = z.enum(['ACTIVE','EXPIRED','DRAFT','PENDING_REVIEW','REJECTED']);

export type AdStatusType = `${z.infer<typeof AdStatusSchema>}`

export const NotificationTypeSchema = z.enum(['AD_EXPIRED','AD_FEATURED','MESSAGE','REFERRAL','REVIEW']);

export type NotificationTypeType = `${z.infer<typeof NotificationTypeSchema>}`

export const SharePlatformSchema = z.enum(['FACEBOOK','TWITTER','WHATSAPP','LINKEDIN','COPY_LINK']);

export type SharePlatformType = `${z.infer<typeof SharePlatformSchema>}`

export const FuelTypeSchema = z.enum(['PETROL','DIESEL','HYBRID','ELECTRIC','GAS']);

export type FuelTypeType = `${z.infer<typeof FuelTypeSchema>}`

export const TransmissionSchema = z.enum(['MANUAL','AUTOMATIC','CVT']);

export type TransmissionType = `${z.infer<typeof TransmissionSchema>}`

export const BodyTypeSchema = z.enum(['SALOON','HATCHBACK','STATION_WAGON']);

export type BodyTypeType = `${z.infer<typeof BodyTypeSchema>}`

export const BikeTypeSchema = z.enum(['SCOOTER','E_BIKE','MOTORBIKES','QUADRICYCLES']);

export type BikeTypeType = `${z.infer<typeof BikeTypeSchema>}`

export const HeavyDutyVehicleTypeSchema = z.enum(['BED_TRAILER','BOWSER','BULLDOZER','CRANE','DUMP_TRUCK','EXCAVATOR','LOADER','OTHER']);

export type HeavyDutyVehicleTypeType = `${z.infer<typeof HeavyDutyVehicleTypeSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().nullable(),
  role: z.string().nullable(),
  banned: z.boolean().nullable(),
  banReason: z.string().nullable(),
  banExpires: z.coerce.date().nullable(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  userId: z.string(),
  activeOrganizationId: z.string().nullable(),
  impersonatedBy: z.string().nullable(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().nullable(),
  refreshToken: z.string().nullable(),
  idToken: z.string().nullable(),
  accessTokenExpiresAt: z.coerce.date().nullable(),
  refreshTokenExpiresAt: z.coerce.date().nullable(),
  scope: z.string().nullable(),
  password: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// VERIFICATION SCHEMA
/////////////////////////////////////////

export const VerificationSchema = z.object({
  id: z.string(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().nullable(),
  updatedAt: z.coerce.date().nullable(),
})

export type Verification = z.infer<typeof VerificationSchema>

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().nullable(),
  logo: z.string().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().nullable(),
})

export type Organization = z.infer<typeof OrganizationSchema>

/////////////////////////////////////////
// MEMBER SCHEMA
/////////////////////////////////////////

export const MemberSchema = z.object({
  id: z.string(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date(),
})

export type Member = z.infer<typeof MemberSchema>

/////////////////////////////////////////
// INVITATION SCHEMA
/////////////////////////////////////////

export const InvitationSchema = z.object({
  id: z.string(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string(),
})

export type Invitation = z.infer<typeof InvitationSchema>

/////////////////////////////////////////
// TWO FACTOR SCHEMA
/////////////////////////////////////////

export const TwoFactorSchema = z.object({
  id: z.string(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string(),
})

export type TwoFactor = z.infer<typeof TwoFactorSchema>

/////////////////////////////////////////
// TASKS SCHEMA
/////////////////////////////////////////

export const TasksSchema = z.object({
  id: z.string(),
  name: z.string(),
  done: z.boolean(),
})

export type Tasks = z.infer<typeof TasksSchema>

/////////////////////////////////////////
// AD SCHEMA
/////////////////////////////////////////

export const AdSchema = z.object({
  type: AdTypeSchema,
  status: AdStatusSchema,
  fuelType: FuelTypeSchema.nullable(),
  transmission: TransmissionSchema.nullable(),
  bodyType: BodyTypeSchema.nullable(),
  bikeType: BikeTypeSchema.nullable(),
  vehicleType: HeavyDutyVehicleTypeSchema.nullable(),
  id: z.string(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  price: z.number().nullable(),
  published: z.boolean(),
  isDraft: z.boolean(),
  boosted: z.boolean(),
  featured: z.boolean(),
  boostExpiry: z.coerce.date().nullable(),
  featureExpiry: z.coerce.date().nullable(),
  expiryDate: z.coerce.date().nullable(),
  seoTitle: z.string().nullable(),
  seoDescription: z.string().nullable(),
  seoSlug: z.string().nullable(),
  categoryId: z.string().nullable(),
  tags: z.string().array(),
  condition: z.string().nullable(),
  brand: z.string().nullable(),
  model: z.string().nullable(),
  trimEdition: z.string().nullable(),
  manufacturedYear: z.string().nullable(),
  modelYear: z.string().nullable(),
  mileage: z.number().nullable(),
  engineCapacity: z.number().nullable(),
  serviceType: z.string().nullable(),
  partType: z.string().nullable(),
  maintenanceType: z.string().nullable(),
  name: z.string().nullable(),
  phoneNumber: z.string().nullable(),
  whatsappNumber: z.string().nullable(),
  termsAndConditions: z.boolean().nullable(),
  location: z.string().nullable(),
  address: z.string().nullable(),
  province: z.string().nullable(),
  district: z.string().nullable(),
  city: z.string().nullable(),
  specialNote: z.string().nullable(),
  metadata: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Ad = z.infer<typeof AdSchema>

/////////////////////////////////////////
// AD REVISION SCHEMA
/////////////////////////////////////////

export const AdRevisionSchema = z.object({
  id: z.string(),
  adId: z.string(),
  version: z.number().int(),
  data: JsonValueSchema,
  createdAt: z.coerce.date(),
})

export type AdRevision = z.infer<typeof AdRevisionSchema>

/////////////////////////////////////////
// AD ANALYTICS SCHEMA
/////////////////////////////////////////

export const AdAnalyticsSchema = z.object({
  id: z.string(),
  adId: z.string(),
  views: z.number().int(),
  clicks: z.number().int(),
  impressions: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type AdAnalytics = z.infer<typeof AdAnalyticsSchema>

/////////////////////////////////////////
// CATEGORY SCHEMA
/////////////////////////////////////////

export const CategorySchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
})

export type Category = z.infer<typeof CategorySchema>

/////////////////////////////////////////
// TAG SCHEMA
/////////////////////////////////////////

export const TagSchema = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string(),
})

export type Tag = z.infer<typeof TagSchema>

/////////////////////////////////////////
// MEDIA SCHEMA
/////////////////////////////////////////

export const MediaSchema = z.object({
  type: MediaTypeSchema,
  id: z.string(),
  uploaderId: z.string(),
  url: z.string(),
  filename: z.string().nullable(),
  size: z.number().int().nullable(),
  createdAt: z.coerce.date(),
})

export type Media = z.infer<typeof MediaSchema>

/////////////////////////////////////////
// PAYMENT SCHEMA
/////////////////////////////////////////

export const PaymentSchema = z.object({
  type: PaymentTypeSchema,
  status: PaymentStatusSchema,
  id: z.string(),
  adId: z.string(),
  userId: z.string(),
  amount: z.number(),
  sessionId: z.string().nullable(),
  metadata: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
})

export type Payment = z.infer<typeof PaymentSchema>

/////////////////////////////////////////
// FAVORITE SCHEMA
/////////////////////////////////////////

export const FavoriteSchema = z.object({
  id: z.string(),
  userId: z.string(),
  adId: z.string(),
})

export type Favorite = z.infer<typeof FavoriteSchema>

/////////////////////////////////////////
// SAVED SEARCH SCHEMA
/////////////////////////////////////////

export const SavedSearchSchema = z.object({
  id: z.string(),
  userId: z.string(),
  name: z.string(),
  filters: JsonValueSchema,
  createdAt: z.coerce.date(),
})

export type SavedSearch = z.infer<typeof SavedSearchSchema>

/////////////////////////////////////////
// GEO HEATMAP SCHEMA
/////////////////////////////////////////

export const GeoHeatmapSchema = z.object({
  id: z.string(),
  adId: z.string(),
  lat: z.number(),
  lng: z.number(),
  country: z.string().nullable(),
  region: z.string().nullable(),
  city: z.string().nullable(),
  timestamp: z.coerce.date(),
})

export type GeoHeatmap = z.infer<typeof GeoHeatmapSchema>

/////////////////////////////////////////
// MESSAGE SCHEMA
/////////////////////////////////////////

export const MessageSchema = z.object({
  id: z.string(),
  senderId: z.string(),
  receiverId: z.string(),
  content: z.string(),
  read: z.boolean(),
  adId: z.string().nullable(),
  createdAt: z.coerce.date(),
})

export type Message = z.infer<typeof MessageSchema>

/////////////////////////////////////////
// USER NOTIFICATION SCHEMA
/////////////////////////////////////////

export const UserNotificationSchema = z.object({
  type: NotificationTypeSchema,
  id: z.string(),
  userId: z.string(),
  title: z.string(),
  message: z.string(),
  read: z.boolean(),
  data: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
})

export type UserNotification = z.infer<typeof UserNotificationSchema>

/////////////////////////////////////////
// SHARE EVENT SCHEMA
/////////////////////////////////////////

export const ShareEventSchema = z.object({
  platform: SharePlatformSchema,
  id: z.string(),
  adId: z.string(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  sharedAt: z.coerce.date(),
})

export type ShareEvent = z.infer<typeof ShareEventSchema>

/////////////////////////////////////////
// REPORT SCHEMA
/////////////////////////////////////////

export const ReportSchema = z.object({
  id: z.string(),
  userId: z.string(),
  adId: z.string(),
  reason: z.string(),
  details: z.string().nullable(),
  status: z.string(),
  createdAt: z.coerce.date(),
})

export type Report = z.infer<typeof ReportSchema>

/////////////////////////////////////////
// AUDIT LOG SCHEMA
/////////////////////////////////////////

export const AuditLogSchema = z.object({
  id: z.string(),
  userId: z.string().nullable(),
  orgId: z.string().nullable(),
  action: z.string(),
  resource: z.string().nullable(),
  resourceId: z.string().nullable(),
  metadata: JsonValueSchema.nullable(),
  ipAddress: z.string().nullable(),
  userAgent: z.string().nullable(),
  createdAt: z.coerce.date(),
})

export type AuditLog = z.infer<typeof AuditLogSchema>

/////////////////////////////////////////
// AD MEDIA SCHEMA
/////////////////////////////////////////

export const AdMediaSchema = z.object({
  id: z.string(),
  adId: z.string(),
  mediaId: z.string(),
  order: z.number().int(),
})

export type AdMedia = z.infer<typeof AdMediaSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  sessions: z.boolean().optional(),
  accounts: z.boolean().optional(),
  members: z.boolean().optional(),
  invitations: z.boolean().optional(),
  twofactors: z.boolean().optional(),
  adsCreated: z.boolean().optional(),
  mediaUploaded: z.boolean().optional(),
  payments: z.boolean().optional(),
  favorites: z.boolean().optional(),
  savedSearches: z.boolean().optional(),
  messagesSent: z.boolean().optional(),
  messagesReceived: z.boolean().optional(),
  notifications: z.boolean().optional(),
  reports: z.boolean().optional(),
  auditLogs: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  twoFactorEnabled: z.boolean().optional(),
  role: z.boolean().optional(),
  banned: z.boolean().optional(),
  banReason: z.boolean().optional(),
  banExpires: z.boolean().optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountArgsSchema)]).optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationArgsSchema)]).optional(),
  twofactors: z.union([z.boolean(),z.lazy(() => TwoFactorArgsSchema)]).optional(),
  adsCreated: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
  mediaUploaded: z.union([z.boolean(),z.lazy(() => MediaArgsSchema)]).optional(),
  payments: z.union([z.boolean(),z.lazy(() => PaymentArgsSchema)]).optional(),
  favorites: z.union([z.boolean(),z.lazy(() => FavoriteArgsSchema)]).optional(),
  savedSearches: z.union([z.boolean(),z.lazy(() => SavedSearchArgsSchema)]).optional(),
  messagesSent: z.union([z.boolean(),z.lazy(() => MessageArgsSchema)]).optional(),
  messagesReceived: z.union([z.boolean(),z.lazy(() => MessageArgsSchema)]).optional(),
  notifications: z.union([z.boolean(),z.lazy(() => UserNotificationArgsSchema)]).optional(),
  reports: z.union([z.boolean(),z.lazy(() => ReportArgsSchema)]).optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  token: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  userId: z.boolean().optional(),
  activeOrganizationId: z.boolean().optional(),
  impersonatedBy: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  accountId: z.boolean().optional(),
  providerId: z.boolean().optional(),
  userId: z.boolean().optional(),
  accessToken: z.boolean().optional(),
  refreshToken: z.boolean().optional(),
  idToken: z.boolean().optional(),
  accessTokenExpiresAt: z.boolean().optional(),
  refreshTokenExpiresAt: z.boolean().optional(),
  scope: z.boolean().optional(),
  password: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// VERIFICATION
//------------------------------------------------------

export const VerificationArgsSchema: z.ZodType<Prisma.VerificationDefaultArgs> = z.object({
  select: z.lazy(() => VerificationSelectSchema).optional(),
}).strict();

export const VerificationSelectSchema: z.ZodType<Prisma.VerificationSelect> = z.object({
  id: z.boolean().optional(),
  identifier: z.boolean().optional(),
  value: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  members: z.boolean().optional(),
  invitations: z.boolean().optional(),
  ads: z.boolean().optional(),
  auditLogs: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
  logo: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  metadata: z.boolean().optional(),
  members: z.union([z.boolean(),z.lazy(() => MemberArgsSchema)]).optional(),
  invitations: z.union([z.boolean(),z.lazy(() => InvitationArgsSchema)]).optional(),
  ads: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
  auditLogs: z.union([z.boolean(),z.lazy(() => AuditLogArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MEMBER
//------------------------------------------------------

export const MemberIncludeSchema: z.ZodType<Prisma.MemberInclude> = z.object({
}).strict()

export const MemberArgsSchema: z.ZodType<Prisma.MemberDefaultArgs> = z.object({
  select: z.lazy(() => MemberSelectSchema).optional(),
  include: z.lazy(() => MemberIncludeSchema).optional(),
}).strict();

export const MemberSelectSchema: z.ZodType<Prisma.MemberSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  userId: z.boolean().optional(),
  role: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// INVITATION
//------------------------------------------------------

export const InvitationIncludeSchema: z.ZodType<Prisma.InvitationInclude> = z.object({
}).strict()

export const InvitationArgsSchema: z.ZodType<Prisma.InvitationDefaultArgs> = z.object({
  select: z.lazy(() => InvitationSelectSchema).optional(),
  include: z.lazy(() => InvitationIncludeSchema).optional(),
}).strict();

export const InvitationSelectSchema: z.ZodType<Prisma.InvitationSelect> = z.object({
  id: z.boolean().optional(),
  organizationId: z.boolean().optional(),
  email: z.boolean().optional(),
  role: z.boolean().optional(),
  status: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  inviterId: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// TWO FACTOR
//------------------------------------------------------

export const TwoFactorIncludeSchema: z.ZodType<Prisma.TwoFactorInclude> = z.object({
}).strict()

export const TwoFactorArgsSchema: z.ZodType<Prisma.TwoFactorDefaultArgs> = z.object({
  select: z.lazy(() => TwoFactorSelectSchema).optional(),
  include: z.lazy(() => TwoFactorIncludeSchema).optional(),
}).strict();

export const TwoFactorSelectSchema: z.ZodType<Prisma.TwoFactorSelect> = z.object({
  id: z.boolean().optional(),
  secret: z.boolean().optional(),
  backupCodes: z.boolean().optional(),
  userId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// TASKS
//------------------------------------------------------

export const TasksArgsSchema: z.ZodType<Prisma.TasksDefaultArgs> = z.object({
  select: z.lazy(() => TasksSelectSchema).optional(),
}).strict();

export const TasksSelectSchema: z.ZodType<Prisma.TasksSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  done: z.boolean().optional(),
}).strict()

// AD
//------------------------------------------------------

export const AdIncludeSchema: z.ZodType<Prisma.AdInclude> = z.object({
}).strict()

export const AdArgsSchema: z.ZodType<Prisma.AdDefaultArgs> = z.object({
  select: z.lazy(() => AdSelectSchema).optional(),
  include: z.lazy(() => AdIncludeSchema).optional(),
}).strict();

export const AdCountOutputTypeArgsSchema: z.ZodType<Prisma.AdCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => AdCountOutputTypeSelectSchema).nullish(),
}).strict();

export const AdCountOutputTypeSelectSchema: z.ZodType<Prisma.AdCountOutputTypeSelect> = z.object({
  payments: z.boolean().optional(),
  favorites: z.boolean().optional(),
  reports: z.boolean().optional(),
  revisions: z.boolean().optional(),
  geoViews: z.boolean().optional(),
  shareEvents: z.boolean().optional(),
  media: z.boolean().optional(),
}).strict();

export const AdSelectSchema: z.ZodType<Prisma.AdSelect> = z.object({
  id: z.boolean().optional(),
  orgId: z.boolean().optional(),
  createdBy: z.boolean().optional(),
  title: z.boolean().optional(),
  description: z.boolean().optional(),
  type: z.boolean().optional(),
  price: z.boolean().optional(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.boolean().optional(),
  featureExpiry: z.boolean().optional(),
  status: z.boolean().optional(),
  expiryDate: z.boolean().optional(),
  seoTitle: z.boolean().optional(),
  seoDescription: z.boolean().optional(),
  seoSlug: z.boolean().optional(),
  categoryId: z.boolean().optional(),
  tags: z.boolean().optional(),
  condition: z.boolean().optional(),
  brand: z.boolean().optional(),
  model: z.boolean().optional(),
  trimEdition: z.boolean().optional(),
  manufacturedYear: z.boolean().optional(),
  modelYear: z.boolean().optional(),
  mileage: z.boolean().optional(),
  engineCapacity: z.boolean().optional(),
  fuelType: z.boolean().optional(),
  transmission: z.boolean().optional(),
  bodyType: z.boolean().optional(),
  bikeType: z.boolean().optional(),
  vehicleType: z.boolean().optional(),
  serviceType: z.boolean().optional(),
  partType: z.boolean().optional(),
  maintenanceType: z.boolean().optional(),
  name: z.boolean().optional(),
  phoneNumber: z.boolean().optional(),
  whatsappNumber: z.boolean().optional(),
  termsAndConditions: z.boolean().optional(),
  location: z.boolean().optional(),
  address: z.boolean().optional(),
  province: z.boolean().optional(),
  district: z.boolean().optional(),
  city: z.boolean().optional(),
  specialNote: z.boolean().optional(),
  metadata: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  org: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  creator: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  category: z.union([z.boolean(),z.lazy(() => CategoryArgsSchema)]).optional(),
  analytics: z.union([z.boolean(),z.lazy(() => AdAnalyticsArgsSchema)]).optional(),
  payments: z.union([z.boolean(),z.lazy(() => PaymentArgsSchema)]).optional(),
  favorites: z.union([z.boolean(),z.lazy(() => FavoriteArgsSchema)]).optional(),
  reports: z.union([z.boolean(),z.lazy(() => ReportArgsSchema)]).optional(),
  revisions: z.union([z.boolean(),z.lazy(() => AdRevisionArgsSchema)]).optional(),
  geoViews: z.union([z.boolean(),z.lazy(() => GeoHeatmapArgsSchema)]).optional(),
  shareEvents: z.union([z.boolean(),z.lazy(() => ShareEventArgsSchema)]).optional(),
  media: z.union([z.boolean(),z.lazy(() => AdMediaArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AdCountOutputTypeArgsSchema)]).optional(),
}).strict()

// AD REVISION
//------------------------------------------------------

export const AdRevisionIncludeSchema: z.ZodType<Prisma.AdRevisionInclude> = z.object({
}).strict()

export const AdRevisionArgsSchema: z.ZodType<Prisma.AdRevisionDefaultArgs> = z.object({
  select: z.lazy(() => AdRevisionSelectSchema).optional(),
  include: z.lazy(() => AdRevisionIncludeSchema).optional(),
}).strict();

export const AdRevisionSelectSchema: z.ZodType<Prisma.AdRevisionSelect> = z.object({
  id: z.boolean().optional(),
  adId: z.boolean().optional(),
  version: z.boolean().optional(),
  data: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  ad: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
}).strict()

// AD ANALYTICS
//------------------------------------------------------

export const AdAnalyticsIncludeSchema: z.ZodType<Prisma.AdAnalyticsInclude> = z.object({
}).strict()

export const AdAnalyticsArgsSchema: z.ZodType<Prisma.AdAnalyticsDefaultArgs> = z.object({
  select: z.lazy(() => AdAnalyticsSelectSchema).optional(),
  include: z.lazy(() => AdAnalyticsIncludeSchema).optional(),
}).strict();

export const AdAnalyticsSelectSchema: z.ZodType<Prisma.AdAnalyticsSelect> = z.object({
  id: z.boolean().optional(),
  adId: z.boolean().optional(),
  views: z.boolean().optional(),
  clicks: z.boolean().optional(),
  impressions: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  ad: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
}).strict()

// CATEGORY
//------------------------------------------------------

export const CategoryIncludeSchema: z.ZodType<Prisma.CategoryInclude> = z.object({
}).strict()

export const CategoryArgsSchema: z.ZodType<Prisma.CategoryDefaultArgs> = z.object({
  select: z.lazy(() => CategorySelectSchema).optional(),
  include: z.lazy(() => CategoryIncludeSchema).optional(),
}).strict();

export const CategoryCountOutputTypeArgsSchema: z.ZodType<Prisma.CategoryCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CategoryCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CategoryCountOutputTypeSelectSchema: z.ZodType<Prisma.CategoryCountOutputTypeSelect> = z.object({
  ads: z.boolean().optional(),
}).strict();

export const CategorySelectSchema: z.ZodType<Prisma.CategorySelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
  ads: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CategoryCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TAG
//------------------------------------------------------

export const TagArgsSchema: z.ZodType<Prisma.TagDefaultArgs> = z.object({
  select: z.lazy(() => TagSelectSchema).optional(),
}).strict();

export const TagSelectSchema: z.ZodType<Prisma.TagSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  slug: z.boolean().optional(),
}).strict()

// MEDIA
//------------------------------------------------------

export const MediaIncludeSchema: z.ZodType<Prisma.MediaInclude> = z.object({
}).strict()

export const MediaArgsSchema: z.ZodType<Prisma.MediaDefaultArgs> = z.object({
  select: z.lazy(() => MediaSelectSchema).optional(),
  include: z.lazy(() => MediaIncludeSchema).optional(),
}).strict();

export const MediaCountOutputTypeArgsSchema: z.ZodType<Prisma.MediaCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => MediaCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MediaCountOutputTypeSelectSchema: z.ZodType<Prisma.MediaCountOutputTypeSelect> = z.object({
  ads: z.boolean().optional(),
}).strict();

export const MediaSelectSchema: z.ZodType<Prisma.MediaSelect> = z.object({
  id: z.boolean().optional(),
  uploaderId: z.boolean().optional(),
  url: z.boolean().optional(),
  type: z.boolean().optional(),
  filename: z.boolean().optional(),
  size: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  uploader: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  ads: z.union([z.boolean(),z.lazy(() => AdMediaArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MediaCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PAYMENT
//------------------------------------------------------

export const PaymentIncludeSchema: z.ZodType<Prisma.PaymentInclude> = z.object({
}).strict()

export const PaymentArgsSchema: z.ZodType<Prisma.PaymentDefaultArgs> = z.object({
  select: z.lazy(() => PaymentSelectSchema).optional(),
  include: z.lazy(() => PaymentIncludeSchema).optional(),
}).strict();

export const PaymentSelectSchema: z.ZodType<Prisma.PaymentSelect> = z.object({
  id: z.boolean().optional(),
  adId: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  status: z.boolean().optional(),
  amount: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  metadata: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  ad: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// FAVORITE
//------------------------------------------------------

export const FavoriteIncludeSchema: z.ZodType<Prisma.FavoriteInclude> = z.object({
}).strict()

export const FavoriteArgsSchema: z.ZodType<Prisma.FavoriteDefaultArgs> = z.object({
  select: z.lazy(() => FavoriteSelectSchema).optional(),
  include: z.lazy(() => FavoriteIncludeSchema).optional(),
}).strict();

export const FavoriteSelectSchema: z.ZodType<Prisma.FavoriteSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  adId: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  ad: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
}).strict()

// SAVED SEARCH
//------------------------------------------------------

export const SavedSearchIncludeSchema: z.ZodType<Prisma.SavedSearchInclude> = z.object({
}).strict()

export const SavedSearchArgsSchema: z.ZodType<Prisma.SavedSearchDefaultArgs> = z.object({
  select: z.lazy(() => SavedSearchSelectSchema).optional(),
  include: z.lazy(() => SavedSearchIncludeSchema).optional(),
}).strict();

export const SavedSearchSelectSchema: z.ZodType<Prisma.SavedSearchSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  name: z.boolean().optional(),
  filters: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// GEO HEATMAP
//------------------------------------------------------

export const GeoHeatmapIncludeSchema: z.ZodType<Prisma.GeoHeatmapInclude> = z.object({
}).strict()

export const GeoHeatmapArgsSchema: z.ZodType<Prisma.GeoHeatmapDefaultArgs> = z.object({
  select: z.lazy(() => GeoHeatmapSelectSchema).optional(),
  include: z.lazy(() => GeoHeatmapIncludeSchema).optional(),
}).strict();

export const GeoHeatmapSelectSchema: z.ZodType<Prisma.GeoHeatmapSelect> = z.object({
  id: z.boolean().optional(),
  adId: z.boolean().optional(),
  lat: z.boolean().optional(),
  lng: z.boolean().optional(),
  country: z.boolean().optional(),
  region: z.boolean().optional(),
  city: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  ad: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
}).strict()

// MESSAGE
//------------------------------------------------------

export const MessageIncludeSchema: z.ZodType<Prisma.MessageInclude> = z.object({
}).strict()

export const MessageArgsSchema: z.ZodType<Prisma.MessageDefaultArgs> = z.object({
  select: z.lazy(() => MessageSelectSchema).optional(),
  include: z.lazy(() => MessageIncludeSchema).optional(),
}).strict();

export const MessageSelectSchema: z.ZodType<Prisma.MessageSelect> = z.object({
  id: z.boolean().optional(),
  senderId: z.boolean().optional(),
  receiverId: z.boolean().optional(),
  content: z.boolean().optional(),
  read: z.boolean().optional(),
  adId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  sender: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  receiver: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// USER NOTIFICATION
//------------------------------------------------------

export const UserNotificationIncludeSchema: z.ZodType<Prisma.UserNotificationInclude> = z.object({
}).strict()

export const UserNotificationArgsSchema: z.ZodType<Prisma.UserNotificationDefaultArgs> = z.object({
  select: z.lazy(() => UserNotificationSelectSchema).optional(),
  include: z.lazy(() => UserNotificationIncludeSchema).optional(),
}).strict();

export const UserNotificationSelectSchema: z.ZodType<Prisma.UserNotificationSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  title: z.boolean().optional(),
  message: z.boolean().optional(),
  read: z.boolean().optional(),
  data: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// SHARE EVENT
//------------------------------------------------------

export const ShareEventIncludeSchema: z.ZodType<Prisma.ShareEventInclude> = z.object({
}).strict()

export const ShareEventArgsSchema: z.ZodType<Prisma.ShareEventDefaultArgs> = z.object({
  select: z.lazy(() => ShareEventSelectSchema).optional(),
  include: z.lazy(() => ShareEventIncludeSchema).optional(),
}).strict();

export const ShareEventSelectSchema: z.ZodType<Prisma.ShareEventSelect> = z.object({
  id: z.boolean().optional(),
  adId: z.boolean().optional(),
  platform: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  sharedAt: z.boolean().optional(),
  ad: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
}).strict()

// REPORT
//------------------------------------------------------

export const ReportIncludeSchema: z.ZodType<Prisma.ReportInclude> = z.object({
}).strict()

export const ReportArgsSchema: z.ZodType<Prisma.ReportDefaultArgs> = z.object({
  select: z.lazy(() => ReportSelectSchema).optional(),
  include: z.lazy(() => ReportIncludeSchema).optional(),
}).strict();

export const ReportSelectSchema: z.ZodType<Prisma.ReportSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  adId: z.boolean().optional(),
  reason: z.boolean().optional(),
  details: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  reporter: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  ad: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
}).strict()

// AUDIT LOG
//------------------------------------------------------

export const AuditLogIncludeSchema: z.ZodType<Prisma.AuditLogInclude> = z.object({
}).strict()

export const AuditLogArgsSchema: z.ZodType<Prisma.AuditLogDefaultArgs> = z.object({
  select: z.lazy(() => AuditLogSelectSchema).optional(),
  include: z.lazy(() => AuditLogIncludeSchema).optional(),
}).strict();

export const AuditLogSelectSchema: z.ZodType<Prisma.AuditLogSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  orgId: z.boolean().optional(),
  action: z.boolean().optional(),
  resource: z.boolean().optional(),
  resourceId: z.boolean().optional(),
  metadata: z.boolean().optional(),
  ipAddress: z.boolean().optional(),
  userAgent: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  org: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// AD MEDIA
//------------------------------------------------------

export const AdMediaIncludeSchema: z.ZodType<Prisma.AdMediaInclude> = z.object({
}).strict()

export const AdMediaArgsSchema: z.ZodType<Prisma.AdMediaDefaultArgs> = z.object({
  select: z.lazy(() => AdMediaSelectSchema).optional(),
  include: z.lazy(() => AdMediaIncludeSchema).optional(),
}).strict();

export const AdMediaSelectSchema: z.ZodType<Prisma.AdMediaSelect> = z.object({
  id: z.boolean().optional(),
  adId: z.boolean().optional(),
  mediaId: z.boolean().optional(),
  order: z.boolean().optional(),
  ad: z.union([z.boolean(),z.lazy(() => AdArgsSchema)]).optional(),
  media: z.union([z.boolean(),z.lazy(() => MediaArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterSchema).optional(),
  adsCreated: z.lazy(() => AdListRelationFilterSchema).optional(),
  mediaUploaded: z.lazy(() => MediaListRelationFilterSchema).optional(),
  payments: z.lazy(() => PaymentListRelationFilterSchema).optional(),
  favorites: z.lazy(() => FavoriteListRelationFilterSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchListRelationFilterSchema).optional(),
  messagesSent: z.lazy(() => MessageListRelationFilterSchema).optional(),
  messagesReceived: z.lazy(() => MessageListRelationFilterSchema).optional(),
  notifications: z.lazy(() => UserNotificationListRelationFilterSchema).optional(),
  reports: z.lazy(() => ReportListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  sessions: z.lazy(() => SessionOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorOrderByRelationAggregateInputSchema).optional(),
  adsCreated: z.lazy(() => AdOrderByRelationAggregateInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaOrderByRelationAggregateInputSchema).optional(),
  payments: z.lazy(() => PaymentOrderByRelationAggregateInputSchema).optional(),
  favorites: z.lazy(() => FavoriteOrderByRelationAggregateInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchOrderByRelationAggregateInputSchema).optional(),
  messagesSent: z.lazy(() => MessageOrderByRelationAggregateInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageOrderByRelationAggregateInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationOrderByRelationAggregateInputSchema).optional(),
  reports: z.lazy(() => ReportOrderByRelationAggregateInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  sessions: z.lazy(() => SessionListRelationFilterSchema).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  twofactors: z.lazy(() => TwoFactorListRelationFilterSchema).optional(),
  adsCreated: z.lazy(() => AdListRelationFilterSchema).optional(),
  mediaUploaded: z.lazy(() => MediaListRelationFilterSchema).optional(),
  payments: z.lazy(() => PaymentListRelationFilterSchema).optional(),
  favorites: z.lazy(() => FavoriteListRelationFilterSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchListRelationFilterSchema).optional(),
  messagesSent: z.lazy(() => MessageListRelationFilterSchema).optional(),
  messagesReceived: z.lazy(() => MessageListRelationFilterSchema).optional(),
  notifications: z.lazy(() => UserNotificationListRelationFilterSchema).optional(),
  reports: z.lazy(() => ReportListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  twoFactorEnabled: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  banned: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  banReason: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  banExpires: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    token: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationWhereInputSchema: z.ZodType<Prisma.VerificationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const VerificationOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationWhereUniqueInputSchema: z.ZodType<Prisma.VerificationWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationWhereInputSchema),z.lazy(() => VerificationWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const VerificationOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VerificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationMinOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  updatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  ads: z.lazy(() => AdListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  members: z.lazy(() => MemberOrderByRelationAggregateInputSchema).optional(),
  invitations: z.lazy(() => InvitationOrderByRelationAggregateInputSchema).optional(),
  ads: z.lazy(() => AdOrderByRelationAggregateInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    slug: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  logo: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  members: z.lazy(() => MemberListRelationFilterSchema).optional(),
  invitations: z.lazy(() => InvitationListRelationFilterSchema).optional(),
  ads: z.lazy(() => AdListRelationFilterSchema).optional(),
  auditLogs: z.lazy(() => AuditLogListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  logo: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const MemberWhereInputSchema: z.ZodType<Prisma.MemberWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const MemberOrderByWithRelationInputSchema: z.ZodType<Prisma.MemberOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const MemberWhereUniqueInputSchema: z.ZodType<Prisma.MemberWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberWhereInputSchema),z.lazy(() => MemberWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const MemberOrderByWithAggregationInputSchema: z.ZodType<Prisma.MemberOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MemberCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MemberMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MemberMinOrderByAggregateInputSchema).optional()
}).strict();

export const MemberScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MemberScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereWithAggregatesInputSchema),z.lazy(() => MemberScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationWhereInputSchema: z.ZodType<Prisma.InvitationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const InvitationOrderByWithRelationInputSchema: z.ZodType<Prisma.InvitationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const InvitationWhereUniqueInputSchema: z.ZodType<Prisma.InvitationWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationWhereInputSchema),z.lazy(() => InvitationWhereInputSchema).array() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const InvitationOrderByWithAggregationInputSchema: z.ZodType<Prisma.InvitationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => InvitationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InvitationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InvitationMinOrderByAggregateInputSchema).optional()
}).strict();

export const InvitationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InvitationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema),z.lazy(() => InvitationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TwoFactorWhereInputSchema: z.ZodType<Prisma.TwoFactorWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const TwoFactorOrderByWithRelationInputSchema: z.ZodType<Prisma.TwoFactorOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const TwoFactorWhereUniqueInputSchema: z.ZodType<Prisma.TwoFactorWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorWhereInputSchema),z.lazy(() => TwoFactorWhereInputSchema).array() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const TwoFactorOrderByWithAggregationInputSchema: z.ZodType<Prisma.TwoFactorOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TwoFactorCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TwoFactorMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TwoFactorMinOrderByAggregateInputSchema).optional()
}).strict();

export const TwoFactorScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TwoFactorScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema),z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema),z.lazy(() => TwoFactorScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TasksWhereInputSchema: z.ZodType<Prisma.TasksWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TasksWhereInputSchema),z.lazy(() => TasksWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TasksWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TasksWhereInputSchema),z.lazy(() => TasksWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  done: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
}).strict();

export const TasksOrderByWithRelationInputSchema: z.ZodType<Prisma.TasksOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  done: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TasksWhereUniqueInputSchema: z.ZodType<Prisma.TasksWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TasksWhereInputSchema),z.lazy(() => TasksWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TasksWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TasksWhereInputSchema),z.lazy(() => TasksWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  done: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
}).strict());

export const TasksOrderByWithAggregationInputSchema: z.ZodType<Prisma.TasksOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  done: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TasksCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TasksMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TasksMinOrderByAggregateInputSchema).optional()
}).strict();

export const TasksScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TasksScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TasksScalarWhereWithAggregatesInputSchema),z.lazy(() => TasksScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TasksScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TasksScalarWhereWithAggregatesInputSchema),z.lazy(() => TasksScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  done: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const AdWhereInputSchema: z.ZodType<Prisma.AdWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdWhereInputSchema),z.lazy(() => AdWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdWhereInputSchema),z.lazy(() => AdWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  orgId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumAdTypeFilterSchema),z.lazy(() => AdTypeSchema) ]).optional(),
  price: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  published: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isDraft: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  boosted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  boostExpiry: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  featureExpiry: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumAdStatusFilterSchema),z.lazy(() => AdStatusSchema) ]).optional(),
  expiryDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  seoTitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seoDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seoSlug: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  condition: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  brand: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  trimEdition: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  manufacturedYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  modelYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mileage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  engineCapacity: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => EnumFuelTypeNullableFilterSchema),z.lazy(() => FuelTypeSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => EnumTransmissionNullableFilterSchema),z.lazy(() => TransmissionSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => EnumBodyTypeNullableFilterSchema),z.lazy(() => BodyTypeSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => EnumBikeTypeNullableFilterSchema),z.lazy(() => BikeTypeSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => EnumHeavyDutyVehicleTypeNullableFilterSchema),z.lazy(() => HeavyDutyVehicleTypeSchema) ]).optional().nullable(),
  serviceType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  partType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  maintenanceType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phoneNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  whatsappNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  termsAndConditions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  province: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  district: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  specialNote: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  org: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  creator: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategoryNullableScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional().nullable(),
  analytics: z.union([ z.lazy(() => AdAnalyticsNullableScalarRelationFilterSchema),z.lazy(() => AdAnalyticsWhereInputSchema) ]).optional().nullable(),
  payments: z.lazy(() => PaymentListRelationFilterSchema).optional(),
  favorites: z.lazy(() => FavoriteListRelationFilterSchema).optional(),
  reports: z.lazy(() => ReportListRelationFilterSchema).optional(),
  revisions: z.lazy(() => AdRevisionListRelationFilterSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapListRelationFilterSchema).optional(),
  shareEvents: z.lazy(() => ShareEventListRelationFilterSchema).optional(),
  media: z.lazy(() => AdMediaListRelationFilterSchema).optional()
}).strict();

export const AdOrderByWithRelationInputSchema: z.ZodType<Prisma.AdOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  isDraft: z.lazy(() => SortOrderSchema).optional(),
  boosted: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  boostExpiry: z.lazy(() => SortOrderSchema).optional(),
  featureExpiry: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiryDate: z.lazy(() => SortOrderSchema).optional(),
  seoTitle: z.lazy(() => SortOrderSchema).optional(),
  seoDescription: z.lazy(() => SortOrderSchema).optional(),
  seoSlug: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  condition: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  model: z.lazy(() => SortOrderSchema).optional(),
  trimEdition: z.lazy(() => SortOrderSchema).optional(),
  manufacturedYear: z.lazy(() => SortOrderSchema).optional(),
  modelYear: z.lazy(() => SortOrderSchema).optional(),
  mileage: z.lazy(() => SortOrderSchema).optional(),
  engineCapacity: z.lazy(() => SortOrderSchema).optional(),
  fuelType: z.lazy(() => SortOrderSchema).optional(),
  transmission: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  bikeType: z.lazy(() => SortOrderSchema).optional(),
  vehicleType: z.lazy(() => SortOrderSchema).optional(),
  serviceType: z.lazy(() => SortOrderSchema).optional(),
  partType: z.lazy(() => SortOrderSchema).optional(),
  maintenanceType: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.lazy(() => SortOrderSchema).optional(),
  whatsappNumber: z.lazy(() => SortOrderSchema).optional(),
  termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  province: z.lazy(() => SortOrderSchema).optional(),
  district: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  specialNote: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  org: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  creator: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  category: z.lazy(() => CategoryOrderByWithRelationInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsOrderByWithRelationInputSchema).optional(),
  payments: z.lazy(() => PaymentOrderByRelationAggregateInputSchema).optional(),
  favorites: z.lazy(() => FavoriteOrderByRelationAggregateInputSchema).optional(),
  reports: z.lazy(() => ReportOrderByRelationAggregateInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionOrderByRelationAggregateInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapOrderByRelationAggregateInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventOrderByRelationAggregateInputSchema).optional(),
  media: z.lazy(() => AdMediaOrderByRelationAggregateInputSchema).optional()
}).strict();

export const AdWhereUniqueInputSchema: z.ZodType<Prisma.AdWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    seoSlug: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    seoSlug: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  seoSlug: z.string().optional(),
  AND: z.union([ z.lazy(() => AdWhereInputSchema),z.lazy(() => AdWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdWhereInputSchema),z.lazy(() => AdWhereInputSchema).array() ]).optional(),
  orgId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumAdTypeFilterSchema),z.lazy(() => AdTypeSchema) ]).optional(),
  price: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  published: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isDraft: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  boosted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  boostExpiry: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  featureExpiry: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumAdStatusFilterSchema),z.lazy(() => AdStatusSchema) ]).optional(),
  expiryDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  seoTitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seoDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  condition: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  brand: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  trimEdition: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  manufacturedYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  modelYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mileage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  engineCapacity: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => EnumFuelTypeNullableFilterSchema),z.lazy(() => FuelTypeSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => EnumTransmissionNullableFilterSchema),z.lazy(() => TransmissionSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => EnumBodyTypeNullableFilterSchema),z.lazy(() => BodyTypeSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => EnumBikeTypeNullableFilterSchema),z.lazy(() => BikeTypeSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => EnumHeavyDutyVehicleTypeNullableFilterSchema),z.lazy(() => HeavyDutyVehicleTypeSchema) ]).optional().nullable(),
  serviceType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  partType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  maintenanceType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phoneNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  whatsappNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  termsAndConditions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  province: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  district: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  specialNote: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  org: z.union([ z.lazy(() => OrganizationScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  creator: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  category: z.union([ z.lazy(() => CategoryNullableScalarRelationFilterSchema),z.lazy(() => CategoryWhereInputSchema) ]).optional().nullable(),
  analytics: z.union([ z.lazy(() => AdAnalyticsNullableScalarRelationFilterSchema),z.lazy(() => AdAnalyticsWhereInputSchema) ]).optional().nullable(),
  payments: z.lazy(() => PaymentListRelationFilterSchema).optional(),
  favorites: z.lazy(() => FavoriteListRelationFilterSchema).optional(),
  reports: z.lazy(() => ReportListRelationFilterSchema).optional(),
  revisions: z.lazy(() => AdRevisionListRelationFilterSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapListRelationFilterSchema).optional(),
  shareEvents: z.lazy(() => ShareEventListRelationFilterSchema).optional(),
  media: z.lazy(() => AdMediaListRelationFilterSchema).optional()
}).strict());

export const AdOrderByWithAggregationInputSchema: z.ZodType<Prisma.AdOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  isDraft: z.lazy(() => SortOrderSchema).optional(),
  boosted: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  boostExpiry: z.lazy(() => SortOrderSchema).optional(),
  featureExpiry: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiryDate: z.lazy(() => SortOrderSchema).optional(),
  seoTitle: z.lazy(() => SortOrderSchema).optional(),
  seoDescription: z.lazy(() => SortOrderSchema).optional(),
  seoSlug: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  condition: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  model: z.lazy(() => SortOrderSchema).optional(),
  trimEdition: z.lazy(() => SortOrderSchema).optional(),
  manufacturedYear: z.lazy(() => SortOrderSchema).optional(),
  modelYear: z.lazy(() => SortOrderSchema).optional(),
  mileage: z.lazy(() => SortOrderSchema).optional(),
  engineCapacity: z.lazy(() => SortOrderSchema).optional(),
  fuelType: z.lazy(() => SortOrderSchema).optional(),
  transmission: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  bikeType: z.lazy(() => SortOrderSchema).optional(),
  vehicleType: z.lazy(() => SortOrderSchema).optional(),
  serviceType: z.lazy(() => SortOrderSchema).optional(),
  partType: z.lazy(() => SortOrderSchema).optional(),
  maintenanceType: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.lazy(() => SortOrderSchema).optional(),
  whatsappNumber: z.lazy(() => SortOrderSchema).optional(),
  termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  province: z.lazy(() => SortOrderSchema).optional(),
  district: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  specialNote: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AdCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AdAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AdMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AdMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AdSumOrderByAggregateInputSchema).optional()
}).strict();

export const AdScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AdScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AdScalarWhereWithAggregatesInputSchema),z.lazy(() => AdScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdScalarWhereWithAggregatesInputSchema),z.lazy(() => AdScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  orgId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumAdTypeWithAggregatesFilterSchema),z.lazy(() => AdTypeSchema) ]).optional(),
  price: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  published: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  isDraft: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  boosted: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  featured: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  boostExpiry: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  featureExpiry: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumAdStatusWithAggregatesFilterSchema),z.lazy(() => AdStatusSchema) ]).optional(),
  expiryDate: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  seoTitle: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  seoDescription: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  seoSlug: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  condition: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  brand: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  model: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  trimEdition: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  manufacturedYear: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  modelYear: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  mileage: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  engineCapacity: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => EnumFuelTypeNullableWithAggregatesFilterSchema),z.lazy(() => FuelTypeSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => EnumTransmissionNullableWithAggregatesFilterSchema),z.lazy(() => TransmissionSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => EnumBodyTypeNullableWithAggregatesFilterSchema),z.lazy(() => BodyTypeSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => EnumBikeTypeNullableWithAggregatesFilterSchema),z.lazy(() => BikeTypeSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => EnumHeavyDutyVehicleTypeNullableWithAggregatesFilterSchema),z.lazy(() => HeavyDutyVehicleTypeSchema) ]).optional().nullable(),
  serviceType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  partType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  maintenanceType: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  phoneNumber: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  whatsappNumber: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  termsAndConditions: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  province: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  district: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  specialNote: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AdRevisionWhereInputSchema: z.ZodType<Prisma.AdRevisionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdRevisionWhereInputSchema),z.lazy(() => AdRevisionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdRevisionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdRevisionWhereInputSchema),z.lazy(() => AdRevisionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  version: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict();

export const AdRevisionOrderByWithRelationInputSchema: z.ZodType<Prisma.AdRevisionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  ad: z.lazy(() => AdOrderByWithRelationInputSchema).optional()
}).strict();

export const AdRevisionWhereUniqueInputSchema: z.ZodType<Prisma.AdRevisionWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => AdRevisionWhereInputSchema),z.lazy(() => AdRevisionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdRevisionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdRevisionWhereInputSchema),z.lazy(() => AdRevisionWhereInputSchema).array() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  version: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict());

export const AdRevisionOrderByWithAggregationInputSchema: z.ZodType<Prisma.AdRevisionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AdRevisionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AdRevisionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AdRevisionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AdRevisionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AdRevisionSumOrderByAggregateInputSchema).optional()
}).strict();

export const AdRevisionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AdRevisionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AdRevisionScalarWhereWithAggregatesInputSchema),z.lazy(() => AdRevisionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdRevisionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdRevisionScalarWhereWithAggregatesInputSchema),z.lazy(() => AdRevisionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  version: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  data: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AdAnalyticsWhereInputSchema: z.ZodType<Prisma.AdAnalyticsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdAnalyticsWhereInputSchema),z.lazy(() => AdAnalyticsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdAnalyticsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdAnalyticsWhereInputSchema),z.lazy(() => AdAnalyticsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  views: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  clicks: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  impressions: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict();

export const AdAnalyticsOrderByWithRelationInputSchema: z.ZodType<Prisma.AdAnalyticsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  impressions: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ad: z.lazy(() => AdOrderByWithRelationInputSchema).optional()
}).strict();

export const AdAnalyticsWhereUniqueInputSchema: z.ZodType<Prisma.AdAnalyticsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    adId: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    adId: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  adId: z.string().optional(),
  AND: z.union([ z.lazy(() => AdAnalyticsWhereInputSchema),z.lazy(() => AdAnalyticsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdAnalyticsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdAnalyticsWhereInputSchema),z.lazy(() => AdAnalyticsWhereInputSchema).array() ]).optional(),
  views: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  clicks: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  impressions: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict());

export const AdAnalyticsOrderByWithAggregationInputSchema: z.ZodType<Prisma.AdAnalyticsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  impressions: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AdAnalyticsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AdAnalyticsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AdAnalyticsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AdAnalyticsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AdAnalyticsSumOrderByAggregateInputSchema).optional()
}).strict();

export const AdAnalyticsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AdAnalyticsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AdAnalyticsScalarWhereWithAggregatesInputSchema),z.lazy(() => AdAnalyticsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdAnalyticsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdAnalyticsScalarWhereWithAggregatesInputSchema),z.lazy(() => AdAnalyticsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  views: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  clicks: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  impressions: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const CategoryWhereInputSchema: z.ZodType<Prisma.CategoryWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  ads: z.lazy(() => AdListRelationFilterSchema).optional()
}).strict();

export const CategoryOrderByWithRelationInputSchema: z.ZodType<Prisma.CategoryOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  ads: z.lazy(() => AdOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CategoryWhereUniqueInputSchema: z.ZodType<Prisma.CategoryWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string()
  }),
  z.object({
    id: z.string(),
    name: z.string(),
  }),
  z.object({
    id: z.string(),
    slug: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    name: z.string(),
    slug: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryWhereInputSchema),z.lazy(() => CategoryWhereInputSchema).array() ]).optional(),
  ads: z.lazy(() => AdListRelationFilterSchema).optional()
}).strict());

export const CategoryOrderByWithAggregationInputSchema: z.ZodType<Prisma.CategoryOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => CategoryCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CategoryMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CategoryMinOrderByAggregateInputSchema).optional()
}).strict();

export const CategoryScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CategoryScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema),z.lazy(() => CategoryScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const TagWhereInputSchema: z.ZodType<Prisma.TagWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const TagOrderByWithRelationInputSchema: z.ZodType<Prisma.TagOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagWhereUniqueInputSchema: z.ZodType<Prisma.TagWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    name: z.string(),
    slug: z.string()
  }),
  z.object({
    id: z.string(),
    name: z.string(),
  }),
  z.object({
    id: z.string(),
    slug: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    name: z.string(),
    slug: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagWhereInputSchema),z.lazy(() => TagWhereInputSchema).array() ]).optional(),
}).strict());

export const TagOrderByWithAggregationInputSchema: z.ZodType<Prisma.TagOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TagCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TagMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TagMinOrderByAggregateInputSchema).optional()
}).strict();

export const TagScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TagScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TagScalarWhereWithAggregatesInputSchema),z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TagScalarWhereWithAggregatesInputSchema),z.lazy(() => TagScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const MediaWhereInputSchema: z.ZodType<Prisma.MediaWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MediaWhereInputSchema),z.lazy(() => MediaWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MediaWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MediaWhereInputSchema),z.lazy(() => MediaWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  uploaderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumMediaTypeFilterSchema),z.lazy(() => MediaTypeSchema) ]).optional(),
  filename: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  uploader: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  ads: z.lazy(() => AdMediaListRelationFilterSchema).optional()
}).strict();

export const MediaOrderByWithRelationInputSchema: z.ZodType<Prisma.MediaOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uploaderId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  uploader: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  ads: z.lazy(() => AdMediaOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MediaWhereUniqueInputSchema: z.ZodType<Prisma.MediaWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => MediaWhereInputSchema),z.lazy(() => MediaWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MediaWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MediaWhereInputSchema),z.lazy(() => MediaWhereInputSchema).array() ]).optional(),
  uploaderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumMediaTypeFilterSchema),z.lazy(() => MediaTypeSchema) ]).optional(),
  filename: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  uploader: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  ads: z.lazy(() => AdMediaListRelationFilterSchema).optional()
}).strict());

export const MediaOrderByWithAggregationInputSchema: z.ZodType<Prisma.MediaOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uploaderId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MediaCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MediaAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MediaMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MediaMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MediaSumOrderByAggregateInputSchema).optional()
}).strict();

export const MediaScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MediaScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MediaScalarWhereWithAggregatesInputSchema),z.lazy(() => MediaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MediaScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MediaScalarWhereWithAggregatesInputSchema),z.lazy(() => MediaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  uploaderId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumMediaTypeWithAggregatesFilterSchema),z.lazy(() => MediaTypeSchema) ]).optional(),
  filename: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PaymentWhereInputSchema: z.ZodType<Prisma.PaymentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PaymentWhereInputSchema),z.lazy(() => PaymentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentWhereInputSchema),z.lazy(() => PaymentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPaymentTypeFilterSchema),z.lazy(() => PaymentTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumPaymentStatusFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const PaymentOrderByWithRelationInputSchema: z.ZodType<Prisma.PaymentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  ad: z.lazy(() => AdOrderByWithRelationInputSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PaymentWhereUniqueInputSchema: z.ZodType<Prisma.PaymentWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => PaymentWhereInputSchema),z.lazy(() => PaymentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentWhereInputSchema),z.lazy(() => PaymentWhereInputSchema).array() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPaymentTypeFilterSchema),z.lazy(() => PaymentTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumPaymentStatusFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const PaymentOrderByWithAggregationInputSchema: z.ZodType<Prisma.PaymentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PaymentCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PaymentAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PaymentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PaymentMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PaymentSumOrderByAggregateInputSchema).optional()
}).strict();

export const PaymentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PaymentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema),z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema),z.lazy(() => PaymentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPaymentTypeWithAggregatesFilterSchema),z.lazy(() => PaymentTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumPaymentStatusWithAggregatesFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  amount: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FavoriteWhereInputSchema: z.ZodType<Prisma.FavoriteWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FavoriteWhereInputSchema),z.lazy(() => FavoriteWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FavoriteWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FavoriteWhereInputSchema),z.lazy(() => FavoriteWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict();

export const FavoriteOrderByWithRelationInputSchema: z.ZodType<Prisma.FavoriteOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  ad: z.lazy(() => AdOrderByWithRelationInputSchema).optional()
}).strict();

export const FavoriteWhereUniqueInputSchema: z.ZodType<Prisma.FavoriteWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => FavoriteWhereInputSchema),z.lazy(() => FavoriteWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FavoriteWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FavoriteWhereInputSchema),z.lazy(() => FavoriteWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict());

export const FavoriteOrderByWithAggregationInputSchema: z.ZodType<Prisma.FavoriteOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FavoriteCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FavoriteMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FavoriteMinOrderByAggregateInputSchema).optional()
}).strict();

export const FavoriteScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FavoriteScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FavoriteScalarWhereWithAggregatesInputSchema),z.lazy(() => FavoriteScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FavoriteScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FavoriteScalarWhereWithAggregatesInputSchema),z.lazy(() => FavoriteScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const SavedSearchWhereInputSchema: z.ZodType<Prisma.SavedSearchWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SavedSearchWhereInputSchema),z.lazy(() => SavedSearchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SavedSearchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SavedSearchWhereInputSchema),z.lazy(() => SavedSearchWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const SavedSearchOrderByWithRelationInputSchema: z.ZodType<Prisma.SavedSearchOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const SavedSearchWhereUniqueInputSchema: z.ZodType<Prisma.SavedSearchWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => SavedSearchWhereInputSchema),z.lazy(() => SavedSearchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SavedSearchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SavedSearchWhereInputSchema),z.lazy(() => SavedSearchWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const SavedSearchOrderByWithAggregationInputSchema: z.ZodType<Prisma.SavedSearchOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SavedSearchCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SavedSearchMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SavedSearchMinOrderByAggregateInputSchema).optional()
}).strict();

export const SavedSearchScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SavedSearchScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SavedSearchScalarWhereWithAggregatesInputSchema),z.lazy(() => SavedSearchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SavedSearchScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SavedSearchScalarWhereWithAggregatesInputSchema),z.lazy(() => SavedSearchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  filters: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const GeoHeatmapWhereInputSchema: z.ZodType<Prisma.GeoHeatmapWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GeoHeatmapWhereInputSchema),z.lazy(() => GeoHeatmapWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GeoHeatmapWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GeoHeatmapWhereInputSchema),z.lazy(() => GeoHeatmapWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lng: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  region: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict();

export const GeoHeatmapOrderByWithRelationInputSchema: z.ZodType<Prisma.GeoHeatmapOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  lat: z.lazy(() => SortOrderSchema).optional(),
  lng: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  region: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  ad: z.lazy(() => AdOrderByWithRelationInputSchema).optional()
}).strict();

export const GeoHeatmapWhereUniqueInputSchema: z.ZodType<Prisma.GeoHeatmapWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => GeoHeatmapWhereInputSchema),z.lazy(() => GeoHeatmapWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GeoHeatmapWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GeoHeatmapWhereInputSchema),z.lazy(() => GeoHeatmapWhereInputSchema).array() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lng: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  region: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict());

export const GeoHeatmapOrderByWithAggregationInputSchema: z.ZodType<Prisma.GeoHeatmapOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  lat: z.lazy(() => SortOrderSchema).optional(),
  lng: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  region: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => GeoHeatmapCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => GeoHeatmapAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => GeoHeatmapMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => GeoHeatmapMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => GeoHeatmapSumOrderByAggregateInputSchema).optional()
}).strict();

export const GeoHeatmapScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.GeoHeatmapScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => GeoHeatmapScalarWhereWithAggregatesInputSchema),z.lazy(() => GeoHeatmapScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => GeoHeatmapScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GeoHeatmapScalarWhereWithAggregatesInputSchema),z.lazy(() => GeoHeatmapScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  lat: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  lng: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  country: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  region: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MessageWhereInputSchema: z.ZodType<Prisma.MessageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  senderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  receiverId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  adId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sender: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  receiver: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const MessageOrderByWithRelationInputSchema: z.ZodType<Prisma.MessageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  senderId: z.lazy(() => SortOrderSchema).optional(),
  receiverId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  sender: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  receiver: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const MessageWhereUniqueInputSchema: z.ZodType<Prisma.MessageWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  senderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  receiverId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  adId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sender: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  receiver: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const MessageOrderByWithAggregationInputSchema: z.ZodType<Prisma.MessageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  senderId: z.lazy(() => SortOrderSchema).optional(),
  receiverId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MessageCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MessageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MessageMinOrderByAggregateInputSchema).optional()
}).strict();

export const MessageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MessageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MessageScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  senderId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  receiverId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  adId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserNotificationWhereInputSchema: z.ZodType<Prisma.UserNotificationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserNotificationWhereInputSchema),z.lazy(() => UserNotificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserNotificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserNotificationWhereInputSchema),z.lazy(() => UserNotificationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumNotificationTypeFilterSchema),z.lazy(() => NotificationTypeSchema) ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const UserNotificationOrderByWithRelationInputSchema: z.ZodType<Prisma.UserNotificationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const UserNotificationWhereUniqueInputSchema: z.ZodType<Prisma.UserNotificationWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => UserNotificationWhereInputSchema),z.lazy(() => UserNotificationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserNotificationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserNotificationWhereInputSchema),z.lazy(() => UserNotificationWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumNotificationTypeFilterSchema),z.lazy(() => NotificationTypeSchema) ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const UserNotificationOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserNotificationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserNotificationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserNotificationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserNotificationMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserNotificationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserNotificationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserNotificationScalarWhereWithAggregatesInputSchema),z.lazy(() => UserNotificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserNotificationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserNotificationScalarWhereWithAggregatesInputSchema),z.lazy(() => UserNotificationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumNotificationTypeWithAggregatesFilterSchema),z.lazy(() => NotificationTypeSchema) ]).optional(),
  title: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ShareEventWhereInputSchema: z.ZodType<Prisma.ShareEventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShareEventWhereInputSchema),z.lazy(() => ShareEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShareEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShareEventWhereInputSchema),z.lazy(() => ShareEventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  platform: z.union([ z.lazy(() => EnumSharePlatformFilterSchema),z.lazy(() => SharePlatformSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sharedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict();

export const ShareEventOrderByWithRelationInputSchema: z.ZodType<Prisma.ShareEventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional(),
  ad: z.lazy(() => AdOrderByWithRelationInputSchema).optional()
}).strict();

export const ShareEventWhereUniqueInputSchema: z.ZodType<Prisma.ShareEventWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => ShareEventWhereInputSchema),z.lazy(() => ShareEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShareEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShareEventWhereInputSchema),z.lazy(() => ShareEventWhereInputSchema).array() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  platform: z.union([ z.lazy(() => EnumSharePlatformFilterSchema),z.lazy(() => SharePlatformSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sharedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict());

export const ShareEventOrderByWithAggregationInputSchema: z.ZodType<Prisma.ShareEventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ShareEventCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ShareEventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ShareEventMinOrderByAggregateInputSchema).optional()
}).strict();

export const ShareEventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ShareEventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ShareEventScalarWhereWithAggregatesInputSchema),z.lazy(() => ShareEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShareEventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShareEventScalarWhereWithAggregatesInputSchema),z.lazy(() => ShareEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  platform: z.union([ z.lazy(() => EnumSharePlatformWithAggregatesFilterSchema),z.lazy(() => SharePlatformSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sharedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ReportWhereInputSchema: z.ZodType<Prisma.ReportWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReportWhereInputSchema),z.lazy(() => ReportWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportWhereInputSchema),z.lazy(() => ReportWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reason: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  details: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  reporter: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict();

export const ReportOrderByWithRelationInputSchema: z.ZodType<Prisma.ReportOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  reporter: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  ad: z.lazy(() => AdOrderByWithRelationInputSchema).optional()
}).strict();

export const ReportWhereUniqueInputSchema: z.ZodType<Prisma.ReportWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => ReportWhereInputSchema),z.lazy(() => ReportWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportWhereInputSchema),z.lazy(() => ReportWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reason: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  details: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  reporter: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
}).strict());

export const ReportOrderByWithAggregationInputSchema: z.ZodType<Prisma.ReportOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ReportCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ReportMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ReportMinOrderByAggregateInputSchema).optional()
}).strict();

export const ReportScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ReportScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ReportScalarWhereWithAggregatesInputSchema),z.lazy(() => ReportScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportScalarWhereWithAggregatesInputSchema),z.lazy(() => ReportScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  reason: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  details: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AuditLogWhereInputSchema: z.ZodType<Prisma.AuditLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  orgId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resource: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resourceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  org: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
}).strict();

export const AuditLogOrderByWithRelationInputSchema: z.ZodType<Prisma.AuditLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  resource: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  org: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const AuditLogWhereUniqueInputSchema: z.ZodType<Prisma.AuditLogWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogWhereInputSchema),z.lazy(() => AuditLogWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  orgId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resource: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resourceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserNullableScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  org: z.union([ z.lazy(() => OrganizationNullableScalarRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional().nullable(),
}).strict());

export const AuditLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.AuditLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  resource: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AuditLogCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AuditLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AuditLogMinOrderByAggregateInputSchema).optional()
}).strict();

export const AuditLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AuditLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema),z.lazy(() => AuditLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  orgId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  resource: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  resourceId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AdMediaWhereInputSchema: z.ZodType<Prisma.AdMediaWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdMediaWhereInputSchema),z.lazy(() => AdMediaWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdMediaWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdMediaWhereInputSchema),z.lazy(() => AdMediaWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mediaId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
  media: z.union([ z.lazy(() => MediaScalarRelationFilterSchema),z.lazy(() => MediaWhereInputSchema) ]).optional(),
}).strict();

export const AdMediaOrderByWithRelationInputSchema: z.ZodType<Prisma.AdMediaOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  mediaId: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  ad: z.lazy(() => AdOrderByWithRelationInputSchema).optional(),
  media: z.lazy(() => MediaOrderByWithRelationInputSchema).optional()
}).strict();

export const AdMediaWhereUniqueInputSchema: z.ZodType<Prisma.AdMediaWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    adId_mediaId: z.lazy(() => AdMediaAdIdMediaIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    adId_mediaId: z.lazy(() => AdMediaAdIdMediaIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().optional(),
  adId_mediaId: z.lazy(() => AdMediaAdIdMediaIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => AdMediaWhereInputSchema),z.lazy(() => AdMediaWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdMediaWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdMediaWhereInputSchema),z.lazy(() => AdMediaWhereInputSchema).array() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mediaId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  ad: z.union([ z.lazy(() => AdScalarRelationFilterSchema),z.lazy(() => AdWhereInputSchema) ]).optional(),
  media: z.union([ z.lazy(() => MediaScalarRelationFilterSchema),z.lazy(() => MediaWhereInputSchema) ]).optional(),
}).strict());

export const AdMediaOrderByWithAggregationInputSchema: z.ZodType<Prisma.AdMediaOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  mediaId: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AdMediaCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AdMediaAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AdMediaMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AdMediaMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AdMediaSumOrderByAggregateInputSchema).optional()
}).strict();

export const AdMediaScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AdMediaScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AdMediaScalarWhereWithAggregatesInputSchema),z.lazy(() => AdMediaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdMediaScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdMediaScalarWhereWithAggregatesInputSchema),z.lazy(() => AdMediaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  mediaId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  activeOrganizationId: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  userId: z.string(),
  activeOrganizationId: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  userId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationCreateInputSchema: z.ZodType<Prisma.VerificationCreateInput> = z.object({
  id: z.string(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationUncheckedCreateInput> = z.object({
  id: z.string(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateInputSchema: z.ZodType<Prisma.VerificationUpdateInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationCreateManyInputSchema: z.ZodType<Prisma.VerificationCreateManyInput> = z.object({
  id: z.string(),
  identifier: z.string(),
  value: z.string(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional().nullable(),
  updatedAt: z.coerce.date().optional().nullable()
}).strict();

export const VerificationUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationUpdateManyMutationInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const VerificationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationUncheckedUpdateManyInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ads: z.lazy(() => AdCreateNestedManyWithoutOrgInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ads: z.lazy(() => AdUncheckedCreateNestedManyWithoutOrgInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ads: z.lazy(() => AdUpdateManyWithoutOrgNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ads: z.lazy(() => AdUncheckedUpdateManyWithoutOrgNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MemberCreateInputSchema: z.ZodType<Prisma.MemberCreateInput> = z.object({
  id: z.string(),
  role: z.string(),
  createdAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateInputSchema: z.ZodType<Prisma.MemberUncheckedCreateInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberUpdateInputSchema: z.ZodType<Prisma.MemberUpdateInput> = z.object({
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateInput> = z.object({
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateManyInputSchema: z.ZodType<Prisma.MemberCreateManyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberUpdateManyMutationInputSchema: z.ZodType<Prisma.MemberUpdateManyMutationInput> = z.object({
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyInput> = z.object({
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateInputSchema: z.ZodType<Prisma.InvitationCreateInput> = z.object({
  id: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationUpdateInputSchema: z.ZodType<Prisma.InvitationUpdateInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateInput> = z.object({
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationCreateManyInputSchema: z.ZodType<Prisma.InvitationCreateManyInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationUpdateManyMutationInputSchema: z.ZodType<Prisma.InvitationUpdateManyMutationInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyInput> = z.object({
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorCreateInputSchema: z.ZodType<Prisma.TwoFactorCreateInput> = z.object({
  id: z.string(),
  secret: z.string(),
  backupCodes: z.string(),
  user: z.lazy(() => UserCreateNestedOneWithoutTwofactorsInputSchema)
}).strict();

export const TwoFactorUncheckedCreateInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateInput> = z.object({
  id: z.string(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();

export const TwoFactorUpdateInputSchema: z.ZodType<Prisma.TwoFactorUpdateInput> = z.object({
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutTwofactorsNestedInputSchema).optional()
}).strict();

export const TwoFactorUncheckedUpdateInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateInput> = z.object({
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorCreateManyInputSchema: z.ZodType<Prisma.TwoFactorCreateManyInput> = z.object({
  id: z.string(),
  secret: z.string(),
  backupCodes: z.string(),
  userId: z.string()
}).strict();

export const TwoFactorUpdateManyMutationInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyMutationInput> = z.object({
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyInput> = z.object({
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TasksCreateInputSchema: z.ZodType<Prisma.TasksCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  done: z.boolean().optional()
}).strict();

export const TasksUncheckedCreateInputSchema: z.ZodType<Prisma.TasksUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  done: z.boolean().optional()
}).strict();

export const TasksUpdateInputSchema: z.ZodType<Prisma.TasksUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  done: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TasksUncheckedUpdateInputSchema: z.ZodType<Prisma.TasksUncheckedUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  done: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TasksCreateManyInputSchema: z.ZodType<Prisma.TasksCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  done: z.boolean().optional()
}).strict();

export const TasksUpdateManyMutationInputSchema: z.ZodType<Prisma.TasksUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  done: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TasksUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TasksUncheckedUpdateManyInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  done: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdCreateInputSchema: z.ZodType<Prisma.AdCreateInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateInputSchema: z.ZodType<Prisma.AdUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUpdateInputSchema: z.ZodType<Prisma.AdUpdateInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateInputSchema: z.ZodType<Prisma.AdUncheckedUpdateInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdCreateManyInputSchema: z.ZodType<Prisma.AdCreateManyInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AdUpdateManyMutationInputSchema: z.ZodType<Prisma.AdUpdateManyMutationInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AdUncheckedUpdateManyInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdRevisionCreateInputSchema: z.ZodType<Prisma.AdRevisionCreateInput> = z.object({
  id: z.string().optional(),
  version: z.number().int(),
  data: InputJsonValueSchema,
  createdAt: z.coerce.date().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutRevisionsInputSchema)
}).strict();

export const AdRevisionUncheckedCreateInputSchema: z.ZodType<Prisma.AdRevisionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  version: z.number().int(),
  data: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const AdRevisionUpdateInputSchema: z.ZodType<Prisma.AdRevisionUpdateInput> = z.object({
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutRevisionsNestedInputSchema).optional()
}).strict();

export const AdRevisionUncheckedUpdateInputSchema: z.ZodType<Prisma.AdRevisionUncheckedUpdateInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdRevisionCreateManyInputSchema: z.ZodType<Prisma.AdRevisionCreateManyInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  version: z.number().int(),
  data: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const AdRevisionUpdateManyMutationInputSchema: z.ZodType<Prisma.AdRevisionUpdateManyMutationInput> = z.object({
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdRevisionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AdRevisionUncheckedUpdateManyInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdAnalyticsCreateInputSchema: z.ZodType<Prisma.AdAnalyticsCreateInput> = z.object({
  id: z.string().optional(),
  views: z.number().int().optional(),
  clicks: z.number().int().optional(),
  impressions: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutAnalyticsInputSchema)
}).strict();

export const AdAnalyticsUncheckedCreateInputSchema: z.ZodType<Prisma.AdAnalyticsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  views: z.number().int().optional(),
  clicks: z.number().int().optional(),
  impressions: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AdAnalyticsUpdateInputSchema: z.ZodType<Prisma.AdAnalyticsUpdateInput> = z.object({
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  impressions: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutAnalyticsNestedInputSchema).optional()
}).strict();

export const AdAnalyticsUncheckedUpdateInputSchema: z.ZodType<Prisma.AdAnalyticsUncheckedUpdateInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  impressions: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdAnalyticsCreateManyInputSchema: z.ZodType<Prisma.AdAnalyticsCreateManyInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  views: z.number().int().optional(),
  clicks: z.number().int().optional(),
  impressions: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AdAnalyticsUpdateManyMutationInputSchema: z.ZodType<Prisma.AdAnalyticsUpdateManyMutationInput> = z.object({
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  impressions: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdAnalyticsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AdAnalyticsUncheckedUpdateManyInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  impressions: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CategoryCreateInputSchema: z.ZodType<Prisma.CategoryCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  ads: z.lazy(() => AdCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryUncheckedCreateInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  ads: z.lazy(() => AdUncheckedCreateNestedManyWithoutCategoryInputSchema).optional()
}).strict();

export const CategoryUpdateInputSchema: z.ZodType<Prisma.CategoryUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ads: z.lazy(() => AdUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryUncheckedUpdateInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  ads: z.lazy(() => AdUncheckedUpdateManyWithoutCategoryNestedInputSchema).optional()
}).strict();

export const CategoryCreateManyInputSchema: z.ZodType<Prisma.CategoryCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string()
}).strict();

export const CategoryUpdateManyMutationInputSchema: z.ZodType<Prisma.CategoryUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CategoryUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateManyInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagCreateInputSchema: z.ZodType<Prisma.TagCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string()
}).strict();

export const TagUncheckedCreateInputSchema: z.ZodType<Prisma.TagUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string()
}).strict();

export const TagUpdateInputSchema: z.ZodType<Prisma.TagUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagUncheckedUpdateInputSchema: z.ZodType<Prisma.TagUncheckedUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagCreateManyInputSchema: z.ZodType<Prisma.TagCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string()
}).strict();

export const TagUpdateManyMutationInputSchema: z.ZodType<Prisma.TagUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TagUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TagUncheckedUpdateManyInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MediaCreateInputSchema: z.ZodType<Prisma.MediaCreateInput> = z.object({
  id: z.string().optional(),
  url: z.string(),
  type: z.lazy(() => MediaTypeSchema),
  filename: z.string().optional().nullable(),
  size: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  uploader: z.lazy(() => UserCreateNestedOneWithoutMediaUploadedInputSchema),
  ads: z.lazy(() => AdMediaCreateNestedManyWithoutMediaInputSchema).optional()
}).strict();

export const MediaUncheckedCreateInputSchema: z.ZodType<Prisma.MediaUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  uploaderId: z.string(),
  url: z.string(),
  type: z.lazy(() => MediaTypeSchema),
  filename: z.string().optional().nullable(),
  size: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  ads: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutMediaInputSchema).optional()
}).strict();

export const MediaUpdateInputSchema: z.ZodType<Prisma.MediaUpdateInput> = z.object({
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => EnumMediaTypeFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  uploader: z.lazy(() => UserUpdateOneRequiredWithoutMediaUploadedNestedInputSchema).optional(),
  ads: z.lazy(() => AdMediaUpdateManyWithoutMediaNestedInputSchema).optional()
}).strict();

export const MediaUncheckedUpdateInputSchema: z.ZodType<Prisma.MediaUncheckedUpdateInput> = z.object({
  uploaderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => EnumMediaTypeFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ads: z.lazy(() => AdMediaUncheckedUpdateManyWithoutMediaNestedInputSchema).optional()
}).strict();

export const MediaCreateManyInputSchema: z.ZodType<Prisma.MediaCreateManyInput> = z.object({
  id: z.string().optional(),
  uploaderId: z.string(),
  url: z.string(),
  type: z.lazy(() => MediaTypeSchema),
  filename: z.string().optional().nullable(),
  size: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const MediaUpdateManyMutationInputSchema: z.ZodType<Prisma.MediaUpdateManyMutationInput> = z.object({
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => EnumMediaTypeFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MediaUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MediaUncheckedUpdateManyInput> = z.object({
  uploaderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => EnumMediaTypeFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentCreateInputSchema: z.ZodType<Prisma.PaymentCreateInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => PaymentTypeSchema),
  status: z.lazy(() => PaymentStatusSchema),
  amount: z.number(),
  sessionId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutPaymentsInputSchema),
  user: z.lazy(() => UserCreateNestedOneWithoutPaymentsInputSchema)
}).strict();

export const PaymentUncheckedCreateInputSchema: z.ZodType<Prisma.PaymentUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  userId: z.string(),
  type: z.lazy(() => PaymentTypeSchema),
  status: z.lazy(() => PaymentStatusSchema),
  amount: z.number(),
  sessionId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const PaymentUpdateInputSchema: z.ZodType<Prisma.PaymentUpdateInput> = z.object({
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutPaymentsNestedInputSchema).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPaymentsNestedInputSchema).optional()
}).strict();

export const PaymentUncheckedUpdateInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentCreateManyInputSchema: z.ZodType<Prisma.PaymentCreateManyInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  userId: z.string(),
  type: z.lazy(() => PaymentTypeSchema),
  status: z.lazy(() => PaymentStatusSchema),
  amount: z.number(),
  sessionId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const PaymentUpdateManyMutationInputSchema: z.ZodType<Prisma.PaymentUpdateManyMutationInput> = z.object({
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateManyInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FavoriteCreateInputSchema: z.ZodType<Prisma.FavoriteCreateInput> = z.object({
  id: z.string().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutFavoritesInputSchema),
  ad: z.lazy(() => AdCreateNestedOneWithoutFavoritesInputSchema)
}).strict();

export const FavoriteUncheckedCreateInputSchema: z.ZodType<Prisma.FavoriteUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  adId: z.string()
}).strict();

export const FavoriteUpdateInputSchema: z.ZodType<Prisma.FavoriteUpdateInput> = z.object({
  user: z.lazy(() => UserUpdateOneRequiredWithoutFavoritesNestedInputSchema).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutFavoritesNestedInputSchema).optional()
}).strict();

export const FavoriteUncheckedUpdateInputSchema: z.ZodType<Prisma.FavoriteUncheckedUpdateInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FavoriteCreateManyInputSchema: z.ZodType<Prisma.FavoriteCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  adId: z.string()
}).strict();

export const FavoriteUpdateManyMutationInputSchema: z.ZodType<Prisma.FavoriteUpdateManyMutationInput> = z.object({
}).strict();

export const FavoriteUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FavoriteUncheckedUpdateManyInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SavedSearchCreateInputSchema: z.ZodType<Prisma.SavedSearchCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  filters: InputJsonValueSchema,
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutSavedSearchesInputSchema)
}).strict();

export const SavedSearchUncheckedCreateInputSchema: z.ZodType<Prisma.SavedSearchUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  name: z.string(),
  filters: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const SavedSearchUpdateInputSchema: z.ZodType<Prisma.SavedSearchUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSavedSearchesNestedInputSchema).optional()
}).strict();

export const SavedSearchUncheckedUpdateInputSchema: z.ZodType<Prisma.SavedSearchUncheckedUpdateInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SavedSearchCreateManyInputSchema: z.ZodType<Prisma.SavedSearchCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  name: z.string(),
  filters: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const SavedSearchUpdateManyMutationInputSchema: z.ZodType<Prisma.SavedSearchUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SavedSearchUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SavedSearchUncheckedUpdateManyInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GeoHeatmapCreateInputSchema: z.ZodType<Prisma.GeoHeatmapCreateInput> = z.object({
  id: z.string().optional(),
  lat: z.number(),
  lng: z.number(),
  country: z.string().optional().nullable(),
  region: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutGeoViewsInputSchema)
}).strict();

export const GeoHeatmapUncheckedCreateInputSchema: z.ZodType<Prisma.GeoHeatmapUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  lat: z.number(),
  lng: z.number(),
  country: z.string().optional().nullable(),
  region: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const GeoHeatmapUpdateInputSchema: z.ZodType<Prisma.GeoHeatmapUpdateInput> = z.object({
  lat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lng: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutGeoViewsNestedInputSchema).optional()
}).strict();

export const GeoHeatmapUncheckedUpdateInputSchema: z.ZodType<Prisma.GeoHeatmapUncheckedUpdateInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lng: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GeoHeatmapCreateManyInputSchema: z.ZodType<Prisma.GeoHeatmapCreateManyInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  lat: z.number(),
  lng: z.number(),
  country: z.string().optional().nullable(),
  region: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const GeoHeatmapUpdateManyMutationInputSchema: z.ZodType<Prisma.GeoHeatmapUpdateManyMutationInput> = z.object({
  lat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lng: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GeoHeatmapUncheckedUpdateManyInputSchema: z.ZodType<Prisma.GeoHeatmapUncheckedUpdateManyInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  lat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lng: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageCreateInputSchema: z.ZodType<Prisma.MessageCreateInput> = z.object({
  id: z.string().optional(),
  content: z.string(),
  read: z.boolean().optional(),
  adId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  sender: z.lazy(() => UserCreateNestedOneWithoutMessagesSentInputSchema),
  receiver: z.lazy(() => UserCreateNestedOneWithoutMessagesReceivedInputSchema)
}).strict();

export const MessageUncheckedCreateInputSchema: z.ZodType<Prisma.MessageUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  senderId: z.string(),
  receiverId: z.string(),
  content: z.string(),
  read: z.boolean().optional(),
  adId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const MessageUpdateInputSchema: z.ZodType<Prisma.MessageUpdateInput> = z.object({
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sender: z.lazy(() => UserUpdateOneRequiredWithoutMessagesSentNestedInputSchema).optional(),
  receiver: z.lazy(() => UserUpdateOneRequiredWithoutMessagesReceivedNestedInputSchema).optional()
}).strict();

export const MessageUncheckedUpdateInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateInput> = z.object({
  senderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiverId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageCreateManyInputSchema: z.ZodType<Prisma.MessageCreateManyInput> = z.object({
  id: z.string().optional(),
  senderId: z.string(),
  receiverId: z.string(),
  content: z.string(),
  read: z.boolean().optional(),
  adId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const MessageUpdateManyMutationInputSchema: z.ZodType<Prisma.MessageUpdateManyMutationInput> = z.object({
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyInput> = z.object({
  senderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  receiverId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserNotificationCreateInputSchema: z.ZodType<Prisma.UserNotificationCreateInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => NotificationTypeSchema),
  title: z.string(),
  message: z.string(),
  read: z.boolean().optional(),
  data: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutNotificationsInputSchema)
}).strict();

export const UserNotificationUncheckedCreateInputSchema: z.ZodType<Prisma.UserNotificationUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  type: z.lazy(() => NotificationTypeSchema),
  title: z.string(),
  message: z.string(),
  read: z.boolean().optional(),
  data: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserNotificationUpdateInputSchema: z.ZodType<Prisma.UserNotificationUpdateInput> = z.object({
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutNotificationsNestedInputSchema).optional()
}).strict();

export const UserNotificationUncheckedUpdateInputSchema: z.ZodType<Prisma.UserNotificationUncheckedUpdateInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserNotificationCreateManyInputSchema: z.ZodType<Prisma.UserNotificationCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  type: z.lazy(() => NotificationTypeSchema),
  title: z.string(),
  message: z.string(),
  read: z.boolean().optional(),
  data: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserNotificationUpdateManyMutationInputSchema: z.ZodType<Prisma.UserNotificationUpdateManyMutationInput> = z.object({
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserNotificationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserNotificationUncheckedUpdateManyInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShareEventCreateInputSchema: z.ZodType<Prisma.ShareEventCreateInput> = z.object({
  id: z.string().optional(),
  platform: z.lazy(() => SharePlatformSchema),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sharedAt: z.coerce.date().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutShareEventsInputSchema)
}).strict();

export const ShareEventUncheckedCreateInputSchema: z.ZodType<Prisma.ShareEventUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  platform: z.lazy(() => SharePlatformSchema),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sharedAt: z.coerce.date().optional()
}).strict();

export const ShareEventUpdateInputSchema: z.ZodType<Prisma.ShareEventUpdateInput> = z.object({
  platform: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => EnumSharePlatformFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutShareEventsNestedInputSchema).optional()
}).strict();

export const ShareEventUncheckedUpdateInputSchema: z.ZodType<Prisma.ShareEventUncheckedUpdateInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  platform: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => EnumSharePlatformFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShareEventCreateManyInputSchema: z.ZodType<Prisma.ShareEventCreateManyInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  platform: z.lazy(() => SharePlatformSchema),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sharedAt: z.coerce.date().optional()
}).strict();

export const ShareEventUpdateManyMutationInputSchema: z.ZodType<Prisma.ShareEventUpdateManyMutationInput> = z.object({
  platform: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => EnumSharePlatformFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShareEventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ShareEventUncheckedUpdateManyInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  platform: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => EnumSharePlatformFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportCreateInputSchema: z.ZodType<Prisma.ReportCreateInput> = z.object({
  id: z.string().optional(),
  reason: z.string(),
  details: z.string().optional().nullable(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  reporter: z.lazy(() => UserCreateNestedOneWithoutReportsInputSchema),
  ad: z.lazy(() => AdCreateNestedOneWithoutReportsInputSchema)
}).strict();

export const ReportUncheckedCreateInputSchema: z.ZodType<Prisma.ReportUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  adId: z.string(),
  reason: z.string(),
  details: z.string().optional().nullable(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ReportUpdateInputSchema: z.ZodType<Prisma.ReportUpdateInput> = z.object({
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reporter: z.lazy(() => UserUpdateOneRequiredWithoutReportsNestedInputSchema).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutReportsNestedInputSchema).optional()
}).strict();

export const ReportUncheckedUpdateInputSchema: z.ZodType<Prisma.ReportUncheckedUpdateInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportCreateManyInputSchema: z.ZodType<Prisma.ReportCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  adId: z.string(),
  reason: z.string(),
  details: z.string().optional().nullable(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ReportUpdateManyMutationInputSchema: z.ZodType<Prisma.ReportUpdateManyMutationInput> = z.object({
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ReportUncheckedUpdateManyInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogCreateInputSchema: z.ZodType<Prisma.AuditLogCreateInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  resource: z.string().optional().nullable(),
  resourceId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAuditLogsInputSchema).optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  orgId: z.string().optional().nullable(),
  action: z.string(),
  resource: z.string().optional().nullable(),
  resourceId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AuditLogUpdateInputSchema: z.ZodType<Prisma.AuditLogUpdateInput> = z.object({
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAuditLogsNestedInputSchema).optional(),
  org: z.lazy(() => OrganizationUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  orgId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogCreateManyInputSchema: z.ZodType<Prisma.AuditLogCreateManyInput> = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  orgId: z.string().optional().nullable(),
  action: z.string(),
  resource: z.string().optional().nullable(),
  resourceId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AuditLogUpdateManyMutationInputSchema: z.ZodType<Prisma.AuditLogUpdateManyMutationInput> = z.object({
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  orgId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdMediaCreateInputSchema: z.ZodType<Prisma.AdMediaCreateInput> = z.object({
  id: z.string().optional(),
  order: z.number().int().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutMediaInputSchema),
  media: z.lazy(() => MediaCreateNestedOneWithoutAdsInputSchema)
}).strict();

export const AdMediaUncheckedCreateInputSchema: z.ZodType<Prisma.AdMediaUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  mediaId: z.string(),
  order: z.number().int().optional()
}).strict();

export const AdMediaUpdateInputSchema: z.ZodType<Prisma.AdMediaUpdateInput> = z.object({
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutMediaNestedInputSchema).optional(),
  media: z.lazy(() => MediaUpdateOneRequiredWithoutAdsNestedInputSchema).optional()
}).strict();

export const AdMediaUncheckedUpdateInputSchema: z.ZodType<Prisma.AdMediaUncheckedUpdateInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mediaId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdMediaCreateManyInputSchema: z.ZodType<Prisma.AdMediaCreateManyInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  mediaId: z.string(),
  order: z.number().int().optional()
}).strict();

export const AdMediaUpdateManyMutationInputSchema: z.ZodType<Prisma.AdMediaUpdateManyMutationInput> = z.object({
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdMediaUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AdMediaUncheckedUpdateManyInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  mediaId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const SessionListRelationFilterSchema: z.ZodType<Prisma.SessionListRelationFilter> = z.object({
  every: z.lazy(() => SessionWhereInputSchema).optional(),
  some: z.lazy(() => SessionWhereInputSchema).optional(),
  none: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const MemberListRelationFilterSchema: z.ZodType<Prisma.MemberListRelationFilter> = z.object({
  every: z.lazy(() => MemberWhereInputSchema).optional(),
  some: z.lazy(() => MemberWhereInputSchema).optional(),
  none: z.lazy(() => MemberWhereInputSchema).optional()
}).strict();

export const InvitationListRelationFilterSchema: z.ZodType<Prisma.InvitationListRelationFilter> = z.object({
  every: z.lazy(() => InvitationWhereInputSchema).optional(),
  some: z.lazy(() => InvitationWhereInputSchema).optional(),
  none: z.lazy(() => InvitationWhereInputSchema).optional()
}).strict();

export const TwoFactorListRelationFilterSchema: z.ZodType<Prisma.TwoFactorListRelationFilter> = z.object({
  every: z.lazy(() => TwoFactorWhereInputSchema).optional(),
  some: z.lazy(() => TwoFactorWhereInputSchema).optional(),
  none: z.lazy(() => TwoFactorWhereInputSchema).optional()
}).strict();

export const AdListRelationFilterSchema: z.ZodType<Prisma.AdListRelationFilter> = z.object({
  every: z.lazy(() => AdWhereInputSchema).optional(),
  some: z.lazy(() => AdWhereInputSchema).optional(),
  none: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const MediaListRelationFilterSchema: z.ZodType<Prisma.MediaListRelationFilter> = z.object({
  every: z.lazy(() => MediaWhereInputSchema).optional(),
  some: z.lazy(() => MediaWhereInputSchema).optional(),
  none: z.lazy(() => MediaWhereInputSchema).optional()
}).strict();

export const PaymentListRelationFilterSchema: z.ZodType<Prisma.PaymentListRelationFilter> = z.object({
  every: z.lazy(() => PaymentWhereInputSchema).optional(),
  some: z.lazy(() => PaymentWhereInputSchema).optional(),
  none: z.lazy(() => PaymentWhereInputSchema).optional()
}).strict();

export const FavoriteListRelationFilterSchema: z.ZodType<Prisma.FavoriteListRelationFilter> = z.object({
  every: z.lazy(() => FavoriteWhereInputSchema).optional(),
  some: z.lazy(() => FavoriteWhereInputSchema).optional(),
  none: z.lazy(() => FavoriteWhereInputSchema).optional()
}).strict();

export const SavedSearchListRelationFilterSchema: z.ZodType<Prisma.SavedSearchListRelationFilter> = z.object({
  every: z.lazy(() => SavedSearchWhereInputSchema).optional(),
  some: z.lazy(() => SavedSearchWhereInputSchema).optional(),
  none: z.lazy(() => SavedSearchWhereInputSchema).optional()
}).strict();

export const MessageListRelationFilterSchema: z.ZodType<Prisma.MessageListRelationFilter> = z.object({
  every: z.lazy(() => MessageWhereInputSchema).optional(),
  some: z.lazy(() => MessageWhereInputSchema).optional(),
  none: z.lazy(() => MessageWhereInputSchema).optional()
}).strict();

export const UserNotificationListRelationFilterSchema: z.ZodType<Prisma.UserNotificationListRelationFilter> = z.object({
  every: z.lazy(() => UserNotificationWhereInputSchema).optional(),
  some: z.lazy(() => UserNotificationWhereInputSchema).optional(),
  none: z.lazy(() => UserNotificationWhereInputSchema).optional()
}).strict();

export const ReportListRelationFilterSchema: z.ZodType<Prisma.ReportListRelationFilter> = z.object({
  every: z.lazy(() => ReportWhereInputSchema).optional(),
  some: z.lazy(() => ReportWhereInputSchema).optional(),
  none: z.lazy(() => ReportWhereInputSchema).optional()
}).strict();

export const AuditLogListRelationFilterSchema: z.ZodType<Prisma.AuditLogListRelationFilter> = z.object({
  every: z.lazy(() => AuditLogWhereInputSchema).optional(),
  some: z.lazy(() => AuditLogWhereInputSchema).optional(),
  none: z.lazy(() => AuditLogWhereInputSchema).optional()
}).strict();

export const SessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MemberOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InvitationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TwoFactorOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AdOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MediaOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MediaOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PaymentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FavoriteOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FavoriteOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SavedSearchOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SavedSearchOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MessageOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserNotificationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserNotificationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ReportOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AuditLogOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  twoFactorEnabled: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  banned: z.lazy(() => SortOrderSchema).optional(),
  banReason: z.lazy(() => SortOrderSchema).optional(),
  banExpires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  activeOrganizationId: z.lazy(() => SortOrderSchema).optional(),
  impersonatedBy: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  accountId: z.lazy(() => SortOrderSchema).optional(),
  providerId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  accessToken: z.lazy(() => SortOrderSchema).optional(),
  refreshToken: z.lazy(() => SortOrderSchema).optional(),
  idToken: z.lazy(() => SortOrderSchema).optional(),
  accessTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  refreshTokenExpiresAt: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  identifier: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  logo: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const MemberCountOrderByAggregateInputSchema: z.ZodType<Prisma.MemberCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MemberMinOrderByAggregateInputSchema: z.ZodType<Prisma.MemberMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationCountOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InvitationMinOrderByAggregateInputSchema: z.ZodType<Prisma.InvitationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  organizationId: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  inviterId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorCountOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TwoFactorMinOrderByAggregateInputSchema: z.ZodType<Prisma.TwoFactorMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  secret: z.lazy(() => SortOrderSchema).optional(),
  backupCodes: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TasksCountOrderByAggregateInputSchema: z.ZodType<Prisma.TasksCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  done: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TasksMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TasksMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  done: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TasksMinOrderByAggregateInputSchema: z.ZodType<Prisma.TasksMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  done: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumAdTypeFilterSchema: z.ZodType<Prisma.EnumAdTypeFilter> = z.object({
  equals: z.lazy(() => AdTypeSchema).optional(),
  in: z.lazy(() => AdTypeSchema).array().optional(),
  notIn: z.lazy(() => AdTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => NestedEnumAdTypeFilterSchema) ]).optional(),
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const EnumAdStatusFilterSchema: z.ZodType<Prisma.EnumAdStatusFilter> = z.object({
  equals: z.lazy(() => AdStatusSchema).optional(),
  in: z.lazy(() => AdStatusSchema).array().optional(),
  notIn: z.lazy(() => AdStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => NestedEnumAdStatusFilterSchema) ]).optional(),
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const EnumFuelTypeNullableFilterSchema: z.ZodType<Prisma.EnumFuelTypeNullableFilter> = z.object({
  equals: z.lazy(() => FuelTypeSchema).optional().nullable(),
  in: z.lazy(() => FuelTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => FuelTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NestedEnumFuelTypeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const EnumTransmissionNullableFilterSchema: z.ZodType<Prisma.EnumTransmissionNullableFilter> = z.object({
  equals: z.lazy(() => TransmissionSchema).optional().nullable(),
  in: z.lazy(() => TransmissionSchema).array().optional().nullable(),
  notIn: z.lazy(() => TransmissionSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NestedEnumTransmissionNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const EnumBodyTypeNullableFilterSchema: z.ZodType<Prisma.EnumBodyTypeNullableFilter> = z.object({
  equals: z.lazy(() => BodyTypeSchema).optional().nullable(),
  in: z.lazy(() => BodyTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => BodyTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NestedEnumBodyTypeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const EnumBikeTypeNullableFilterSchema: z.ZodType<Prisma.EnumBikeTypeNullableFilter> = z.object({
  equals: z.lazy(() => BikeTypeSchema).optional().nullable(),
  in: z.lazy(() => BikeTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => BikeTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NestedEnumBikeTypeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const EnumHeavyDutyVehicleTypeNullableFilterSchema: z.ZodType<Prisma.EnumHeavyDutyVehicleTypeNullableFilter> = z.object({
  equals: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  in: z.lazy(() => HeavyDutyVehicleTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => HeavyDutyVehicleTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NestedEnumHeavyDutyVehicleTypeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional().nullable(),
  not: InputJsonValueSchema.optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const CategoryNullableScalarRelationFilterSchema: z.ZodType<Prisma.CategoryNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => CategoryWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => CategoryWhereInputSchema).optional().nullable()
}).strict();

export const AdAnalyticsNullableScalarRelationFilterSchema: z.ZodType<Prisma.AdAnalyticsNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => AdAnalyticsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => AdAnalyticsWhereInputSchema).optional().nullable()
}).strict();

export const AdRevisionListRelationFilterSchema: z.ZodType<Prisma.AdRevisionListRelationFilter> = z.object({
  every: z.lazy(() => AdRevisionWhereInputSchema).optional(),
  some: z.lazy(() => AdRevisionWhereInputSchema).optional(),
  none: z.lazy(() => AdRevisionWhereInputSchema).optional()
}).strict();

export const GeoHeatmapListRelationFilterSchema: z.ZodType<Prisma.GeoHeatmapListRelationFilter> = z.object({
  every: z.lazy(() => GeoHeatmapWhereInputSchema).optional(),
  some: z.lazy(() => GeoHeatmapWhereInputSchema).optional(),
  none: z.lazy(() => GeoHeatmapWhereInputSchema).optional()
}).strict();

export const ShareEventListRelationFilterSchema: z.ZodType<Prisma.ShareEventListRelationFilter> = z.object({
  every: z.lazy(() => ShareEventWhereInputSchema).optional(),
  some: z.lazy(() => ShareEventWhereInputSchema).optional(),
  none: z.lazy(() => ShareEventWhereInputSchema).optional()
}).strict();

export const AdMediaListRelationFilterSchema: z.ZodType<Prisma.AdMediaListRelationFilter> = z.object({
  every: z.lazy(() => AdMediaWhereInputSchema).optional(),
  some: z.lazy(() => AdMediaWhereInputSchema).optional(),
  none: z.lazy(() => AdMediaWhereInputSchema).optional()
}).strict();

export const AdRevisionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AdRevisionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GeoHeatmapOrderByRelationAggregateInputSchema: z.ZodType<Prisma.GeoHeatmapOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShareEventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ShareEventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdMediaOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AdMediaOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdCountOrderByAggregateInputSchema: z.ZodType<Prisma.AdCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  isDraft: z.lazy(() => SortOrderSchema).optional(),
  boosted: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  boostExpiry: z.lazy(() => SortOrderSchema).optional(),
  featureExpiry: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiryDate: z.lazy(() => SortOrderSchema).optional(),
  seoTitle: z.lazy(() => SortOrderSchema).optional(),
  seoDescription: z.lazy(() => SortOrderSchema).optional(),
  seoSlug: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  condition: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  model: z.lazy(() => SortOrderSchema).optional(),
  trimEdition: z.lazy(() => SortOrderSchema).optional(),
  manufacturedYear: z.lazy(() => SortOrderSchema).optional(),
  modelYear: z.lazy(() => SortOrderSchema).optional(),
  mileage: z.lazy(() => SortOrderSchema).optional(),
  engineCapacity: z.lazy(() => SortOrderSchema).optional(),
  fuelType: z.lazy(() => SortOrderSchema).optional(),
  transmission: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  bikeType: z.lazy(() => SortOrderSchema).optional(),
  vehicleType: z.lazy(() => SortOrderSchema).optional(),
  serviceType: z.lazy(() => SortOrderSchema).optional(),
  partType: z.lazy(() => SortOrderSchema).optional(),
  maintenanceType: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.lazy(() => SortOrderSchema).optional(),
  whatsappNumber: z.lazy(() => SortOrderSchema).optional(),
  termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  province: z.lazy(() => SortOrderSchema).optional(),
  district: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  specialNote: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AdAvgOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  mileage: z.lazy(() => SortOrderSchema).optional(),
  engineCapacity: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AdMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  isDraft: z.lazy(() => SortOrderSchema).optional(),
  boosted: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  boostExpiry: z.lazy(() => SortOrderSchema).optional(),
  featureExpiry: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiryDate: z.lazy(() => SortOrderSchema).optional(),
  seoTitle: z.lazy(() => SortOrderSchema).optional(),
  seoDescription: z.lazy(() => SortOrderSchema).optional(),
  seoSlug: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  condition: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  model: z.lazy(() => SortOrderSchema).optional(),
  trimEdition: z.lazy(() => SortOrderSchema).optional(),
  manufacturedYear: z.lazy(() => SortOrderSchema).optional(),
  modelYear: z.lazy(() => SortOrderSchema).optional(),
  mileage: z.lazy(() => SortOrderSchema).optional(),
  engineCapacity: z.lazy(() => SortOrderSchema).optional(),
  fuelType: z.lazy(() => SortOrderSchema).optional(),
  transmission: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  bikeType: z.lazy(() => SortOrderSchema).optional(),
  vehicleType: z.lazy(() => SortOrderSchema).optional(),
  serviceType: z.lazy(() => SortOrderSchema).optional(),
  partType: z.lazy(() => SortOrderSchema).optional(),
  maintenanceType: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.lazy(() => SortOrderSchema).optional(),
  whatsappNumber: z.lazy(() => SortOrderSchema).optional(),
  termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  province: z.lazy(() => SortOrderSchema).optional(),
  district: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  specialNote: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdMinOrderByAggregateInputSchema: z.ZodType<Prisma.AdMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  createdBy: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  price: z.lazy(() => SortOrderSchema).optional(),
  published: z.lazy(() => SortOrderSchema).optional(),
  isDraft: z.lazy(() => SortOrderSchema).optional(),
  boosted: z.lazy(() => SortOrderSchema).optional(),
  featured: z.lazy(() => SortOrderSchema).optional(),
  boostExpiry: z.lazy(() => SortOrderSchema).optional(),
  featureExpiry: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  expiryDate: z.lazy(() => SortOrderSchema).optional(),
  seoTitle: z.lazy(() => SortOrderSchema).optional(),
  seoDescription: z.lazy(() => SortOrderSchema).optional(),
  seoSlug: z.lazy(() => SortOrderSchema).optional(),
  categoryId: z.lazy(() => SortOrderSchema).optional(),
  condition: z.lazy(() => SortOrderSchema).optional(),
  brand: z.lazy(() => SortOrderSchema).optional(),
  model: z.lazy(() => SortOrderSchema).optional(),
  trimEdition: z.lazy(() => SortOrderSchema).optional(),
  manufacturedYear: z.lazy(() => SortOrderSchema).optional(),
  modelYear: z.lazy(() => SortOrderSchema).optional(),
  mileage: z.lazy(() => SortOrderSchema).optional(),
  engineCapacity: z.lazy(() => SortOrderSchema).optional(),
  fuelType: z.lazy(() => SortOrderSchema).optional(),
  transmission: z.lazy(() => SortOrderSchema).optional(),
  bodyType: z.lazy(() => SortOrderSchema).optional(),
  bikeType: z.lazy(() => SortOrderSchema).optional(),
  vehicleType: z.lazy(() => SortOrderSchema).optional(),
  serviceType: z.lazy(() => SortOrderSchema).optional(),
  partType: z.lazy(() => SortOrderSchema).optional(),
  maintenanceType: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  phoneNumber: z.lazy(() => SortOrderSchema).optional(),
  whatsappNumber: z.lazy(() => SortOrderSchema).optional(),
  termsAndConditions: z.lazy(() => SortOrderSchema).optional(),
  location: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  province: z.lazy(() => SortOrderSchema).optional(),
  district: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  specialNote: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdSumOrderByAggregateInputSchema: z.ZodType<Prisma.AdSumOrderByAggregateInput> = z.object({
  price: z.lazy(() => SortOrderSchema).optional(),
  mileage: z.lazy(() => SortOrderSchema).optional(),
  engineCapacity: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumAdTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumAdTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AdTypeSchema).optional(),
  in: z.lazy(() => AdTypeSchema).array().optional(),
  notIn: z.lazy(() => AdTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => NestedEnumAdTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAdTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAdTypeFilterSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const EnumAdStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumAdStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AdStatusSchema).optional(),
  in: z.lazy(() => AdStatusSchema).array().optional(),
  notIn: z.lazy(() => AdStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => NestedEnumAdStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAdStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAdStatusFilterSchema).optional()
}).strict();

export const EnumFuelTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumFuelTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FuelTypeSchema).optional().nullable(),
  in: z.lazy(() => FuelTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => FuelTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NestedEnumFuelTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFuelTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFuelTypeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const EnumTransmissionNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumTransmissionNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TransmissionSchema).optional().nullable(),
  in: z.lazy(() => TransmissionSchema).array().optional().nullable(),
  notIn: z.lazy(() => TransmissionSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NestedEnumTransmissionNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTransmissionNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTransmissionNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const EnumBodyTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumBodyTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => BodyTypeSchema).optional().nullable(),
  in: z.lazy(() => BodyTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => BodyTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NestedEnumBodyTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumBodyTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumBodyTypeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const EnumBikeTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumBikeTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => BikeTypeSchema).optional().nullable(),
  in: z.lazy(() => BikeTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => BikeTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NestedEnumBikeTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumBikeTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumBikeTypeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const EnumHeavyDutyVehicleTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumHeavyDutyVehicleTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  in: z.lazy(() => HeavyDutyVehicleTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => HeavyDutyVehicleTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NestedEnumHeavyDutyVehicleTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumHeavyDutyVehicleTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumHeavyDutyVehicleTypeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional().nullable(),
  not: InputJsonValueSchema.optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const AdScalarRelationFilterSchema: z.ZodType<Prisma.AdScalarRelationFilter> = z.object({
  is: z.lazy(() => AdWhereInputSchema).optional(),
  isNot: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const AdRevisionCountOrderByAggregateInputSchema: z.ZodType<Prisma.AdRevisionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdRevisionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AdRevisionAvgOrderByAggregateInput> = z.object({
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdRevisionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AdRevisionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdRevisionMinOrderByAggregateInputSchema: z.ZodType<Prisma.AdRevisionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdRevisionSumOrderByAggregateInputSchema: z.ZodType<Prisma.AdRevisionSumOrderByAggregateInput> = z.object({
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const AdAnalyticsCountOrderByAggregateInputSchema: z.ZodType<Prisma.AdAnalyticsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  impressions: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdAnalyticsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AdAnalyticsAvgOrderByAggregateInput> = z.object({
  views: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  impressions: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdAnalyticsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AdAnalyticsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  impressions: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdAnalyticsMinOrderByAggregateInputSchema: z.ZodType<Prisma.AdAnalyticsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  views: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  impressions: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdAnalyticsSumOrderByAggregateInputSchema: z.ZodType<Prisma.AdAnalyticsSumOrderByAggregateInput> = z.object({
  views: z.lazy(() => SortOrderSchema).optional(),
  clicks: z.lazy(() => SortOrderSchema).optional(),
  impressions: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryCountOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CategoryMinOrderByAggregateInputSchema: z.ZodType<Prisma.CategoryMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagCountOrderByAggregateInputSchema: z.ZodType<Prisma.TagCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TagMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TagMinOrderByAggregateInputSchema: z.ZodType<Prisma.TagMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumMediaTypeFilterSchema: z.ZodType<Prisma.EnumMediaTypeFilter> = z.object({
  equals: z.lazy(() => MediaTypeSchema).optional(),
  in: z.lazy(() => MediaTypeSchema).array().optional(),
  notIn: z.lazy(() => MediaTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => NestedEnumMediaTypeFilterSchema) ]).optional(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const MediaCountOrderByAggregateInputSchema: z.ZodType<Prisma.MediaCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uploaderId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MediaAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MediaAvgOrderByAggregateInput> = z.object({
  size: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MediaMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MediaMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uploaderId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MediaMinOrderByAggregateInputSchema: z.ZodType<Prisma.MediaMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  uploaderId: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  filename: z.lazy(() => SortOrderSchema).optional(),
  size: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MediaSumOrderByAggregateInputSchema: z.ZodType<Prisma.MediaSumOrderByAggregateInput> = z.object({
  size: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumMediaTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumMediaTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => MediaTypeSchema).optional(),
  in: z.lazy(() => MediaTypeSchema).array().optional(),
  notIn: z.lazy(() => MediaTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => NestedEnumMediaTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumMediaTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumMediaTypeFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const EnumPaymentTypeFilterSchema: z.ZodType<Prisma.EnumPaymentTypeFilter> = z.object({
  equals: z.lazy(() => PaymentTypeSchema).optional(),
  in: z.lazy(() => PaymentTypeSchema).array().optional(),
  notIn: z.lazy(() => PaymentTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => NestedEnumPaymentTypeFilterSchema) ]).optional(),
}).strict();

export const EnumPaymentStatusFilterSchema: z.ZodType<Prisma.EnumPaymentStatusFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusFilterSchema) ]).optional(),
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const PaymentCountOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentAvgOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentMinOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  amount: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PaymentSumOrderByAggregateInputSchema: z.ZodType<Prisma.PaymentSumOrderByAggregateInput> = z.object({
  amount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumPaymentTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPaymentTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentTypeSchema).optional(),
  in: z.lazy(() => PaymentTypeSchema).array().optional(),
  notIn: z.lazy(() => PaymentTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => NestedEnumPaymentTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentTypeFilterSchema).optional()
}).strict();

export const EnumPaymentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumPaymentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const FavoriteCountOrderByAggregateInputSchema: z.ZodType<Prisma.FavoriteCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FavoriteMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FavoriteMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FavoriteMinOrderByAggregateInputSchema: z.ZodType<Prisma.FavoriteMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SavedSearchCountOrderByAggregateInputSchema: z.ZodType<Prisma.SavedSearchCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SavedSearchMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SavedSearchMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SavedSearchMinOrderByAggregateInputSchema: z.ZodType<Prisma.SavedSearchMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GeoHeatmapCountOrderByAggregateInputSchema: z.ZodType<Prisma.GeoHeatmapCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  lat: z.lazy(() => SortOrderSchema).optional(),
  lng: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  region: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GeoHeatmapAvgOrderByAggregateInputSchema: z.ZodType<Prisma.GeoHeatmapAvgOrderByAggregateInput> = z.object({
  lat: z.lazy(() => SortOrderSchema).optional(),
  lng: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GeoHeatmapMaxOrderByAggregateInputSchema: z.ZodType<Prisma.GeoHeatmapMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  lat: z.lazy(() => SortOrderSchema).optional(),
  lng: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  region: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GeoHeatmapMinOrderByAggregateInputSchema: z.ZodType<Prisma.GeoHeatmapMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  lat: z.lazy(() => SortOrderSchema).optional(),
  lng: z.lazy(() => SortOrderSchema).optional(),
  country: z.lazy(() => SortOrderSchema).optional(),
  region: z.lazy(() => SortOrderSchema).optional(),
  city: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GeoHeatmapSumOrderByAggregateInputSchema: z.ZodType<Prisma.GeoHeatmapSumOrderByAggregateInput> = z.object({
  lat: z.lazy(() => SortOrderSchema).optional(),
  lng: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageCountOrderByAggregateInputSchema: z.ZodType<Prisma.MessageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  senderId: z.lazy(() => SortOrderSchema).optional(),
  receiverId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MessageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  senderId: z.lazy(() => SortOrderSchema).optional(),
  receiverId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageMinOrderByAggregateInputSchema: z.ZodType<Prisma.MessageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  senderId: z.lazy(() => SortOrderSchema).optional(),
  receiverId: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumNotificationTypeFilterSchema: z.ZodType<Prisma.EnumNotificationTypeFilter> = z.object({
  equals: z.lazy(() => NotificationTypeSchema).optional(),
  in: z.lazy(() => NotificationTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => NestedEnumNotificationTypeFilterSchema) ]).optional(),
}).strict();

export const UserNotificationCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserNotificationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserNotificationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserNotificationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserNotificationMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserNotificationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumNotificationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumNotificationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => NotificationTypeSchema).optional(),
  in: z.lazy(() => NotificationTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => NestedEnumNotificationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumNotificationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumNotificationTypeFilterSchema).optional()
}).strict();

export const EnumSharePlatformFilterSchema: z.ZodType<Prisma.EnumSharePlatformFilter> = z.object({
  equals: z.lazy(() => SharePlatformSchema).optional(),
  in: z.lazy(() => SharePlatformSchema).array().optional(),
  notIn: z.lazy(() => SharePlatformSchema).array().optional(),
  not: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => NestedEnumSharePlatformFilterSchema) ]).optional(),
}).strict();

export const ShareEventCountOrderByAggregateInputSchema: z.ZodType<Prisma.ShareEventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShareEventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ShareEventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ShareEventMinOrderByAggregateInputSchema: z.ZodType<Prisma.ShareEventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  platform: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  sharedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSharePlatformWithAggregatesFilterSchema: z.ZodType<Prisma.EnumSharePlatformWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SharePlatformSchema).optional(),
  in: z.lazy(() => SharePlatformSchema).array().optional(),
  notIn: z.lazy(() => SharePlatformSchema).array().optional(),
  not: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => NestedEnumSharePlatformWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSharePlatformFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSharePlatformFilterSchema).optional()
}).strict();

export const ReportCountOrderByAggregateInputSchema: z.ZodType<Prisma.ReportCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ReportMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ReportMinOrderByAggregateInputSchema: z.ZodType<Prisma.ReportMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  reason: z.lazy(() => SortOrderSchema).optional(),
  details: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserNullableScalarRelationFilterSchema: z.ZodType<Prisma.UserNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const OrganizationNullableScalarRelationFilterSchema: z.ZodType<Prisma.OrganizationNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional().nullable()
}).strict();

export const AuditLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  resource: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  resource: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuditLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.AuditLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  orgId: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  resource: z.lazy(() => SortOrderSchema).optional(),
  resourceId: z.lazy(() => SortOrderSchema).optional(),
  ipAddress: z.lazy(() => SortOrderSchema).optional(),
  userAgent: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MediaScalarRelationFilterSchema: z.ZodType<Prisma.MediaScalarRelationFilter> = z.object({
  is: z.lazy(() => MediaWhereInputSchema).optional(),
  isNot: z.lazy(() => MediaWhereInputSchema).optional()
}).strict();

export const AdMediaAdIdMediaIdCompoundUniqueInputSchema: z.ZodType<Prisma.AdMediaAdIdMediaIdCompoundUniqueInput> = z.object({
  adId: z.string(),
  mediaId: z.string()
}).strict();

export const AdMediaCountOrderByAggregateInputSchema: z.ZodType<Prisma.AdMediaCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  mediaId: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdMediaAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AdMediaAvgOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdMediaMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AdMediaMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  mediaId: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdMediaMinOrderByAggregateInputSchema: z.ZodType<Prisma.AdMediaMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  adId: z.lazy(() => SortOrderSchema).optional(),
  mediaId: z.lazy(() => SortOrderSchema).optional(),
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdMediaSumOrderByAggregateInputSchema: z.ZodType<Prisma.AdMediaSumOrderByAggregateInput> = z.object({
  order: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.AdCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutCreatorInputSchema),z.lazy(() => AdCreateWithoutCreatorInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => AdCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MediaCreateNestedManyWithoutUploaderInputSchema: z.ZodType<Prisma.MediaCreateNestedManyWithoutUploaderInput> = z.object({
  create: z.union([ z.lazy(() => MediaCreateWithoutUploaderInputSchema),z.lazy(() => MediaCreateWithoutUploaderInputSchema).array(),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MediaCreateOrConnectWithoutUploaderInputSchema),z.lazy(() => MediaCreateOrConnectWithoutUploaderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MediaCreateManyUploaderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PaymentCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PaymentCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutUserInputSchema),z.lazy(() => PaymentCreateWithoutUserInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutUserInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FavoriteCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FavoriteCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FavoriteCreateWithoutUserInputSchema),z.lazy(() => FavoriteCreateWithoutUserInputSchema).array(),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FavoriteCreateOrConnectWithoutUserInputSchema),z.lazy(() => FavoriteCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FavoriteCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SavedSearchCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SavedSearchCreateWithoutUserInputSchema),z.lazy(() => SavedSearchCreateWithoutUserInputSchema).array(),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SavedSearchCreateOrConnectWithoutUserInputSchema),z.lazy(() => SavedSearchCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SavedSearchCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageCreateNestedManyWithoutSenderInputSchema: z.ZodType<Prisma.MessageCreateNestedManyWithoutSenderInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutSenderInputSchema),z.lazy(() => MessageCreateWithoutSenderInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutSenderInputSchema),z.lazy(() => MessageCreateOrConnectWithoutSenderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManySenderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageCreateNestedManyWithoutReceiverInputSchema: z.ZodType<Prisma.MessageCreateNestedManyWithoutReceiverInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutReceiverInputSchema),z.lazy(() => MessageCreateWithoutReceiverInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutReceiverInputSchema),z.lazy(() => MessageCreateOrConnectWithoutReceiverInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyReceiverInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserNotificationCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserNotificationCreateWithoutUserInputSchema),z.lazy(() => UserNotificationCreateWithoutUserInputSchema).array(),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserNotificationCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserNotificationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserNotificationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportCreateNestedManyWithoutReporterInputSchema: z.ZodType<Prisma.ReportCreateNestedManyWithoutReporterInput> = z.object({
  create: z.union([ z.lazy(() => ReportCreateWithoutReporterInputSchema),z.lazy(() => ReportCreateWithoutReporterInputSchema).array(),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportCreateOrConnectWithoutReporterInputSchema),z.lazy(() => ReportCreateOrConnectWithoutReporterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportCreateManyReporterInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AuditLogCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogCreateWithoutUserInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdUncheckedCreateNestedManyWithoutCreatorInputSchema: z.ZodType<Prisma.AdUncheckedCreateNestedManyWithoutCreatorInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutCreatorInputSchema),z.lazy(() => AdCreateWithoutCreatorInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => AdCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyCreatorInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MediaUncheckedCreateNestedManyWithoutUploaderInputSchema: z.ZodType<Prisma.MediaUncheckedCreateNestedManyWithoutUploaderInput> = z.object({
  create: z.union([ z.lazy(() => MediaCreateWithoutUploaderInputSchema),z.lazy(() => MediaCreateWithoutUploaderInputSchema).array(),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MediaCreateOrConnectWithoutUploaderInputSchema),z.lazy(() => MediaCreateOrConnectWithoutUploaderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MediaCreateManyUploaderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PaymentUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.PaymentUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutUserInputSchema),z.lazy(() => PaymentCreateWithoutUserInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutUserInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FavoriteUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.FavoriteUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => FavoriteCreateWithoutUserInputSchema),z.lazy(() => FavoriteCreateWithoutUserInputSchema).array(),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FavoriteCreateOrConnectWithoutUserInputSchema),z.lazy(() => FavoriteCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FavoriteCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => SavedSearchCreateWithoutUserInputSchema),z.lazy(() => SavedSearchCreateWithoutUserInputSchema).array(),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SavedSearchCreateOrConnectWithoutUserInputSchema),z.lazy(() => SavedSearchCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SavedSearchCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageUncheckedCreateNestedManyWithoutSenderInputSchema: z.ZodType<Prisma.MessageUncheckedCreateNestedManyWithoutSenderInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutSenderInputSchema),z.lazy(() => MessageCreateWithoutSenderInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutSenderInputSchema),z.lazy(() => MessageCreateOrConnectWithoutSenderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManySenderInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageUncheckedCreateNestedManyWithoutReceiverInputSchema: z.ZodType<Prisma.MessageUncheckedCreateNestedManyWithoutReceiverInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutReceiverInputSchema),z.lazy(() => MessageCreateWithoutReceiverInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutReceiverInputSchema),z.lazy(() => MessageCreateOrConnectWithoutReceiverInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyReceiverInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => UserNotificationCreateWithoutUserInputSchema),z.lazy(() => UserNotificationCreateWithoutUserInputSchema).array(),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserNotificationCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserNotificationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserNotificationCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportUncheckedCreateNestedManyWithoutReporterInputSchema: z.ZodType<Prisma.ReportUncheckedCreateNestedManyWithoutReporterInput> = z.object({
  create: z.union([ z.lazy(() => ReportCreateWithoutReporterInputSchema),z.lazy(() => ReportCreateWithoutReporterInputSchema).array(),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportCreateOrConnectWithoutReporterInputSchema),z.lazy(() => ReportCreateOrConnectWithoutReporterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportCreateManyReporterInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogCreateWithoutUserInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const SessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.AdUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutCreatorInputSchema),z.lazy(() => AdCreateWithoutCreatorInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => AdCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => AdUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => AdUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => AdUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdScalarWhereInputSchema),z.lazy(() => AdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MediaUpdateManyWithoutUploaderNestedInputSchema: z.ZodType<Prisma.MediaUpdateManyWithoutUploaderNestedInput> = z.object({
  create: z.union([ z.lazy(() => MediaCreateWithoutUploaderInputSchema),z.lazy(() => MediaCreateWithoutUploaderInputSchema).array(),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MediaCreateOrConnectWithoutUploaderInputSchema),z.lazy(() => MediaCreateOrConnectWithoutUploaderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MediaUpsertWithWhereUniqueWithoutUploaderInputSchema),z.lazy(() => MediaUpsertWithWhereUniqueWithoutUploaderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MediaCreateManyUploaderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MediaUpdateWithWhereUniqueWithoutUploaderInputSchema),z.lazy(() => MediaUpdateWithWhereUniqueWithoutUploaderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MediaUpdateManyWithWhereWithoutUploaderInputSchema),z.lazy(() => MediaUpdateManyWithWhereWithoutUploaderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MediaScalarWhereInputSchema),z.lazy(() => MediaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PaymentUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PaymentUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutUserInputSchema),z.lazy(() => PaymentCreateWithoutUserInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutUserInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PaymentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PaymentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PaymentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PaymentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PaymentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PaymentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FavoriteUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FavoriteUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FavoriteCreateWithoutUserInputSchema),z.lazy(() => FavoriteCreateWithoutUserInputSchema).array(),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FavoriteCreateOrConnectWithoutUserInputSchema),z.lazy(() => FavoriteCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FavoriteUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FavoriteUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FavoriteCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FavoriteUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FavoriteUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FavoriteUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FavoriteUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FavoriteScalarWhereInputSchema),z.lazy(() => FavoriteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SavedSearchUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SavedSearchUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SavedSearchCreateWithoutUserInputSchema),z.lazy(() => SavedSearchCreateWithoutUserInputSchema).array(),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SavedSearchCreateOrConnectWithoutUserInputSchema),z.lazy(() => SavedSearchCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SavedSearchUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SavedSearchUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SavedSearchCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SavedSearchUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SavedSearchUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SavedSearchUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SavedSearchUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SavedSearchScalarWhereInputSchema),z.lazy(() => SavedSearchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageUpdateManyWithoutSenderNestedInputSchema: z.ZodType<Prisma.MessageUpdateManyWithoutSenderNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutSenderInputSchema),z.lazy(() => MessageCreateWithoutSenderInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutSenderInputSchema),z.lazy(() => MessageCreateOrConnectWithoutSenderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageUpsertWithWhereUniqueWithoutSenderInputSchema),z.lazy(() => MessageUpsertWithWhereUniqueWithoutSenderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManySenderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageUpdateWithWhereUniqueWithoutSenderInputSchema),z.lazy(() => MessageUpdateWithWhereUniqueWithoutSenderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageUpdateManyWithWhereWithoutSenderInputSchema),z.lazy(() => MessageUpdateManyWithWhereWithoutSenderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageUpdateManyWithoutReceiverNestedInputSchema: z.ZodType<Prisma.MessageUpdateManyWithoutReceiverNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutReceiverInputSchema),z.lazy(() => MessageCreateWithoutReceiverInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutReceiverInputSchema),z.lazy(() => MessageCreateOrConnectWithoutReceiverInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageUpsertWithWhereUniqueWithoutReceiverInputSchema),z.lazy(() => MessageUpsertWithWhereUniqueWithoutReceiverInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyReceiverInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageUpdateWithWhereUniqueWithoutReceiverInputSchema),z.lazy(() => MessageUpdateWithWhereUniqueWithoutReceiverInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageUpdateManyWithWhereWithoutReceiverInputSchema),z.lazy(() => MessageUpdateManyWithWhereWithoutReceiverInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserNotificationUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserNotificationUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserNotificationCreateWithoutUserInputSchema),z.lazy(() => UserNotificationCreateWithoutUserInputSchema).array(),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserNotificationCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserNotificationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserNotificationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserNotificationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserNotificationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserNotificationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserNotificationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserNotificationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserNotificationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserNotificationScalarWhereInputSchema),z.lazy(() => UserNotificationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportUpdateManyWithoutReporterNestedInputSchema: z.ZodType<Prisma.ReportUpdateManyWithoutReporterNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportCreateWithoutReporterInputSchema),z.lazy(() => ReportCreateWithoutReporterInputSchema).array(),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportCreateOrConnectWithoutReporterInputSchema),z.lazy(() => ReportCreateOrConnectWithoutReporterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportUpsertWithWhereUniqueWithoutReporterInputSchema),z.lazy(() => ReportUpsertWithWhereUniqueWithoutReporterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportCreateManyReporterInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportUpdateWithWhereUniqueWithoutReporterInputSchema),z.lazy(() => ReportUpdateWithWhereUniqueWithoutReporterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportUpdateManyWithWhereWithoutReporterInputSchema),z.lazy(() => ReportUpdateManyWithWhereWithoutReporterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportScalarWhereInputSchema),z.lazy(() => ReportScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogCreateWithoutUserInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionCreateWithoutUserInputSchema).array(),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => SessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionWhereUniqueInputSchema),z.lazy(() => SessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberCreateWithoutUserInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema),z.lazy(() => MemberCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationCreateWithoutUserInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorCreateWithoutUserInputSchema).array(),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema),z.lazy(() => TwoFactorCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TwoFactorCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TwoFactorWhereUniqueInputSchema),z.lazy(() => TwoFactorWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => TwoFactorUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdUncheckedUpdateManyWithoutCreatorNestedInputSchema: z.ZodType<Prisma.AdUncheckedUpdateManyWithoutCreatorNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutCreatorInputSchema),z.lazy(() => AdCreateWithoutCreatorInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutCreatorInputSchema),z.lazy(() => AdCreateOrConnectWithoutCreatorInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdUpsertWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => AdUpsertWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyCreatorInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdUpdateWithWhereUniqueWithoutCreatorInputSchema),z.lazy(() => AdUpdateWithWhereUniqueWithoutCreatorInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdUpdateManyWithWhereWithoutCreatorInputSchema),z.lazy(() => AdUpdateManyWithWhereWithoutCreatorInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdScalarWhereInputSchema),z.lazy(() => AdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema: z.ZodType<Prisma.MediaUncheckedUpdateManyWithoutUploaderNestedInput> = z.object({
  create: z.union([ z.lazy(() => MediaCreateWithoutUploaderInputSchema),z.lazy(() => MediaCreateWithoutUploaderInputSchema).array(),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MediaCreateOrConnectWithoutUploaderInputSchema),z.lazy(() => MediaCreateOrConnectWithoutUploaderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MediaUpsertWithWhereUniqueWithoutUploaderInputSchema),z.lazy(() => MediaUpsertWithWhereUniqueWithoutUploaderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MediaCreateManyUploaderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MediaWhereUniqueInputSchema),z.lazy(() => MediaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MediaUpdateWithWhereUniqueWithoutUploaderInputSchema),z.lazy(() => MediaUpdateWithWhereUniqueWithoutUploaderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MediaUpdateManyWithWhereWithoutUploaderInputSchema),z.lazy(() => MediaUpdateManyWithWhereWithoutUploaderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MediaScalarWhereInputSchema),z.lazy(() => MediaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PaymentUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutUserInputSchema),z.lazy(() => PaymentCreateWithoutUserInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutUserInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PaymentUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PaymentUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PaymentUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => PaymentUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PaymentUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => PaymentUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.FavoriteUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FavoriteCreateWithoutUserInputSchema),z.lazy(() => FavoriteCreateWithoutUserInputSchema).array(),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FavoriteCreateOrConnectWithoutUserInputSchema),z.lazy(() => FavoriteCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FavoriteUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FavoriteUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FavoriteCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FavoriteUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => FavoriteUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FavoriteUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => FavoriteUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FavoriteScalarWhereInputSchema),z.lazy(() => FavoriteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.SavedSearchUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => SavedSearchCreateWithoutUserInputSchema),z.lazy(() => SavedSearchCreateWithoutUserInputSchema).array(),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SavedSearchCreateOrConnectWithoutUserInputSchema),z.lazy(() => SavedSearchCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SavedSearchUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SavedSearchUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SavedSearchCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SavedSearchWhereUniqueInputSchema),z.lazy(() => SavedSearchWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SavedSearchUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => SavedSearchUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SavedSearchUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => SavedSearchUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SavedSearchScalarWhereInputSchema),z.lazy(() => SavedSearchScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyWithoutSenderNestedInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyWithoutSenderNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutSenderInputSchema),z.lazy(() => MessageCreateWithoutSenderInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutSenderInputSchema),z.lazy(() => MessageCreateOrConnectWithoutSenderInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageUpsertWithWhereUniqueWithoutSenderInputSchema),z.lazy(() => MessageUpsertWithWhereUniqueWithoutSenderInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManySenderInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageUpdateWithWhereUniqueWithoutSenderInputSchema),z.lazy(() => MessageUpdateWithWhereUniqueWithoutSenderInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageUpdateManyWithWhereWithoutSenderInputSchema),z.lazy(() => MessageUpdateManyWithWhereWithoutSenderInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyWithoutReceiverNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutReceiverInputSchema),z.lazy(() => MessageCreateWithoutReceiverInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutReceiverInputSchema),z.lazy(() => MessageCreateOrConnectWithoutReceiverInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageUpsertWithWhereUniqueWithoutReceiverInputSchema),z.lazy(() => MessageUpsertWithWhereUniqueWithoutReceiverInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyReceiverInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageUpdateWithWhereUniqueWithoutReceiverInputSchema),z.lazy(() => MessageUpdateWithWhereUniqueWithoutReceiverInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageUpdateManyWithWhereWithoutReceiverInputSchema),z.lazy(() => MessageUpdateManyWithWhereWithoutReceiverInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.UserNotificationUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserNotificationCreateWithoutUserInputSchema),z.lazy(() => UserNotificationCreateWithoutUserInputSchema).array(),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserNotificationCreateOrConnectWithoutUserInputSchema),z.lazy(() => UserNotificationCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserNotificationUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserNotificationUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserNotificationCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserNotificationWhereUniqueInputSchema),z.lazy(() => UserNotificationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserNotificationUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => UserNotificationUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserNotificationUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => UserNotificationUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserNotificationScalarWhereInputSchema),z.lazy(() => UserNotificationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportUncheckedUpdateManyWithoutReporterNestedInputSchema: z.ZodType<Prisma.ReportUncheckedUpdateManyWithoutReporterNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportCreateWithoutReporterInputSchema),z.lazy(() => ReportCreateWithoutReporterInputSchema).array(),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportCreateOrConnectWithoutReporterInputSchema),z.lazy(() => ReportCreateOrConnectWithoutReporterInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportUpsertWithWhereUniqueWithoutReporterInputSchema),z.lazy(() => ReportUpsertWithWhereUniqueWithoutReporterInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportCreateManyReporterInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportUpdateWithWhereUniqueWithoutReporterInputSchema),z.lazy(() => ReportUpdateWithWhereUniqueWithoutReporterInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportUpdateManyWithWhereWithoutReporterInputSchema),z.lazy(() => ReportUpdateManyWithWhereWithoutReporterInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportScalarWhereInputSchema),z.lazy(() => ReportScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogCreateWithoutUserInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const MemberCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdCreateNestedManyWithoutOrgInputSchema: z.ZodType<Prisma.AdCreateNestedManyWithoutOrgInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutOrgInputSchema),z.lazy(() => AdCreateWithoutOrgInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutOrgInputSchema),z.lazy(() => AdCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyOrgInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogCreateNestedManyWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogCreateNestedManyWithoutOrgInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutOrgInputSchema),z.lazy(() => AuditLogCreateWithoutOrgInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutOrgInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyOrgInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdUncheckedCreateNestedManyWithoutOrgInputSchema: z.ZodType<Prisma.AdUncheckedCreateNestedManyWithoutOrgInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutOrgInputSchema),z.lazy(() => AdCreateWithoutOrgInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutOrgInputSchema),z.lazy(() => AdCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyOrgInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedCreateNestedManyWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateNestedManyWithoutOrgInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutOrgInputSchema),z.lazy(() => AuditLogCreateWithoutOrgInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutOrgInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyOrgInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MemberUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdUpdateManyWithoutOrgNestedInputSchema: z.ZodType<Prisma.AdUpdateManyWithoutOrgNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutOrgInputSchema),z.lazy(() => AdCreateWithoutOrgInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutOrgInputSchema),z.lazy(() => AdCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdUpsertWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => AdUpsertWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyOrgInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdUpdateWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => AdUpdateWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdUpdateManyWithWhereWithoutOrgInputSchema),z.lazy(() => AdUpdateManyWithWhereWithoutOrgInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdScalarWhereInputSchema),z.lazy(() => AdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUpdateManyWithoutOrgNestedInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithoutOrgNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutOrgInputSchema),z.lazy(() => AuditLogCreateWithoutOrgInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutOrgInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyOrgInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutOrgInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutOrgInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberCreateWithoutOrganizationInputSchema).array(),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => MemberCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MemberCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MemberWhereUniqueInputSchema),z.lazy(() => MemberWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => MemberUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateWithoutOrganizationInputSchema).array(),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => InvitationCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InvitationCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InvitationWhereUniqueInputSchema),z.lazy(() => InvitationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => InvitationUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdUncheckedUpdateManyWithoutOrgNestedInputSchema: z.ZodType<Prisma.AdUncheckedUpdateManyWithoutOrgNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutOrgInputSchema),z.lazy(() => AdCreateWithoutOrgInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutOrgInputSchema),z.lazy(() => AdCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdUpsertWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => AdUpsertWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyOrgInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdUpdateWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => AdUpdateWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdUpdateManyWithWhereWithoutOrgInputSchema),z.lazy(() => AdUpdateManyWithWhereWithoutOrgInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdScalarWhereInputSchema),z.lazy(() => AdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutOrgNestedInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutOrgNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuditLogCreateWithoutOrgInputSchema),z.lazy(() => AuditLogCreateWithoutOrgInputSchema).array(),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuditLogCreateOrConnectWithoutOrgInputSchema),z.lazy(() => AuditLogCreateOrConnectWithoutOrgInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => AuditLogUpsertWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuditLogCreateManyOrgInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuditLogWhereUniqueInputSchema),z.lazy(() => AuditLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutOrgInputSchema),z.lazy(() => AuditLogUpdateWithWhereUniqueWithoutOrgInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuditLogUpdateManyWithWhereWithoutOrgInputSchema),z.lazy(() => AuditLogUpdateManyWithWhereWithoutOrgInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutMembersInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutMembersInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutMembersInputSchema),z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutMembersNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutMembersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMembersInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMembersInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutMembersInputSchema),z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInvitationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutInvitationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInvitationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInvitationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInvitationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInvitationsInputSchema),z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutTwofactorsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutTwofactorsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutTwofactorsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutTwofactorsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutTwofactorsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutTwofactorsInputSchema),z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]).optional(),
}).strict();

export const AdCreatetagsInputSchema: z.ZodType<Prisma.AdCreatetagsInput> = z.object({
  set: z.string().array()
}).strict();

export const OrganizationCreateNestedOneWithoutAdsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutAdsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAdsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAdsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAdsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutAdsCreatedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAdsCreatedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAdsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutAdsCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAdsCreatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const CategoryCreateNestedOneWithoutAdsInputSchema: z.ZodType<Prisma.CategoryCreateNestedOneWithoutAdsInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutAdsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutAdsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutAdsInputSchema).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional()
}).strict();

export const AdAnalyticsCreateNestedOneWithoutAdInputSchema: z.ZodType<Prisma.AdAnalyticsCreateNestedOneWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => AdAnalyticsCreateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedCreateWithoutAdInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdAnalyticsCreateOrConnectWithoutAdInputSchema).optional(),
  connect: z.lazy(() => AdAnalyticsWhereUniqueInputSchema).optional()
}).strict();

export const PaymentCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.PaymentCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutAdInputSchema),z.lazy(() => PaymentCreateWithoutAdInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutAdInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FavoriteCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.FavoriteCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => FavoriteCreateWithoutAdInputSchema),z.lazy(() => FavoriteCreateWithoutAdInputSchema).array(),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FavoriteCreateOrConnectWithoutAdInputSchema),z.lazy(() => FavoriteCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FavoriteCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.ReportCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => ReportCreateWithoutAdInputSchema),z.lazy(() => ReportCreateWithoutAdInputSchema).array(),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportCreateOrConnectWithoutAdInputSchema),z.lazy(() => ReportCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdRevisionCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => AdRevisionCreateWithoutAdInputSchema),z.lazy(() => AdRevisionCreateWithoutAdInputSchema).array(),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdRevisionCreateOrConnectWithoutAdInputSchema),z.lazy(() => AdRevisionCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdRevisionCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GeoHeatmapCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema).array(),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GeoHeatmapCreateOrConnectWithoutAdInputSchema),z.lazy(() => GeoHeatmapCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GeoHeatmapCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShareEventCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.ShareEventCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => ShareEventCreateWithoutAdInputSchema),z.lazy(() => ShareEventCreateWithoutAdInputSchema).array(),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShareEventCreateOrConnectWithoutAdInputSchema),z.lazy(() => ShareEventCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShareEventCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdMediaCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.AdMediaCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => AdMediaCreateWithoutAdInputSchema),z.lazy(() => AdMediaCreateWithoutAdInputSchema).array(),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdMediaCreateOrConnectWithoutAdInputSchema),z.lazy(() => AdMediaCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdMediaCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema: z.ZodType<Prisma.AdAnalyticsUncheckedCreateNestedOneWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => AdAnalyticsCreateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedCreateWithoutAdInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdAnalyticsCreateOrConnectWithoutAdInputSchema).optional(),
  connect: z.lazy(() => AdAnalyticsWhereUniqueInputSchema).optional()
}).strict();

export const PaymentUncheckedCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.PaymentUncheckedCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutAdInputSchema),z.lazy(() => PaymentCreateWithoutAdInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutAdInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FavoriteUncheckedCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.FavoriteUncheckedCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => FavoriteCreateWithoutAdInputSchema),z.lazy(() => FavoriteCreateWithoutAdInputSchema).array(),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FavoriteCreateOrConnectWithoutAdInputSchema),z.lazy(() => FavoriteCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FavoriteCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ReportUncheckedCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.ReportUncheckedCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => ReportCreateWithoutAdInputSchema),z.lazy(() => ReportCreateWithoutAdInputSchema).array(),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportCreateOrConnectWithoutAdInputSchema),z.lazy(() => ReportCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionUncheckedCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => AdRevisionCreateWithoutAdInputSchema),z.lazy(() => AdRevisionCreateWithoutAdInputSchema).array(),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdRevisionCreateOrConnectWithoutAdInputSchema),z.lazy(() => AdRevisionCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdRevisionCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapUncheckedCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema).array(),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GeoHeatmapCreateOrConnectWithoutAdInputSchema),z.lazy(() => GeoHeatmapCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GeoHeatmapCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ShareEventUncheckedCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.ShareEventUncheckedCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => ShareEventCreateWithoutAdInputSchema),z.lazy(() => ShareEventCreateWithoutAdInputSchema).array(),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShareEventCreateOrConnectWithoutAdInputSchema),z.lazy(() => ShareEventCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShareEventCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdMediaUncheckedCreateNestedManyWithoutAdInputSchema: z.ZodType<Prisma.AdMediaUncheckedCreateNestedManyWithoutAdInput> = z.object({
  create: z.union([ z.lazy(() => AdMediaCreateWithoutAdInputSchema),z.lazy(() => AdMediaCreateWithoutAdInputSchema).array(),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdMediaCreateOrConnectWithoutAdInputSchema),z.lazy(() => AdMediaCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdMediaCreateManyAdInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumAdTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumAdTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => AdTypeSchema).optional()
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional(),
  unset: z.boolean().optional()
}).strict();

export const EnumAdStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumAdStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => AdStatusSchema).optional()
}).strict();

export const AdUpdatetagsInputSchema: z.ZodType<Prisma.AdUpdatetagsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const NullableEnumFuelTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumFuelTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => FuelTypeSchema).optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const NullableEnumTransmissionFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumTransmissionFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => TransmissionSchema).optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const NullableEnumBodyTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumBodyTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => BodyTypeSchema).optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const NullableEnumBikeTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumBikeTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => BikeTypeSchema).optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  unset: z.boolean().optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutAdsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAdsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAdsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAdsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutAdsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutAdsInputSchema),z.lazy(() => OrganizationUpdateWithoutAdsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAdsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAdsCreatedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAdsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutAdsCreatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAdsCreatedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAdsCreatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAdsCreatedInputSchema),z.lazy(() => UserUpdateWithoutAdsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAdsCreatedInputSchema) ]).optional(),
}).strict();

export const CategoryUpdateOneWithoutAdsNestedInputSchema: z.ZodType<Prisma.CategoryUpdateOneWithoutAdsNestedInput> = z.object({
  create: z.union([ z.lazy(() => CategoryCreateWithoutAdsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutAdsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CategoryCreateOrConnectWithoutAdsInputSchema).optional(),
  upsert: z.lazy(() => CategoryUpsertWithoutAdsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.union([ z.boolean(),z.lazy(() => CategoryWhereInputSchema) ]).optional(),
  connect: z.lazy(() => CategoryWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CategoryUpdateToOneWithWhereWithoutAdsInputSchema),z.lazy(() => CategoryUpdateWithoutAdsInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutAdsInputSchema) ]).optional(),
}).strict();

export const AdAnalyticsUpdateOneWithoutAdNestedInputSchema: z.ZodType<Prisma.AdAnalyticsUpdateOneWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdAnalyticsCreateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedCreateWithoutAdInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdAnalyticsCreateOrConnectWithoutAdInputSchema).optional(),
  upsert: z.lazy(() => AdAnalyticsUpsertWithoutAdInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AdAnalyticsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AdAnalyticsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AdAnalyticsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdAnalyticsUpdateToOneWithWhereWithoutAdInputSchema),z.lazy(() => AdAnalyticsUpdateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedUpdateWithoutAdInputSchema) ]).optional(),
}).strict();

export const PaymentUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.PaymentUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutAdInputSchema),z.lazy(() => PaymentCreateWithoutAdInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutAdInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PaymentUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => PaymentUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PaymentUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => PaymentUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PaymentUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => PaymentUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FavoriteUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.FavoriteUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => FavoriteCreateWithoutAdInputSchema),z.lazy(() => FavoriteCreateWithoutAdInputSchema).array(),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FavoriteCreateOrConnectWithoutAdInputSchema),z.lazy(() => FavoriteCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FavoriteUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => FavoriteUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FavoriteCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FavoriteUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => FavoriteUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FavoriteUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => FavoriteUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FavoriteScalarWhereInputSchema),z.lazy(() => FavoriteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.ReportUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportCreateWithoutAdInputSchema),z.lazy(() => ReportCreateWithoutAdInputSchema).array(),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportCreateOrConnectWithoutAdInputSchema),z.lazy(() => ReportCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => ReportUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => ReportUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => ReportUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportScalarWhereInputSchema),z.lazy(() => ReportScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdRevisionUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.AdRevisionUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdRevisionCreateWithoutAdInputSchema),z.lazy(() => AdRevisionCreateWithoutAdInputSchema).array(),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdRevisionCreateOrConnectWithoutAdInputSchema),z.lazy(() => AdRevisionCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdRevisionUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => AdRevisionUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdRevisionCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdRevisionUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => AdRevisionUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdRevisionUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => AdRevisionUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdRevisionScalarWhereInputSchema),z.lazy(() => AdRevisionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GeoHeatmapUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.GeoHeatmapUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema).array(),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GeoHeatmapCreateOrConnectWithoutAdInputSchema),z.lazy(() => GeoHeatmapCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GeoHeatmapUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => GeoHeatmapUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GeoHeatmapCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GeoHeatmapUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => GeoHeatmapUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GeoHeatmapUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => GeoHeatmapUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GeoHeatmapScalarWhereInputSchema),z.lazy(() => GeoHeatmapScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ShareEventUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.ShareEventUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShareEventCreateWithoutAdInputSchema),z.lazy(() => ShareEventCreateWithoutAdInputSchema).array(),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShareEventCreateOrConnectWithoutAdInputSchema),z.lazy(() => ShareEventCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShareEventUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => ShareEventUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShareEventCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShareEventUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => ShareEventUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShareEventUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => ShareEventUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShareEventScalarWhereInputSchema),z.lazy(() => ShareEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdMediaUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.AdMediaUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdMediaCreateWithoutAdInputSchema),z.lazy(() => AdMediaCreateWithoutAdInputSchema).array(),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdMediaCreateOrConnectWithoutAdInputSchema),z.lazy(() => AdMediaCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdMediaUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => AdMediaUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdMediaCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdMediaUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => AdMediaUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdMediaUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => AdMediaUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdMediaScalarWhereInputSchema),z.lazy(() => AdMediaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema: z.ZodType<Prisma.AdAnalyticsUncheckedUpdateOneWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdAnalyticsCreateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedCreateWithoutAdInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdAnalyticsCreateOrConnectWithoutAdInputSchema).optional(),
  upsert: z.lazy(() => AdAnalyticsUpsertWithoutAdInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => AdAnalyticsWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => AdAnalyticsWhereInputSchema) ]).optional(),
  connect: z.lazy(() => AdAnalyticsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdAnalyticsUpdateToOneWithWhereWithoutAdInputSchema),z.lazy(() => AdAnalyticsUpdateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedUpdateWithoutAdInputSchema) ]).optional(),
}).strict();

export const PaymentUncheckedUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => PaymentCreateWithoutAdInputSchema),z.lazy(() => PaymentCreateWithoutAdInputSchema).array(),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PaymentCreateOrConnectWithoutAdInputSchema),z.lazy(() => PaymentCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PaymentUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => PaymentUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PaymentCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PaymentWhereUniqueInputSchema),z.lazy(() => PaymentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PaymentUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => PaymentUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PaymentUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => PaymentUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.FavoriteUncheckedUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => FavoriteCreateWithoutAdInputSchema),z.lazy(() => FavoriteCreateWithoutAdInputSchema).array(),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FavoriteCreateOrConnectWithoutAdInputSchema),z.lazy(() => FavoriteCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FavoriteUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => FavoriteUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FavoriteCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FavoriteWhereUniqueInputSchema),z.lazy(() => FavoriteWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FavoriteUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => FavoriteUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FavoriteUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => FavoriteUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FavoriteScalarWhereInputSchema),z.lazy(() => FavoriteScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ReportUncheckedUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.ReportUncheckedUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => ReportCreateWithoutAdInputSchema),z.lazy(() => ReportCreateWithoutAdInputSchema).array(),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ReportCreateOrConnectWithoutAdInputSchema),z.lazy(() => ReportCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ReportUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => ReportUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ReportCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ReportWhereUniqueInputSchema),z.lazy(() => ReportWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ReportUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => ReportUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ReportUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => ReportUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ReportScalarWhereInputSchema),z.lazy(() => ReportScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.AdRevisionUncheckedUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdRevisionCreateWithoutAdInputSchema),z.lazy(() => AdRevisionCreateWithoutAdInputSchema).array(),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdRevisionCreateOrConnectWithoutAdInputSchema),z.lazy(() => AdRevisionCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdRevisionUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => AdRevisionUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdRevisionCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdRevisionWhereUniqueInputSchema),z.lazy(() => AdRevisionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdRevisionUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => AdRevisionUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdRevisionUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => AdRevisionUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdRevisionScalarWhereInputSchema),z.lazy(() => AdRevisionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.GeoHeatmapUncheckedUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema).array(),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GeoHeatmapCreateOrConnectWithoutAdInputSchema),z.lazy(() => GeoHeatmapCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GeoHeatmapUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => GeoHeatmapUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GeoHeatmapCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GeoHeatmapWhereUniqueInputSchema),z.lazy(() => GeoHeatmapWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GeoHeatmapUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => GeoHeatmapUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GeoHeatmapUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => GeoHeatmapUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GeoHeatmapScalarWhereInputSchema),z.lazy(() => GeoHeatmapScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.ShareEventUncheckedUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => ShareEventCreateWithoutAdInputSchema),z.lazy(() => ShareEventCreateWithoutAdInputSchema).array(),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ShareEventCreateOrConnectWithoutAdInputSchema),z.lazy(() => ShareEventCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ShareEventUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => ShareEventUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ShareEventCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ShareEventWhereUniqueInputSchema),z.lazy(() => ShareEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ShareEventUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => ShareEventUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ShareEventUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => ShareEventUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ShareEventScalarWhereInputSchema),z.lazy(() => ShareEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema: z.ZodType<Prisma.AdMediaUncheckedUpdateManyWithoutAdNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdMediaCreateWithoutAdInputSchema),z.lazy(() => AdMediaCreateWithoutAdInputSchema).array(),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdMediaCreateOrConnectWithoutAdInputSchema),z.lazy(() => AdMediaCreateOrConnectWithoutAdInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdMediaUpsertWithWhereUniqueWithoutAdInputSchema),z.lazy(() => AdMediaUpsertWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdMediaCreateManyAdInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdMediaUpdateWithWhereUniqueWithoutAdInputSchema),z.lazy(() => AdMediaUpdateWithWhereUniqueWithoutAdInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdMediaUpdateManyWithWhereWithoutAdInputSchema),z.lazy(() => AdMediaUpdateManyWithWhereWithoutAdInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdMediaScalarWhereInputSchema),z.lazy(() => AdMediaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdCreateNestedOneWithoutRevisionsInputSchema: z.ZodType<Prisma.AdCreateNestedOneWithoutRevisionsInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutRevisionsInputSchema),z.lazy(() => AdUncheckedCreateWithoutRevisionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutRevisionsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const AdUpdateOneRequiredWithoutRevisionsNestedInputSchema: z.ZodType<Prisma.AdUpdateOneRequiredWithoutRevisionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutRevisionsInputSchema),z.lazy(() => AdUncheckedCreateWithoutRevisionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutRevisionsInputSchema).optional(),
  upsert: z.lazy(() => AdUpsertWithoutRevisionsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdUpdateToOneWithWhereWithoutRevisionsInputSchema),z.lazy(() => AdUpdateWithoutRevisionsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutRevisionsInputSchema) ]).optional(),
}).strict();

export const AdCreateNestedOneWithoutAnalyticsInputSchema: z.ZodType<Prisma.AdCreateNestedOneWithoutAnalyticsInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutAnalyticsInputSchema),z.lazy(() => AdUncheckedCreateWithoutAnalyticsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutAnalyticsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional()
}).strict();

export const AdUpdateOneRequiredWithoutAnalyticsNestedInputSchema: z.ZodType<Prisma.AdUpdateOneRequiredWithoutAnalyticsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutAnalyticsInputSchema),z.lazy(() => AdUncheckedCreateWithoutAnalyticsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutAnalyticsInputSchema).optional(),
  upsert: z.lazy(() => AdUpsertWithoutAnalyticsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdUpdateToOneWithWhereWithoutAnalyticsInputSchema),z.lazy(() => AdUpdateWithoutAnalyticsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutAnalyticsInputSchema) ]).optional(),
}).strict();

export const AdCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.AdCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutCategoryInputSchema),z.lazy(() => AdCreateWithoutCategoryInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => AdCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdUncheckedCreateNestedManyWithoutCategoryInputSchema: z.ZodType<Prisma.AdUncheckedCreateNestedManyWithoutCategoryInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutCategoryInputSchema),z.lazy(() => AdCreateWithoutCategoryInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => AdCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyCategoryInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.AdUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutCategoryInputSchema),z.lazy(() => AdCreateWithoutCategoryInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => AdCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => AdUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => AdUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => AdUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdScalarWhereInputSchema),z.lazy(() => AdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdUncheckedUpdateManyWithoutCategoryNestedInputSchema: z.ZodType<Prisma.AdUncheckedUpdateManyWithoutCategoryNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutCategoryInputSchema),z.lazy(() => AdCreateWithoutCategoryInputSchema).array(),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdCreateOrConnectWithoutCategoryInputSchema),z.lazy(() => AdCreateOrConnectWithoutCategoryInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdUpsertWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => AdUpsertWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdCreateManyCategoryInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdWhereUniqueInputSchema),z.lazy(() => AdWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdUpdateWithWhereUniqueWithoutCategoryInputSchema),z.lazy(() => AdUpdateWithWhereUniqueWithoutCategoryInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdUpdateManyWithWhereWithoutCategoryInputSchema),z.lazy(() => AdUpdateManyWithWhereWithoutCategoryInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdScalarWhereInputSchema),z.lazy(() => AdScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutMediaUploadedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutMediaUploadedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMediaUploadedInputSchema),z.lazy(() => UserUncheckedCreateWithoutMediaUploadedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMediaUploadedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const AdMediaCreateNestedManyWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaCreateNestedManyWithoutMediaInput> = z.object({
  create: z.union([ z.lazy(() => AdMediaCreateWithoutMediaInputSchema),z.lazy(() => AdMediaCreateWithoutMediaInputSchema).array(),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdMediaCreateOrConnectWithoutMediaInputSchema),z.lazy(() => AdMediaCreateOrConnectWithoutMediaInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdMediaCreateManyMediaInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AdMediaUncheckedCreateNestedManyWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaUncheckedCreateNestedManyWithoutMediaInput> = z.object({
  create: z.union([ z.lazy(() => AdMediaCreateWithoutMediaInputSchema),z.lazy(() => AdMediaCreateWithoutMediaInputSchema).array(),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdMediaCreateOrConnectWithoutMediaInputSchema),z.lazy(() => AdMediaCreateOrConnectWithoutMediaInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdMediaCreateManyMediaInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumMediaTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumMediaTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => MediaTypeSchema).optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional(),
  unset: z.boolean().optional()
}).strict();

export const UserUpdateOneRequiredWithoutMediaUploadedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutMediaUploadedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMediaUploadedInputSchema),z.lazy(() => UserUncheckedCreateWithoutMediaUploadedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMediaUploadedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMediaUploadedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutMediaUploadedInputSchema),z.lazy(() => UserUpdateWithoutMediaUploadedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMediaUploadedInputSchema) ]).optional(),
}).strict();

export const AdMediaUpdateManyWithoutMediaNestedInputSchema: z.ZodType<Prisma.AdMediaUpdateManyWithoutMediaNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdMediaCreateWithoutMediaInputSchema),z.lazy(() => AdMediaCreateWithoutMediaInputSchema).array(),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdMediaCreateOrConnectWithoutMediaInputSchema),z.lazy(() => AdMediaCreateOrConnectWithoutMediaInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdMediaUpsertWithWhereUniqueWithoutMediaInputSchema),z.lazy(() => AdMediaUpsertWithWhereUniqueWithoutMediaInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdMediaCreateManyMediaInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdMediaUpdateWithWhereUniqueWithoutMediaInputSchema),z.lazy(() => AdMediaUpdateWithWhereUniqueWithoutMediaInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdMediaUpdateManyWithWhereWithoutMediaInputSchema),z.lazy(() => AdMediaUpdateManyWithWhereWithoutMediaInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdMediaScalarWhereInputSchema),z.lazy(() => AdMediaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdMediaUncheckedUpdateManyWithoutMediaNestedInputSchema: z.ZodType<Prisma.AdMediaUncheckedUpdateManyWithoutMediaNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdMediaCreateWithoutMediaInputSchema),z.lazy(() => AdMediaCreateWithoutMediaInputSchema).array(),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AdMediaCreateOrConnectWithoutMediaInputSchema),z.lazy(() => AdMediaCreateOrConnectWithoutMediaInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AdMediaUpsertWithWhereUniqueWithoutMediaInputSchema),z.lazy(() => AdMediaUpsertWithWhereUniqueWithoutMediaInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AdMediaCreateManyMediaInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AdMediaWhereUniqueInputSchema),z.lazy(() => AdMediaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AdMediaUpdateWithWhereUniqueWithoutMediaInputSchema),z.lazy(() => AdMediaUpdateWithWhereUniqueWithoutMediaInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AdMediaUpdateManyWithWhereWithoutMediaInputSchema),z.lazy(() => AdMediaUpdateManyWithWhereWithoutMediaInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AdMediaScalarWhereInputSchema),z.lazy(() => AdMediaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AdCreateNestedOneWithoutPaymentsInputSchema: z.ZodType<Prisma.AdCreateNestedOneWithoutPaymentsInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutPaymentsInputSchema),z.lazy(() => AdUncheckedCreateWithoutPaymentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutPaymentsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutPaymentsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPaymentsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPaymentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPaymentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumPaymentTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPaymentTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PaymentTypeSchema).optional()
}).strict();

export const EnumPaymentStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumPaymentStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => PaymentStatusSchema).optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const AdUpdateOneRequiredWithoutPaymentsNestedInputSchema: z.ZodType<Prisma.AdUpdateOneRequiredWithoutPaymentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutPaymentsInputSchema),z.lazy(() => AdUncheckedCreateWithoutPaymentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutPaymentsInputSchema).optional(),
  upsert: z.lazy(() => AdUpsertWithoutPaymentsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdUpdateToOneWithWhereWithoutPaymentsInputSchema),z.lazy(() => AdUpdateWithoutPaymentsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutPaymentsInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutPaymentsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPaymentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPaymentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPaymentsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPaymentsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPaymentsInputSchema),z.lazy(() => UserUpdateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPaymentsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutFavoritesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFavoritesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFavoritesInputSchema),z.lazy(() => UserUncheckedCreateWithoutFavoritesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFavoritesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const AdCreateNestedOneWithoutFavoritesInputSchema: z.ZodType<Prisma.AdCreateNestedOneWithoutFavoritesInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutFavoritesInputSchema),z.lazy(() => AdUncheckedCreateWithoutFavoritesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutFavoritesInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutFavoritesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutFavoritesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFavoritesInputSchema),z.lazy(() => UserUncheckedCreateWithoutFavoritesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFavoritesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFavoritesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFavoritesInputSchema),z.lazy(() => UserUpdateWithoutFavoritesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFavoritesInputSchema) ]).optional(),
}).strict();

export const AdUpdateOneRequiredWithoutFavoritesNestedInputSchema: z.ZodType<Prisma.AdUpdateOneRequiredWithoutFavoritesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutFavoritesInputSchema),z.lazy(() => AdUncheckedCreateWithoutFavoritesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutFavoritesInputSchema).optional(),
  upsert: z.lazy(() => AdUpsertWithoutFavoritesInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdUpdateToOneWithWhereWithoutFavoritesInputSchema),z.lazy(() => AdUpdateWithoutFavoritesInputSchema),z.lazy(() => AdUncheckedUpdateWithoutFavoritesInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSavedSearchesInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSavedSearchesInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSavedSearchesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSavedSearchesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSavedSearchesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSavedSearchesNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSavedSearchesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSavedSearchesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSavedSearchesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSavedSearchesInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSavedSearchesInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSavedSearchesInputSchema),z.lazy(() => UserUpdateWithoutSavedSearchesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSavedSearchesInputSchema) ]).optional(),
}).strict();

export const AdCreateNestedOneWithoutGeoViewsInputSchema: z.ZodType<Prisma.AdCreateNestedOneWithoutGeoViewsInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutGeoViewsInputSchema),z.lazy(() => AdUncheckedCreateWithoutGeoViewsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutGeoViewsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional()
}).strict();

export const AdUpdateOneRequiredWithoutGeoViewsNestedInputSchema: z.ZodType<Prisma.AdUpdateOneRequiredWithoutGeoViewsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutGeoViewsInputSchema),z.lazy(() => AdUncheckedCreateWithoutGeoViewsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutGeoViewsInputSchema).optional(),
  upsert: z.lazy(() => AdUpsertWithoutGeoViewsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdUpdateToOneWithWhereWithoutGeoViewsInputSchema),z.lazy(() => AdUpdateWithoutGeoViewsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutGeoViewsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutMessagesSentInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutMessagesSentInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMessagesSentInputSchema),z.lazy(() => UserUncheckedCreateWithoutMessagesSentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMessagesSentInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutMessagesReceivedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutMessagesReceivedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMessagesReceivedInputSchema),z.lazy(() => UserUncheckedCreateWithoutMessagesReceivedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMessagesReceivedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutMessagesSentNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutMessagesSentNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMessagesSentInputSchema),z.lazy(() => UserUncheckedCreateWithoutMessagesSentInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMessagesSentInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMessagesSentInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutMessagesSentInputSchema),z.lazy(() => UserUpdateWithoutMessagesSentInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMessagesSentInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutMessagesReceivedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutMessagesReceivedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutMessagesReceivedInputSchema),z.lazy(() => UserUncheckedCreateWithoutMessagesReceivedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutMessagesReceivedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutMessagesReceivedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutMessagesReceivedInputSchema),z.lazy(() => UserUpdateWithoutMessagesReceivedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMessagesReceivedInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutNotificationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutNotificationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutNotificationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumNotificationTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumNotificationTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => NotificationTypeSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutNotificationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutNotificationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutNotificationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutNotificationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutNotificationsInputSchema),z.lazy(() => UserUpdateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutNotificationsInputSchema) ]).optional(),
}).strict();

export const AdCreateNestedOneWithoutShareEventsInputSchema: z.ZodType<Prisma.AdCreateNestedOneWithoutShareEventsInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutShareEventsInputSchema),z.lazy(() => AdUncheckedCreateWithoutShareEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutShareEventsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional()
}).strict();

export const EnumSharePlatformFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumSharePlatformFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => SharePlatformSchema).optional()
}).strict();

export const AdUpdateOneRequiredWithoutShareEventsNestedInputSchema: z.ZodType<Prisma.AdUpdateOneRequiredWithoutShareEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutShareEventsInputSchema),z.lazy(() => AdUncheckedCreateWithoutShareEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutShareEventsInputSchema).optional(),
  upsert: z.lazy(() => AdUpsertWithoutShareEventsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdUpdateToOneWithWhereWithoutShareEventsInputSchema),z.lazy(() => AdUpdateWithoutShareEventsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutShareEventsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutReportsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutReportsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutReportsInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReportsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const AdCreateNestedOneWithoutReportsInputSchema: z.ZodType<Prisma.AdCreateNestedOneWithoutReportsInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutReportsInputSchema),z.lazy(() => AdUncheckedCreateWithoutReportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutReportsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutReportsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutReportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutReportsInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutReportsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutReportsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutReportsInputSchema),z.lazy(() => UserUpdateWithoutReportsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReportsInputSchema) ]).optional(),
}).strict();

export const AdUpdateOneRequiredWithoutReportsNestedInputSchema: z.ZodType<Prisma.AdUpdateOneRequiredWithoutReportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutReportsInputSchema),z.lazy(() => AdUncheckedCreateWithoutReportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutReportsInputSchema).optional(),
  upsert: z.lazy(() => AdUpsertWithoutReportsInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdUpdateToOneWithWhereWithoutReportsInputSchema),z.lazy(() => AdUpdateWithoutReportsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutReportsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAuditLogsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutAuditLogsInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutAuditLogsInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAuditLogsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutAuditLogsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutAuditLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAuditLogsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAuditLogsInputSchema),z.lazy(() => UserUpdateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuditLogsInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneWithoutAuditLogsNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneWithoutAuditLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAuditLogsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAuditLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutAuditLogsInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutAuditLogsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.union([ z.boolean(),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutAuditLogsInputSchema),z.lazy(() => OrganizationUpdateWithoutAuditLogsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAuditLogsInputSchema) ]).optional(),
}).strict();

export const AdCreateNestedOneWithoutMediaInputSchema: z.ZodType<Prisma.AdCreateNestedOneWithoutMediaInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutMediaInputSchema),z.lazy(() => AdUncheckedCreateWithoutMediaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutMediaInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional()
}).strict();

export const MediaCreateNestedOneWithoutAdsInputSchema: z.ZodType<Prisma.MediaCreateNestedOneWithoutAdsInput> = z.object({
  create: z.union([ z.lazy(() => MediaCreateWithoutAdsInputSchema),z.lazy(() => MediaUncheckedCreateWithoutAdsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MediaCreateOrConnectWithoutAdsInputSchema).optional(),
  connect: z.lazy(() => MediaWhereUniqueInputSchema).optional()
}).strict();

export const AdUpdateOneRequiredWithoutMediaNestedInputSchema: z.ZodType<Prisma.AdUpdateOneRequiredWithoutMediaNestedInput> = z.object({
  create: z.union([ z.lazy(() => AdCreateWithoutMediaInputSchema),z.lazy(() => AdUncheckedCreateWithoutMediaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AdCreateOrConnectWithoutMediaInputSchema).optional(),
  upsert: z.lazy(() => AdUpsertWithoutMediaInputSchema).optional(),
  connect: z.lazy(() => AdWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AdUpdateToOneWithWhereWithoutMediaInputSchema),z.lazy(() => AdUpdateWithoutMediaInputSchema),z.lazy(() => AdUncheckedUpdateWithoutMediaInputSchema) ]).optional(),
}).strict();

export const MediaUpdateOneRequiredWithoutAdsNestedInputSchema: z.ZodType<Prisma.MediaUpdateOneRequiredWithoutAdsNestedInput> = z.object({
  create: z.union([ z.lazy(() => MediaCreateWithoutAdsInputSchema),z.lazy(() => MediaUncheckedCreateWithoutAdsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MediaCreateOrConnectWithoutAdsInputSchema).optional(),
  upsert: z.lazy(() => MediaUpsertWithoutAdsInputSchema).optional(),
  connect: z.lazy(() => MediaWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MediaUpdateToOneWithWhereWithoutAdsInputSchema),z.lazy(() => MediaUpdateWithoutAdsInputSchema),z.lazy(() => MediaUncheckedUpdateWithoutAdsInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumAdTypeFilterSchema: z.ZodType<Prisma.NestedEnumAdTypeFilter> = z.object({
  equals: z.lazy(() => AdTypeSchema).optional(),
  in: z.lazy(() => AdTypeSchema).array().optional(),
  notIn: z.lazy(() => AdTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => NestedEnumAdTypeFilterSchema) ]).optional(),
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumAdStatusFilterSchema: z.ZodType<Prisma.NestedEnumAdStatusFilter> = z.object({
  equals: z.lazy(() => AdStatusSchema).optional(),
  in: z.lazy(() => AdStatusSchema).array().optional(),
  notIn: z.lazy(() => AdStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => NestedEnumAdStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumFuelTypeNullableFilterSchema: z.ZodType<Prisma.NestedEnumFuelTypeNullableFilter> = z.object({
  equals: z.lazy(() => FuelTypeSchema).optional().nullable(),
  in: z.lazy(() => FuelTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => FuelTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NestedEnumFuelTypeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumTransmissionNullableFilterSchema: z.ZodType<Prisma.NestedEnumTransmissionNullableFilter> = z.object({
  equals: z.lazy(() => TransmissionSchema).optional().nullable(),
  in: z.lazy(() => TransmissionSchema).array().optional().nullable(),
  notIn: z.lazy(() => TransmissionSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NestedEnumTransmissionNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumBodyTypeNullableFilterSchema: z.ZodType<Prisma.NestedEnumBodyTypeNullableFilter> = z.object({
  equals: z.lazy(() => BodyTypeSchema).optional().nullable(),
  in: z.lazy(() => BodyTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => BodyTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NestedEnumBodyTypeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumBikeTypeNullableFilterSchema: z.ZodType<Prisma.NestedEnumBikeTypeNullableFilter> = z.object({
  equals: z.lazy(() => BikeTypeSchema).optional().nullable(),
  in: z.lazy(() => BikeTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => BikeTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NestedEnumBikeTypeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumHeavyDutyVehicleTypeNullableFilterSchema: z.ZodType<Prisma.NestedEnumHeavyDutyVehicleTypeNullableFilter> = z.object({
  equals: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  in: z.lazy(() => HeavyDutyVehicleTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => HeavyDutyVehicleTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NestedEnumHeavyDutyVehicleTypeNullableFilterSchema) ]).optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumAdTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumAdTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AdTypeSchema).optional(),
  in: z.lazy(() => AdTypeSchema).array().optional(),
  notIn: z.lazy(() => AdTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => NestedEnumAdTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAdTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAdTypeFilterSchema).optional()
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumAdStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumAdStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => AdStatusSchema).optional(),
  in: z.lazy(() => AdStatusSchema).array().optional(),
  notIn: z.lazy(() => AdStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => NestedEnumAdStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumAdStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumAdStatusFilterSchema).optional()
}).strict();

export const NestedEnumFuelTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumFuelTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => FuelTypeSchema).optional().nullable(),
  in: z.lazy(() => FuelTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => FuelTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NestedEnumFuelTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumFuelTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumFuelTypeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumTransmissionNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumTransmissionNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => TransmissionSchema).optional().nullable(),
  in: z.lazy(() => TransmissionSchema).array().optional().nullable(),
  notIn: z.lazy(() => TransmissionSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NestedEnumTransmissionNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumTransmissionNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumTransmissionNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumBodyTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumBodyTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => BodyTypeSchema).optional().nullable(),
  in: z.lazy(() => BodyTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => BodyTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NestedEnumBodyTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumBodyTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumBodyTypeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumBikeTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumBikeTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => BikeTypeSchema).optional().nullable(),
  in: z.lazy(() => BikeTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => BikeTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NestedEnumBikeTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumBikeTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumBikeTypeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumHeavyDutyVehicleTypeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumHeavyDutyVehicleTypeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  in: z.lazy(() => HeavyDutyVehicleTypeSchema).array().optional().nullable(),
  notIn: z.lazy(() => HeavyDutyVehicleTypeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NestedEnumHeavyDutyVehicleTypeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumHeavyDutyVehicleTypeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumHeavyDutyVehicleTypeNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional().nullable(),
  not: InputJsonValueSchema.optional().nullable(),
  isSet: z.boolean().optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedEnumMediaTypeFilterSchema: z.ZodType<Prisma.NestedEnumMediaTypeFilter> = z.object({
  equals: z.lazy(() => MediaTypeSchema).optional(),
  in: z.lazy(() => MediaTypeSchema).array().optional(),
  notIn: z.lazy(() => MediaTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => NestedEnumMediaTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumMediaTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumMediaTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => MediaTypeSchema).optional(),
  in: z.lazy(() => MediaTypeSchema).array().optional(),
  notIn: z.lazy(() => MediaTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => NestedEnumMediaTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumMediaTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumMediaTypeFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  isSet: z.boolean().optional()
}).strict();

export const NestedEnumPaymentTypeFilterSchema: z.ZodType<Prisma.NestedEnumPaymentTypeFilter> = z.object({
  equals: z.lazy(() => PaymentTypeSchema).optional(),
  in: z.lazy(() => PaymentTypeSchema).array().optional(),
  notIn: z.lazy(() => PaymentTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => NestedEnumPaymentTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPaymentStatusFilterSchema: z.ZodType<Prisma.NestedEnumPaymentStatusFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumPaymentTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPaymentTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentTypeSchema).optional(),
  in: z.lazy(() => PaymentTypeSchema).array().optional(),
  notIn: z.lazy(() => PaymentTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => NestedEnumPaymentTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentTypeFilterSchema).optional()
}).strict();

export const NestedEnumPaymentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumPaymentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => PaymentStatusSchema).optional(),
  in: z.lazy(() => PaymentStatusSchema).array().optional(),
  notIn: z.lazy(() => PaymentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => NestedEnumPaymentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumPaymentStatusFilterSchema).optional()
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedEnumNotificationTypeFilterSchema: z.ZodType<Prisma.NestedEnumNotificationTypeFilter> = z.object({
  equals: z.lazy(() => NotificationTypeSchema).optional(),
  in: z.lazy(() => NotificationTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => NestedEnumNotificationTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumNotificationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumNotificationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => NotificationTypeSchema).optional(),
  in: z.lazy(() => NotificationTypeSchema).array().optional(),
  notIn: z.lazy(() => NotificationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => NestedEnumNotificationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumNotificationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumNotificationTypeFilterSchema).optional()
}).strict();

export const NestedEnumSharePlatformFilterSchema: z.ZodType<Prisma.NestedEnumSharePlatformFilter> = z.object({
  equals: z.lazy(() => SharePlatformSchema).optional(),
  in: z.lazy(() => SharePlatformSchema).array().optional(),
  notIn: z.lazy(() => SharePlatformSchema).array().optional(),
  not: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => NestedEnumSharePlatformFilterSchema) ]).optional(),
}).strict();

export const NestedEnumSharePlatformWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumSharePlatformWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SharePlatformSchema).optional(),
  in: z.lazy(() => SharePlatformSchema).array().optional(),
  notIn: z.lazy(() => SharePlatformSchema).array().optional(),
  not: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => NestedEnumSharePlatformWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSharePlatformFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSharePlatformFilterSchema).optional()
}).strict();

export const SessionCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateWithoutUserInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable()
}).strict();

export const SessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable()
}).strict();

export const SessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionCreateManyUserInputSchema),z.lazy(() => SessionCreateManyUserInputSchema).array() ]),
}).strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountCreateManyUserInputSchema),z.lazy(() => AccountCreateManyUserInputSchema).array() ]),
}).strict();

export const MemberCreateWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateWithoutUserInput> = z.object({
  id: z.string(),
  role: z.string(),
  createdAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const MemberCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyUserInputSchema),z.lazy(() => MemberCreateManyUserInputSchema).array() ]),
}).strict();

export const InvitationCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateWithoutUserInput> = z.object({
  id: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date()
}).strict();

export const InvitationCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InvitationCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyUserInputSchema),z.lazy(() => InvitationCreateManyUserInputSchema).array() ]),
}).strict();

export const TwoFactorCreateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateWithoutUserInput> = z.object({
  id: z.string(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const TwoFactorUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedCreateWithoutUserInput> = z.object({
  id: z.string(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const TwoFactorCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TwoFactorCreateManyUserInputSchema),z.lazy(() => TwoFactorCreateManyUserInputSchema).array() ]),
}).strict();

export const AdCreateWithoutCreatorInputSchema: z.ZodType<Prisma.AdCreateWithoutCreatorInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutCreatorInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutCreatorInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutCreatorInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutCreatorInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutCreatorInputSchema),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const AdCreateManyCreatorInputEnvelopeSchema: z.ZodType<Prisma.AdCreateManyCreatorInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AdCreateManyCreatorInputSchema),z.lazy(() => AdCreateManyCreatorInputSchema).array() ]),
}).strict();

export const MediaCreateWithoutUploaderInputSchema: z.ZodType<Prisma.MediaCreateWithoutUploaderInput> = z.object({
  id: z.string().optional(),
  url: z.string(),
  type: z.lazy(() => MediaTypeSchema),
  filename: z.string().optional().nullable(),
  size: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  ads: z.lazy(() => AdMediaCreateNestedManyWithoutMediaInputSchema).optional()
}).strict();

export const MediaUncheckedCreateWithoutUploaderInputSchema: z.ZodType<Prisma.MediaUncheckedCreateWithoutUploaderInput> = z.object({
  id: z.string().optional(),
  url: z.string(),
  type: z.lazy(() => MediaTypeSchema),
  filename: z.string().optional().nullable(),
  size: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  ads: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutMediaInputSchema).optional()
}).strict();

export const MediaCreateOrConnectWithoutUploaderInputSchema: z.ZodType<Prisma.MediaCreateOrConnectWithoutUploaderInput> = z.object({
  where: z.lazy(() => MediaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MediaCreateWithoutUploaderInputSchema),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema) ]),
}).strict();

export const MediaCreateManyUploaderInputEnvelopeSchema: z.ZodType<Prisma.MediaCreateManyUploaderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MediaCreateManyUploaderInputSchema),z.lazy(() => MediaCreateManyUploaderInputSchema).array() ]),
}).strict();

export const PaymentCreateWithoutUserInputSchema: z.ZodType<Prisma.PaymentCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => PaymentTypeSchema),
  status: z.lazy(() => PaymentStatusSchema),
  amount: z.number(),
  sessionId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutPaymentsInputSchema)
}).strict();

export const PaymentUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PaymentUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  type: z.lazy(() => PaymentTypeSchema),
  status: z.lazy(() => PaymentStatusSchema),
  amount: z.number(),
  sessionId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const PaymentCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PaymentCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PaymentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PaymentCreateWithoutUserInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PaymentCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.PaymentCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PaymentCreateManyUserInputSchema),z.lazy(() => PaymentCreateManyUserInputSchema).array() ]),
}).strict();

export const FavoriteCreateWithoutUserInputSchema: z.ZodType<Prisma.FavoriteCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutFavoritesInputSchema)
}).strict();

export const FavoriteUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.FavoriteUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  adId: z.string()
}).strict();

export const FavoriteCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.FavoriteCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => FavoriteWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FavoriteCreateWithoutUserInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FavoriteCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.FavoriteCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FavoriteCreateManyUserInputSchema),z.lazy(() => FavoriteCreateManyUserInputSchema).array() ]),
}).strict();

export const SavedSearchCreateWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  filters: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const SavedSearchUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  filters: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const SavedSearchCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => SavedSearchWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SavedSearchCreateWithoutUserInputSchema),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SavedSearchCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.SavedSearchCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SavedSearchCreateManyUserInputSchema),z.lazy(() => SavedSearchCreateManyUserInputSchema).array() ]),
}).strict();

export const MessageCreateWithoutSenderInputSchema: z.ZodType<Prisma.MessageCreateWithoutSenderInput> = z.object({
  id: z.string().optional(),
  content: z.string(),
  read: z.boolean().optional(),
  adId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  receiver: z.lazy(() => UserCreateNestedOneWithoutMessagesReceivedInputSchema)
}).strict();

export const MessageUncheckedCreateWithoutSenderInputSchema: z.ZodType<Prisma.MessageUncheckedCreateWithoutSenderInput> = z.object({
  id: z.string().optional(),
  receiverId: z.string(),
  content: z.string(),
  read: z.boolean().optional(),
  adId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const MessageCreateOrConnectWithoutSenderInputSchema: z.ZodType<Prisma.MessageCreateOrConnectWithoutSenderInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageCreateWithoutSenderInputSchema),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema) ]),
}).strict();

export const MessageCreateManySenderInputEnvelopeSchema: z.ZodType<Prisma.MessageCreateManySenderInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MessageCreateManySenderInputSchema),z.lazy(() => MessageCreateManySenderInputSchema).array() ]),
}).strict();

export const MessageCreateWithoutReceiverInputSchema: z.ZodType<Prisma.MessageCreateWithoutReceiverInput> = z.object({
  id: z.string().optional(),
  content: z.string(),
  read: z.boolean().optional(),
  adId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  sender: z.lazy(() => UserCreateNestedOneWithoutMessagesSentInputSchema)
}).strict();

export const MessageUncheckedCreateWithoutReceiverInputSchema: z.ZodType<Prisma.MessageUncheckedCreateWithoutReceiverInput> = z.object({
  id: z.string().optional(),
  senderId: z.string(),
  content: z.string(),
  read: z.boolean().optional(),
  adId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const MessageCreateOrConnectWithoutReceiverInputSchema: z.ZodType<Prisma.MessageCreateOrConnectWithoutReceiverInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageCreateWithoutReceiverInputSchema),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema) ]),
}).strict();

export const MessageCreateManyReceiverInputEnvelopeSchema: z.ZodType<Prisma.MessageCreateManyReceiverInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MessageCreateManyReceiverInputSchema),z.lazy(() => MessageCreateManyReceiverInputSchema).array() ]),
}).strict();

export const UserNotificationCreateWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => NotificationTypeSchema),
  title: z.string(),
  message: z.string(),
  read: z.boolean().optional(),
  data: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserNotificationUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => NotificationTypeSchema),
  title: z.string(),
  message: z.string(),
  read: z.boolean().optional(),
  data: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserNotificationCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => UserNotificationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserNotificationCreateWithoutUserInputSchema),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserNotificationCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.UserNotificationCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserNotificationCreateManyUserInputSchema),z.lazy(() => UserNotificationCreateManyUserInputSchema).array() ]),
}).strict();

export const ReportCreateWithoutReporterInputSchema: z.ZodType<Prisma.ReportCreateWithoutReporterInput> = z.object({
  id: z.string().optional(),
  reason: z.string(),
  details: z.string().optional().nullable(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutReportsInputSchema)
}).strict();

export const ReportUncheckedCreateWithoutReporterInputSchema: z.ZodType<Prisma.ReportUncheckedCreateWithoutReporterInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  reason: z.string(),
  details: z.string().optional().nullable(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ReportCreateOrConnectWithoutReporterInputSchema: z.ZodType<Prisma.ReportCreateOrConnectWithoutReporterInput> = z.object({
  where: z.lazy(() => ReportWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReportCreateWithoutReporterInputSchema),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema) ]),
}).strict();

export const ReportCreateManyReporterInputEnvelopeSchema: z.ZodType<Prisma.ReportCreateManyReporterInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReportCreateManyReporterInputSchema),z.lazy(() => ReportCreateManyReporterInputSchema).array() ]),
}).strict();

export const AuditLogCreateWithoutUserInputSchema: z.ZodType<Prisma.AuditLogCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  resource: z.string().optional().nullable(),
  resourceId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  orgId: z.string().optional().nullable(),
  action: z.string(),
  resource: z.string().optional().nullable(),
  resourceId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AuditLogCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AuditLogCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AuditLogCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AuditLogCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AuditLogCreateManyUserInputSchema),z.lazy(() => AuditLogCreateManyUserInputSchema).array() ]),
}).strict();

export const SessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutUserInputSchema),z.lazy(() => SessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateWithoutUserInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionUpdateManyMutationInputSchema),z.lazy(() => SessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SessionScalarWhereInputSchema: z.ZodType<Prisma.SessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereInputSchema),z.lazy(() => SessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  activeOrganizationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  impersonatedBy: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const AccountUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateManyMutationInputSchema),z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accessToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  refreshToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  idToken: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MemberUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutUserInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutUserInputSchema),z.lazy(() => MemberUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutUserInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const MemberScalarWhereInputSchema: z.ZodType<Prisma.MemberScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MemberScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MemberScalarWhereInputSchema),z.lazy(() => MemberScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutUserInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const InvitationScalarWhereInputSchema: z.ZodType<Prisma.InvitationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InvitationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InvitationScalarWhereInputSchema),z.lazy(() => InvitationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organizationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  inviterId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const TwoFactorUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TwoFactorUpdateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => TwoFactorCreateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TwoFactorUpdateWithoutUserInputSchema),z.lazy(() => TwoFactorUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => TwoFactorScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TwoFactorUpdateManyMutationInputSchema),z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const TwoFactorScalarWhereInputSchema: z.ZodType<Prisma.TwoFactorScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TwoFactorScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TwoFactorScalarWhereInputSchema),z.lazy(() => TwoFactorScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  secret: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  backupCodes: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const AdUpsertWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.AdUpsertWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AdUpdateWithoutCreatorInputSchema),z.lazy(() => AdUncheckedUpdateWithoutCreatorInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutCreatorInputSchema),z.lazy(() => AdUncheckedCreateWithoutCreatorInputSchema) ]),
}).strict();

export const AdUpdateWithWhereUniqueWithoutCreatorInputSchema: z.ZodType<Prisma.AdUpdateWithWhereUniqueWithoutCreatorInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AdUpdateWithoutCreatorInputSchema),z.lazy(() => AdUncheckedUpdateWithoutCreatorInputSchema) ]),
}).strict();

export const AdUpdateManyWithWhereWithoutCreatorInputSchema: z.ZodType<Prisma.AdUpdateManyWithWhereWithoutCreatorInput> = z.object({
  where: z.lazy(() => AdScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AdUpdateManyMutationInputSchema),z.lazy(() => AdUncheckedUpdateManyWithoutCreatorInputSchema) ]),
}).strict();

export const AdScalarWhereInputSchema: z.ZodType<Prisma.AdScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdScalarWhereInputSchema),z.lazy(() => AdScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdScalarWhereInputSchema),z.lazy(() => AdScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  orgId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdBy: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumAdTypeFilterSchema),z.lazy(() => AdTypeSchema) ]).optional(),
  price: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  published: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  isDraft: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  boosted: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  featured: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  boostExpiry: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  featureExpiry: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  status: z.union([ z.lazy(() => EnumAdStatusFilterSchema),z.lazy(() => AdStatusSchema) ]).optional(),
  expiryDate: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  seoTitle: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seoDescription: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  seoSlug: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categoryId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  condition: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  brand: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  trimEdition: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  manufacturedYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  modelYear: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  mileage: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  engineCapacity: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => EnumFuelTypeNullableFilterSchema),z.lazy(() => FuelTypeSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => EnumTransmissionNullableFilterSchema),z.lazy(() => TransmissionSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => EnumBodyTypeNullableFilterSchema),z.lazy(() => BodyTypeSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => EnumBikeTypeNullableFilterSchema),z.lazy(() => BikeTypeSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => EnumHeavyDutyVehicleTypeNullableFilterSchema),z.lazy(() => HeavyDutyVehicleTypeSchema) ]).optional().nullable(),
  serviceType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  partType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  maintenanceType: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  phoneNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  whatsappNumber: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  termsAndConditions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  location: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  province: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  district: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  specialNote: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MediaUpsertWithWhereUniqueWithoutUploaderInputSchema: z.ZodType<Prisma.MediaUpsertWithWhereUniqueWithoutUploaderInput> = z.object({
  where: z.lazy(() => MediaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MediaUpdateWithoutUploaderInputSchema),z.lazy(() => MediaUncheckedUpdateWithoutUploaderInputSchema) ]),
  create: z.union([ z.lazy(() => MediaCreateWithoutUploaderInputSchema),z.lazy(() => MediaUncheckedCreateWithoutUploaderInputSchema) ]),
}).strict();

export const MediaUpdateWithWhereUniqueWithoutUploaderInputSchema: z.ZodType<Prisma.MediaUpdateWithWhereUniqueWithoutUploaderInput> = z.object({
  where: z.lazy(() => MediaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MediaUpdateWithoutUploaderInputSchema),z.lazy(() => MediaUncheckedUpdateWithoutUploaderInputSchema) ]),
}).strict();

export const MediaUpdateManyWithWhereWithoutUploaderInputSchema: z.ZodType<Prisma.MediaUpdateManyWithWhereWithoutUploaderInput> = z.object({
  where: z.lazy(() => MediaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MediaUpdateManyMutationInputSchema),z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderInputSchema) ]),
}).strict();

export const MediaScalarWhereInputSchema: z.ZodType<Prisma.MediaScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MediaScalarWhereInputSchema),z.lazy(() => MediaScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MediaScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MediaScalarWhereInputSchema),z.lazy(() => MediaScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  uploaderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  url: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumMediaTypeFilterSchema),z.lazy(() => MediaTypeSchema) ]).optional(),
  filename: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  size: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PaymentUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PaymentUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PaymentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PaymentUpdateWithoutUserInputSchema),z.lazy(() => PaymentUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PaymentCreateWithoutUserInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const PaymentUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.PaymentUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => PaymentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PaymentUpdateWithoutUserInputSchema),z.lazy(() => PaymentUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PaymentUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PaymentUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PaymentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PaymentUpdateManyMutationInputSchema),z.lazy(() => PaymentUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const PaymentScalarWhereInputSchema: z.ZodType<Prisma.PaymentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PaymentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PaymentScalarWhereInputSchema),z.lazy(() => PaymentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumPaymentTypeFilterSchema),z.lazy(() => PaymentTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumPaymentStatusFilterSchema),z.lazy(() => PaymentStatusSchema) ]).optional(),
  amount: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FavoriteUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FavoriteUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FavoriteWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FavoriteUpdateWithoutUserInputSchema),z.lazy(() => FavoriteUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => FavoriteCreateWithoutUserInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const FavoriteUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.FavoriteUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => FavoriteWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FavoriteUpdateWithoutUserInputSchema),z.lazy(() => FavoriteUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const FavoriteUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.FavoriteUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => FavoriteScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FavoriteUpdateManyMutationInputSchema),z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const FavoriteScalarWhereInputSchema: z.ZodType<Prisma.FavoriteScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FavoriteScalarWhereInputSchema),z.lazy(() => FavoriteScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FavoriteScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FavoriteScalarWhereInputSchema),z.lazy(() => FavoriteScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const SavedSearchUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SavedSearchWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SavedSearchUpdateWithoutUserInputSchema),z.lazy(() => SavedSearchUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => SavedSearchCreateWithoutUserInputSchema),z.lazy(() => SavedSearchUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const SavedSearchUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => SavedSearchWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SavedSearchUpdateWithoutUserInputSchema),z.lazy(() => SavedSearchUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const SavedSearchUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => SavedSearchScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SavedSearchUpdateManyMutationInputSchema),z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const SavedSearchScalarWhereInputSchema: z.ZodType<Prisma.SavedSearchScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SavedSearchScalarWhereInputSchema),z.lazy(() => SavedSearchScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SavedSearchScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SavedSearchScalarWhereInputSchema),z.lazy(() => SavedSearchScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  filters: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MessageUpsertWithWhereUniqueWithoutSenderInputSchema: z.ZodType<Prisma.MessageUpsertWithWhereUniqueWithoutSenderInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MessageUpdateWithoutSenderInputSchema),z.lazy(() => MessageUncheckedUpdateWithoutSenderInputSchema) ]),
  create: z.union([ z.lazy(() => MessageCreateWithoutSenderInputSchema),z.lazy(() => MessageUncheckedCreateWithoutSenderInputSchema) ]),
}).strict();

export const MessageUpdateWithWhereUniqueWithoutSenderInputSchema: z.ZodType<Prisma.MessageUpdateWithWhereUniqueWithoutSenderInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MessageUpdateWithoutSenderInputSchema),z.lazy(() => MessageUncheckedUpdateWithoutSenderInputSchema) ]),
}).strict();

export const MessageUpdateManyWithWhereWithoutSenderInputSchema: z.ZodType<Prisma.MessageUpdateManyWithWhereWithoutSenderInput> = z.object({
  where: z.lazy(() => MessageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MessageUpdateManyMutationInputSchema),z.lazy(() => MessageUncheckedUpdateManyWithoutSenderInputSchema) ]),
}).strict();

export const MessageScalarWhereInputSchema: z.ZodType<Prisma.MessageScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  senderId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  receiverId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  adId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MessageUpsertWithWhereUniqueWithoutReceiverInputSchema: z.ZodType<Prisma.MessageUpsertWithWhereUniqueWithoutReceiverInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MessageUpdateWithoutReceiverInputSchema),z.lazy(() => MessageUncheckedUpdateWithoutReceiverInputSchema) ]),
  create: z.union([ z.lazy(() => MessageCreateWithoutReceiverInputSchema),z.lazy(() => MessageUncheckedCreateWithoutReceiverInputSchema) ]),
}).strict();

export const MessageUpdateWithWhereUniqueWithoutReceiverInputSchema: z.ZodType<Prisma.MessageUpdateWithWhereUniqueWithoutReceiverInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MessageUpdateWithoutReceiverInputSchema),z.lazy(() => MessageUncheckedUpdateWithoutReceiverInputSchema) ]),
}).strict();

export const MessageUpdateManyWithWhereWithoutReceiverInputSchema: z.ZodType<Prisma.MessageUpdateManyWithWhereWithoutReceiverInput> = z.object({
  where: z.lazy(() => MessageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MessageUpdateManyMutationInputSchema),z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverInputSchema) ]),
}).strict();

export const UserNotificationUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserNotificationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserNotificationUpdateWithoutUserInputSchema),z.lazy(() => UserNotificationUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserNotificationCreateWithoutUserInputSchema),z.lazy(() => UserNotificationUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserNotificationUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => UserNotificationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserNotificationUpdateWithoutUserInputSchema),z.lazy(() => UserNotificationUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const UserNotificationUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => UserNotificationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserNotificationUpdateManyMutationInputSchema),z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const UserNotificationScalarWhereInputSchema: z.ZodType<Prisma.UserNotificationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserNotificationScalarWhereInputSchema),z.lazy(() => UserNotificationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserNotificationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserNotificationScalarWhereInputSchema),z.lazy(() => UserNotificationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumNotificationTypeFilterSchema),z.lazy(() => NotificationTypeSchema) ]).optional(),
  title: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  read: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ReportUpsertWithWhereUniqueWithoutReporterInputSchema: z.ZodType<Prisma.ReportUpsertWithWhereUniqueWithoutReporterInput> = z.object({
  where: z.lazy(() => ReportWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReportUpdateWithoutReporterInputSchema),z.lazy(() => ReportUncheckedUpdateWithoutReporterInputSchema) ]),
  create: z.union([ z.lazy(() => ReportCreateWithoutReporterInputSchema),z.lazy(() => ReportUncheckedCreateWithoutReporterInputSchema) ]),
}).strict();

export const ReportUpdateWithWhereUniqueWithoutReporterInputSchema: z.ZodType<Prisma.ReportUpdateWithWhereUniqueWithoutReporterInput> = z.object({
  where: z.lazy(() => ReportWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReportUpdateWithoutReporterInputSchema),z.lazy(() => ReportUncheckedUpdateWithoutReporterInputSchema) ]),
}).strict();

export const ReportUpdateManyWithWhereWithoutReporterInputSchema: z.ZodType<Prisma.ReportUpdateManyWithWhereWithoutReporterInput> = z.object({
  where: z.lazy(() => ReportScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReportUpdateManyMutationInputSchema),z.lazy(() => ReportUncheckedUpdateManyWithoutReporterInputSchema) ]),
}).strict();

export const ReportScalarWhereInputSchema: z.ZodType<Prisma.ReportScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ReportScalarWhereInputSchema),z.lazy(() => ReportScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ReportScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ReportScalarWhereInputSchema),z.lazy(() => ReportScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  reason: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  details: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AuditLogUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AuditLogUpdateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AuditLogUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateWithoutUserInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AuditLogUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AuditLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateManyMutationInputSchema),z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AuditLogScalarWhereInputSchema: z.ZodType<Prisma.AuditLogScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuditLogScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuditLogScalarWhereInputSchema),z.lazy(() => AuditLogScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  orgId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resource: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resourceId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const MemberCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  role: z.string(),
  createdAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutMembersInputSchema)
}).strict();

export const MemberUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const MemberCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MemberCreateManyOrganizationInputSchema),z.lazy(() => MemberCreateManyOrganizationInputSchema).array() ]),
}).strict();

export const InvitationCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutInvitationsInputSchema)
}).strict();

export const InvitationUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const InvitationCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InvitationCreateManyOrganizationInputSchema),z.lazy(() => InvitationCreateManyOrganizationInputSchema).array() ]),
}).strict();

export const AdCreateWithoutOrgInputSchema: z.ZodType<Prisma.AdCreateWithoutOrgInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutOrgInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutOrgInput> = z.object({
  id: z.string().optional(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutOrgInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutOrgInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutOrgInputSchema),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema) ]),
}).strict();

export const AdCreateManyOrgInputEnvelopeSchema: z.ZodType<Prisma.AdCreateManyOrgInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AdCreateManyOrgInputSchema),z.lazy(() => AdCreateManyOrgInputSchema).array() ]),
}).strict();

export const AuditLogCreateWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogCreateWithoutOrgInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  resource: z.string().optional().nullable(),
  resourceId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutAuditLogsInputSchema).optional()
}).strict();

export const AuditLogUncheckedCreateWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogUncheckedCreateWithoutOrgInput> = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  action: z.string(),
  resource: z.string().optional().nullable(),
  resourceId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AuditLogCreateOrConnectWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogCreateOrConnectWithoutOrgInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutOrgInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema) ]),
}).strict();

export const AuditLogCreateManyOrgInputEnvelopeSchema: z.ZodType<Prisma.AuditLogCreateManyOrgInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AuditLogCreateManyOrgInputSchema),z.lazy(() => AuditLogCreateManyOrgInputSchema).array() ]),
}).strict();

export const MemberUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MemberUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => MemberCreateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateWithoutOrganizationInputSchema),z.lazy(() => MemberUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const MemberUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => MemberScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MemberUpdateManyMutationInputSchema),z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => InvitationCreateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateWithoutOrganizationInputSchema),z.lazy(() => InvitationUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const InvitationUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => InvitationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InvitationUpdateManyMutationInputSchema),z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const AdUpsertWithWhereUniqueWithoutOrgInputSchema: z.ZodType<Prisma.AdUpsertWithWhereUniqueWithoutOrgInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AdUpdateWithoutOrgInputSchema),z.lazy(() => AdUncheckedUpdateWithoutOrgInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutOrgInputSchema),z.lazy(() => AdUncheckedCreateWithoutOrgInputSchema) ]),
}).strict();

export const AdUpdateWithWhereUniqueWithoutOrgInputSchema: z.ZodType<Prisma.AdUpdateWithWhereUniqueWithoutOrgInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AdUpdateWithoutOrgInputSchema),z.lazy(() => AdUncheckedUpdateWithoutOrgInputSchema) ]),
}).strict();

export const AdUpdateManyWithWhereWithoutOrgInputSchema: z.ZodType<Prisma.AdUpdateManyWithWhereWithoutOrgInput> = z.object({
  where: z.lazy(() => AdScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AdUpdateManyMutationInputSchema),z.lazy(() => AdUncheckedUpdateManyWithoutOrgInputSchema) ]),
}).strict();

export const AuditLogUpsertWithWhereUniqueWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogUpsertWithWhereUniqueWithoutOrgInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AuditLogUpdateWithoutOrgInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutOrgInputSchema) ]),
  create: z.union([ z.lazy(() => AuditLogCreateWithoutOrgInputSchema),z.lazy(() => AuditLogUncheckedCreateWithoutOrgInputSchema) ]),
}).strict();

export const AuditLogUpdateWithWhereUniqueWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogUpdateWithWhereUniqueWithoutOrgInput> = z.object({
  where: z.lazy(() => AuditLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateWithoutOrgInputSchema),z.lazy(() => AuditLogUncheckedUpdateWithoutOrgInputSchema) ]),
}).strict();

export const AuditLogUpdateManyWithWhereWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogUpdateManyWithWhereWithoutOrgInput> = z.object({
  where: z.lazy(() => AuditLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AuditLogUpdateManyMutationInputSchema),z.lazy(() => AuditLogUncheckedUpdateManyWithoutOrgInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutMembersInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ads: z.lazy(() => AdCreateNestedManyWithoutOrgInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ads: z.lazy(() => AdUncheckedCreateNestedManyWithoutOrgInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]),
}).strict();

export const UserCreateWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateWithoutMembersInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutMembersInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutMembersInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutMembersInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutMembersInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutMembersInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutMembersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutMembersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutMembersInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ads: z.lazy(() => AdUpdateManyWithoutOrgNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutMembersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutMembersInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ads: z.lazy(() => AdUncheckedUpdateManyWithoutOrgNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutMembersInputSchema: z.ZodType<Prisma.UserUpsertWithoutMembersInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutMembersInputSchema),z.lazy(() => UserUncheckedCreateWithoutMembersInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutMembersInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutMembersInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutMembersInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMembersInputSchema) ]),
}).strict();

export const UserUpdateWithoutMembersInputSchema: z.ZodType<Prisma.UserUpdateWithoutMembersInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutMembersInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutMembersInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutInvitationsInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ads: z.lazy(() => AdCreateNestedManyWithoutOrgInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ads: z.lazy(() => AdUncheckedCreateNestedManyWithoutOrgInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateWithoutInvitationsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInvitationsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInvitationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutInvitationsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutInvitationsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ads: z.lazy(() => AdUpdateManyWithoutOrgNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutInvitationsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ads: z.lazy(() => AdUncheckedUpdateManyWithoutOrgNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutInvitationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutInvitationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInvitationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInvitationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInvitationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutInvitationsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInvitationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInvitationsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateWithoutTwofactorsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutTwofactorsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]),
}).strict();

export const UserUpsertWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpsertWithoutTwofactorsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedCreateWithoutTwofactorsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutTwofactorsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutTwofactorsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutTwofactorsInputSchema) ]),
}).strict();

export const UserUpdateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUpdateWithoutTwofactorsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutTwofactorsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutTwofactorsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutAdsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutAdsInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutAdsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutAdsInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutAdsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutAdsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAdsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAdsInputSchema) ]),
}).strict();

export const UserCreateWithoutAdsCreatedInputSchema: z.ZodType<Prisma.UserCreateWithoutAdsCreatedInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAdsCreatedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAdsCreatedInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAdsCreatedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAdsCreatedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAdsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutAdsCreatedInputSchema) ]),
}).strict();

export const CategoryCreateWithoutAdsInputSchema: z.ZodType<Prisma.CategoryCreateWithoutAdsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string()
}).strict();

export const CategoryUncheckedCreateWithoutAdsInputSchema: z.ZodType<Prisma.CategoryUncheckedCreateWithoutAdsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  slug: z.string()
}).strict();

export const CategoryCreateOrConnectWithoutAdsInputSchema: z.ZodType<Prisma.CategoryCreateOrConnectWithoutAdsInput> = z.object({
  where: z.lazy(() => CategoryWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CategoryCreateWithoutAdsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutAdsInputSchema) ]),
}).strict();

export const AdAnalyticsCreateWithoutAdInputSchema: z.ZodType<Prisma.AdAnalyticsCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  views: z.number().int().optional(),
  clicks: z.number().int().optional(),
  impressions: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AdAnalyticsUncheckedCreateWithoutAdInputSchema: z.ZodType<Prisma.AdAnalyticsUncheckedCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  views: z.number().int().optional(),
  clicks: z.number().int().optional(),
  impressions: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AdAnalyticsCreateOrConnectWithoutAdInputSchema: z.ZodType<Prisma.AdAnalyticsCreateOrConnectWithoutAdInput> = z.object({
  where: z.lazy(() => AdAnalyticsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdAnalyticsCreateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const PaymentCreateWithoutAdInputSchema: z.ZodType<Prisma.PaymentCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => PaymentTypeSchema),
  status: z.lazy(() => PaymentStatusSchema),
  amount: z.number(),
  sessionId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutPaymentsInputSchema)
}).strict();

export const PaymentUncheckedCreateWithoutAdInputSchema: z.ZodType<Prisma.PaymentUncheckedCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  type: z.lazy(() => PaymentTypeSchema),
  status: z.lazy(() => PaymentStatusSchema),
  amount: z.number(),
  sessionId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const PaymentCreateOrConnectWithoutAdInputSchema: z.ZodType<Prisma.PaymentCreateOrConnectWithoutAdInput> = z.object({
  where: z.lazy(() => PaymentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PaymentCreateWithoutAdInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const PaymentCreateManyAdInputEnvelopeSchema: z.ZodType<Prisma.PaymentCreateManyAdInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PaymentCreateManyAdInputSchema),z.lazy(() => PaymentCreateManyAdInputSchema).array() ]),
}).strict();

export const FavoriteCreateWithoutAdInputSchema: z.ZodType<Prisma.FavoriteCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  user: z.lazy(() => UserCreateNestedOneWithoutFavoritesInputSchema)
}).strict();

export const FavoriteUncheckedCreateWithoutAdInputSchema: z.ZodType<Prisma.FavoriteUncheckedCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  userId: z.string()
}).strict();

export const FavoriteCreateOrConnectWithoutAdInputSchema: z.ZodType<Prisma.FavoriteCreateOrConnectWithoutAdInput> = z.object({
  where: z.lazy(() => FavoriteWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FavoriteCreateWithoutAdInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const FavoriteCreateManyAdInputEnvelopeSchema: z.ZodType<Prisma.FavoriteCreateManyAdInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FavoriteCreateManyAdInputSchema),z.lazy(() => FavoriteCreateManyAdInputSchema).array() ]),
}).strict();

export const ReportCreateWithoutAdInputSchema: z.ZodType<Prisma.ReportCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  reason: z.string(),
  details: z.string().optional().nullable(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional(),
  reporter: z.lazy(() => UserCreateNestedOneWithoutReportsInputSchema)
}).strict();

export const ReportUncheckedCreateWithoutAdInputSchema: z.ZodType<Prisma.ReportUncheckedCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  reason: z.string(),
  details: z.string().optional().nullable(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ReportCreateOrConnectWithoutAdInputSchema: z.ZodType<Prisma.ReportCreateOrConnectWithoutAdInput> = z.object({
  where: z.lazy(() => ReportWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ReportCreateWithoutAdInputSchema),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const ReportCreateManyAdInputEnvelopeSchema: z.ZodType<Prisma.ReportCreateManyAdInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ReportCreateManyAdInputSchema),z.lazy(() => ReportCreateManyAdInputSchema).array() ]),
}).strict();

export const AdRevisionCreateWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  version: z.number().int(),
  data: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const AdRevisionUncheckedCreateWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionUncheckedCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  version: z.number().int(),
  data: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const AdRevisionCreateOrConnectWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionCreateOrConnectWithoutAdInput> = z.object({
  where: z.lazy(() => AdRevisionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdRevisionCreateWithoutAdInputSchema),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const AdRevisionCreateManyAdInputEnvelopeSchema: z.ZodType<Prisma.AdRevisionCreateManyAdInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AdRevisionCreateManyAdInputSchema),z.lazy(() => AdRevisionCreateManyAdInputSchema).array() ]),
}).strict();

export const GeoHeatmapCreateWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  lat: z.number(),
  lng: z.number(),
  country: z.string().optional().nullable(),
  region: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const GeoHeatmapUncheckedCreateWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapUncheckedCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  lat: z.number(),
  lng: z.number(),
  country: z.string().optional().nullable(),
  region: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const GeoHeatmapCreateOrConnectWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapCreateOrConnectWithoutAdInput> = z.object({
  where: z.lazy(() => GeoHeatmapWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const GeoHeatmapCreateManyAdInputEnvelopeSchema: z.ZodType<Prisma.GeoHeatmapCreateManyAdInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => GeoHeatmapCreateManyAdInputSchema),z.lazy(() => GeoHeatmapCreateManyAdInputSchema).array() ]),
}).strict();

export const ShareEventCreateWithoutAdInputSchema: z.ZodType<Prisma.ShareEventCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  platform: z.lazy(() => SharePlatformSchema),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sharedAt: z.coerce.date().optional()
}).strict();

export const ShareEventUncheckedCreateWithoutAdInputSchema: z.ZodType<Prisma.ShareEventUncheckedCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  platform: z.lazy(() => SharePlatformSchema),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sharedAt: z.coerce.date().optional()
}).strict();

export const ShareEventCreateOrConnectWithoutAdInputSchema: z.ZodType<Prisma.ShareEventCreateOrConnectWithoutAdInput> = z.object({
  where: z.lazy(() => ShareEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ShareEventCreateWithoutAdInputSchema),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const ShareEventCreateManyAdInputEnvelopeSchema: z.ZodType<Prisma.ShareEventCreateManyAdInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ShareEventCreateManyAdInputSchema),z.lazy(() => ShareEventCreateManyAdInputSchema).array() ]),
}).strict();

export const AdMediaCreateWithoutAdInputSchema: z.ZodType<Prisma.AdMediaCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  order: z.number().int().optional(),
  media: z.lazy(() => MediaCreateNestedOneWithoutAdsInputSchema)
}).strict();

export const AdMediaUncheckedCreateWithoutAdInputSchema: z.ZodType<Prisma.AdMediaUncheckedCreateWithoutAdInput> = z.object({
  id: z.string().optional(),
  mediaId: z.string(),
  order: z.number().int().optional()
}).strict();

export const AdMediaCreateOrConnectWithoutAdInputSchema: z.ZodType<Prisma.AdMediaCreateOrConnectWithoutAdInput> = z.object({
  where: z.lazy(() => AdMediaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdMediaCreateWithoutAdInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const AdMediaCreateManyAdInputEnvelopeSchema: z.ZodType<Prisma.AdMediaCreateManyAdInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AdMediaCreateManyAdInputSchema),z.lazy(() => AdMediaCreateManyAdInputSchema).array() ]),
}).strict();

export const OrganizationUpsertWithoutAdsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutAdsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutAdsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAdsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAdsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAdsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutAdsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutAdsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutAdsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAdsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutAdsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutAdsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutAdsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutAdsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutAdsCreatedInputSchema: z.ZodType<Prisma.UserUpsertWithoutAdsCreatedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAdsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAdsCreatedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAdsCreatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutAdsCreatedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAdsCreatedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAdsCreatedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAdsCreatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAdsCreatedInputSchema) ]),
}).strict();

export const UserUpdateWithoutAdsCreatedInputSchema: z.ZodType<Prisma.UserUpdateWithoutAdsCreatedInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAdsCreatedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAdsCreatedInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const CategoryUpsertWithoutAdsInputSchema: z.ZodType<Prisma.CategoryUpsertWithoutAdsInput> = z.object({
  update: z.union([ z.lazy(() => CategoryUpdateWithoutAdsInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutAdsInputSchema) ]),
  create: z.union([ z.lazy(() => CategoryCreateWithoutAdsInputSchema),z.lazy(() => CategoryUncheckedCreateWithoutAdsInputSchema) ]),
  where: z.lazy(() => CategoryWhereInputSchema).optional()
}).strict();

export const CategoryUpdateToOneWithWhereWithoutAdsInputSchema: z.ZodType<Prisma.CategoryUpdateToOneWithWhereWithoutAdsInput> = z.object({
  where: z.lazy(() => CategoryWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CategoryUpdateWithoutAdsInputSchema),z.lazy(() => CategoryUncheckedUpdateWithoutAdsInputSchema) ]),
}).strict();

export const CategoryUpdateWithoutAdsInputSchema: z.ZodType<Prisma.CategoryUpdateWithoutAdsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const CategoryUncheckedUpdateWithoutAdsInputSchema: z.ZodType<Prisma.CategoryUncheckedUpdateWithoutAdsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdAnalyticsUpsertWithoutAdInputSchema: z.ZodType<Prisma.AdAnalyticsUpsertWithoutAdInput> = z.object({
  update: z.union([ z.lazy(() => AdAnalyticsUpdateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedUpdateWithoutAdInputSchema) ]),
  create: z.union([ z.lazy(() => AdAnalyticsCreateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedCreateWithoutAdInputSchema) ]),
  where: z.lazy(() => AdAnalyticsWhereInputSchema).optional()
}).strict();

export const AdAnalyticsUpdateToOneWithWhereWithoutAdInputSchema: z.ZodType<Prisma.AdAnalyticsUpdateToOneWithWhereWithoutAdInput> = z.object({
  where: z.lazy(() => AdAnalyticsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdAnalyticsUpdateWithoutAdInputSchema),z.lazy(() => AdAnalyticsUncheckedUpdateWithoutAdInputSchema) ]),
}).strict();

export const AdAnalyticsUpdateWithoutAdInputSchema: z.ZodType<Prisma.AdAnalyticsUpdateWithoutAdInput> = z.object({
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  impressions: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdAnalyticsUncheckedUpdateWithoutAdInputSchema: z.ZodType<Prisma.AdAnalyticsUncheckedUpdateWithoutAdInput> = z.object({
  views: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  clicks: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  impressions: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentUpsertWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.PaymentUpsertWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => PaymentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PaymentUpdateWithoutAdInputSchema),z.lazy(() => PaymentUncheckedUpdateWithoutAdInputSchema) ]),
  create: z.union([ z.lazy(() => PaymentCreateWithoutAdInputSchema),z.lazy(() => PaymentUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const PaymentUpdateWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.PaymentUpdateWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => PaymentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PaymentUpdateWithoutAdInputSchema),z.lazy(() => PaymentUncheckedUpdateWithoutAdInputSchema) ]),
}).strict();

export const PaymentUpdateManyWithWhereWithoutAdInputSchema: z.ZodType<Prisma.PaymentUpdateManyWithWhereWithoutAdInput> = z.object({
  where: z.lazy(() => PaymentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PaymentUpdateManyMutationInputSchema),z.lazy(() => PaymentUncheckedUpdateManyWithoutAdInputSchema) ]),
}).strict();

export const FavoriteUpsertWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.FavoriteUpsertWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => FavoriteWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FavoriteUpdateWithoutAdInputSchema),z.lazy(() => FavoriteUncheckedUpdateWithoutAdInputSchema) ]),
  create: z.union([ z.lazy(() => FavoriteCreateWithoutAdInputSchema),z.lazy(() => FavoriteUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const FavoriteUpdateWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.FavoriteUpdateWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => FavoriteWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FavoriteUpdateWithoutAdInputSchema),z.lazy(() => FavoriteUncheckedUpdateWithoutAdInputSchema) ]),
}).strict();

export const FavoriteUpdateManyWithWhereWithoutAdInputSchema: z.ZodType<Prisma.FavoriteUpdateManyWithWhereWithoutAdInput> = z.object({
  where: z.lazy(() => FavoriteScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FavoriteUpdateManyMutationInputSchema),z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdInputSchema) ]),
}).strict();

export const ReportUpsertWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.ReportUpsertWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => ReportWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ReportUpdateWithoutAdInputSchema),z.lazy(() => ReportUncheckedUpdateWithoutAdInputSchema) ]),
  create: z.union([ z.lazy(() => ReportCreateWithoutAdInputSchema),z.lazy(() => ReportUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const ReportUpdateWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.ReportUpdateWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => ReportWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ReportUpdateWithoutAdInputSchema),z.lazy(() => ReportUncheckedUpdateWithoutAdInputSchema) ]),
}).strict();

export const ReportUpdateManyWithWhereWithoutAdInputSchema: z.ZodType<Prisma.ReportUpdateManyWithWhereWithoutAdInput> = z.object({
  where: z.lazy(() => ReportScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ReportUpdateManyMutationInputSchema),z.lazy(() => ReportUncheckedUpdateManyWithoutAdInputSchema) ]),
}).strict();

export const AdRevisionUpsertWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionUpsertWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => AdRevisionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AdRevisionUpdateWithoutAdInputSchema),z.lazy(() => AdRevisionUncheckedUpdateWithoutAdInputSchema) ]),
  create: z.union([ z.lazy(() => AdRevisionCreateWithoutAdInputSchema),z.lazy(() => AdRevisionUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const AdRevisionUpdateWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionUpdateWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => AdRevisionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AdRevisionUpdateWithoutAdInputSchema),z.lazy(() => AdRevisionUncheckedUpdateWithoutAdInputSchema) ]),
}).strict();

export const AdRevisionUpdateManyWithWhereWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionUpdateManyWithWhereWithoutAdInput> = z.object({
  where: z.lazy(() => AdRevisionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AdRevisionUpdateManyMutationInputSchema),z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdInputSchema) ]),
}).strict();

export const AdRevisionScalarWhereInputSchema: z.ZodType<Prisma.AdRevisionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdRevisionScalarWhereInputSchema),z.lazy(() => AdRevisionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdRevisionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdRevisionScalarWhereInputSchema),z.lazy(() => AdRevisionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  version: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const GeoHeatmapUpsertWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapUpsertWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => GeoHeatmapWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => GeoHeatmapUpdateWithoutAdInputSchema),z.lazy(() => GeoHeatmapUncheckedUpdateWithoutAdInputSchema) ]),
  create: z.union([ z.lazy(() => GeoHeatmapCreateWithoutAdInputSchema),z.lazy(() => GeoHeatmapUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const GeoHeatmapUpdateWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapUpdateWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => GeoHeatmapWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => GeoHeatmapUpdateWithoutAdInputSchema),z.lazy(() => GeoHeatmapUncheckedUpdateWithoutAdInputSchema) ]),
}).strict();

export const GeoHeatmapUpdateManyWithWhereWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapUpdateManyWithWhereWithoutAdInput> = z.object({
  where: z.lazy(() => GeoHeatmapScalarWhereInputSchema),
  data: z.union([ z.lazy(() => GeoHeatmapUpdateManyMutationInputSchema),z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdInputSchema) ]),
}).strict();

export const GeoHeatmapScalarWhereInputSchema: z.ZodType<Prisma.GeoHeatmapScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GeoHeatmapScalarWhereInputSchema),z.lazy(() => GeoHeatmapScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GeoHeatmapScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GeoHeatmapScalarWhereInputSchema),z.lazy(() => GeoHeatmapScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  lat: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lng: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  country: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  region: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  city: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ShareEventUpsertWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.ShareEventUpsertWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => ShareEventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ShareEventUpdateWithoutAdInputSchema),z.lazy(() => ShareEventUncheckedUpdateWithoutAdInputSchema) ]),
  create: z.union([ z.lazy(() => ShareEventCreateWithoutAdInputSchema),z.lazy(() => ShareEventUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const ShareEventUpdateWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.ShareEventUpdateWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => ShareEventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ShareEventUpdateWithoutAdInputSchema),z.lazy(() => ShareEventUncheckedUpdateWithoutAdInputSchema) ]),
}).strict();

export const ShareEventUpdateManyWithWhereWithoutAdInputSchema: z.ZodType<Prisma.ShareEventUpdateManyWithWhereWithoutAdInput> = z.object({
  where: z.lazy(() => ShareEventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ShareEventUpdateManyMutationInputSchema),z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdInputSchema) ]),
}).strict();

export const ShareEventScalarWhereInputSchema: z.ZodType<Prisma.ShareEventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ShareEventScalarWhereInputSchema),z.lazy(() => ShareEventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ShareEventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ShareEventScalarWhereInputSchema),z.lazy(() => ShareEventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  platform: z.union([ z.lazy(() => EnumSharePlatformFilterSchema),z.lazy(() => SharePlatformSchema) ]).optional(),
  ipAddress: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userAgent: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sharedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AdMediaUpsertWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.AdMediaUpsertWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => AdMediaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AdMediaUpdateWithoutAdInputSchema),z.lazy(() => AdMediaUncheckedUpdateWithoutAdInputSchema) ]),
  create: z.union([ z.lazy(() => AdMediaCreateWithoutAdInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutAdInputSchema) ]),
}).strict();

export const AdMediaUpdateWithWhereUniqueWithoutAdInputSchema: z.ZodType<Prisma.AdMediaUpdateWithWhereUniqueWithoutAdInput> = z.object({
  where: z.lazy(() => AdMediaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AdMediaUpdateWithoutAdInputSchema),z.lazy(() => AdMediaUncheckedUpdateWithoutAdInputSchema) ]),
}).strict();

export const AdMediaUpdateManyWithWhereWithoutAdInputSchema: z.ZodType<Prisma.AdMediaUpdateManyWithWhereWithoutAdInput> = z.object({
  where: z.lazy(() => AdMediaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AdMediaUpdateManyMutationInputSchema),z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdInputSchema) ]),
}).strict();

export const AdMediaScalarWhereInputSchema: z.ZodType<Prisma.AdMediaScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdMediaScalarWhereInputSchema),z.lazy(() => AdMediaScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdMediaScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdMediaScalarWhereInputSchema),z.lazy(() => AdMediaScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  adId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  mediaId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  order: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const AdCreateWithoutRevisionsInputSchema: z.ZodType<Prisma.AdCreateWithoutRevisionsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutRevisionsInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutRevisionsInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutRevisionsInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutRevisionsInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutRevisionsInputSchema),z.lazy(() => AdUncheckedCreateWithoutRevisionsInputSchema) ]),
}).strict();

export const AdUpsertWithoutRevisionsInputSchema: z.ZodType<Prisma.AdUpsertWithoutRevisionsInput> = z.object({
  update: z.union([ z.lazy(() => AdUpdateWithoutRevisionsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutRevisionsInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutRevisionsInputSchema),z.lazy(() => AdUncheckedCreateWithoutRevisionsInputSchema) ]),
  where: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const AdUpdateToOneWithWhereWithoutRevisionsInputSchema: z.ZodType<Prisma.AdUpdateToOneWithWhereWithoutRevisionsInput> = z.object({
  where: z.lazy(() => AdWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdUpdateWithoutRevisionsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutRevisionsInputSchema) ]),
}).strict();

export const AdUpdateWithoutRevisionsInputSchema: z.ZodType<Prisma.AdUpdateWithoutRevisionsInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutRevisionsInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutRevisionsInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdCreateWithoutAnalyticsInputSchema: z.ZodType<Prisma.AdCreateWithoutAnalyticsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutAnalyticsInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutAnalyticsInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutAnalyticsInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutAnalyticsInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutAnalyticsInputSchema),z.lazy(() => AdUncheckedCreateWithoutAnalyticsInputSchema) ]),
}).strict();

export const AdUpsertWithoutAnalyticsInputSchema: z.ZodType<Prisma.AdUpsertWithoutAnalyticsInput> = z.object({
  update: z.union([ z.lazy(() => AdUpdateWithoutAnalyticsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutAnalyticsInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutAnalyticsInputSchema),z.lazy(() => AdUncheckedCreateWithoutAnalyticsInputSchema) ]),
  where: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const AdUpdateToOneWithWhereWithoutAnalyticsInputSchema: z.ZodType<Prisma.AdUpdateToOneWithWhereWithoutAnalyticsInput> = z.object({
  where: z.lazy(() => AdWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdUpdateWithoutAnalyticsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutAnalyticsInputSchema) ]),
}).strict();

export const AdUpdateWithoutAnalyticsInputSchema: z.ZodType<Prisma.AdUpdateWithoutAnalyticsInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutAnalyticsInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutAnalyticsInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdCreateWithoutCategoryInputSchema: z.ZodType<Prisma.AdCreateWithoutCategoryInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutCategoryInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutCategoryInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutCategoryInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutCategoryInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutCategoryInputSchema),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const AdCreateManyCategoryInputEnvelopeSchema: z.ZodType<Prisma.AdCreateManyCategoryInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AdCreateManyCategoryInputSchema),z.lazy(() => AdCreateManyCategoryInputSchema).array() ]),
}).strict();

export const AdUpsertWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.AdUpsertWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AdUpdateWithoutCategoryInputSchema),z.lazy(() => AdUncheckedUpdateWithoutCategoryInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutCategoryInputSchema),z.lazy(() => AdUncheckedCreateWithoutCategoryInputSchema) ]),
}).strict();

export const AdUpdateWithWhereUniqueWithoutCategoryInputSchema: z.ZodType<Prisma.AdUpdateWithWhereUniqueWithoutCategoryInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AdUpdateWithoutCategoryInputSchema),z.lazy(() => AdUncheckedUpdateWithoutCategoryInputSchema) ]),
}).strict();

export const AdUpdateManyWithWhereWithoutCategoryInputSchema: z.ZodType<Prisma.AdUpdateManyWithWhereWithoutCategoryInput> = z.object({
  where: z.lazy(() => AdScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AdUpdateManyMutationInputSchema),z.lazy(() => AdUncheckedUpdateManyWithoutCategoryInputSchema) ]),
}).strict();

export const UserCreateWithoutMediaUploadedInputSchema: z.ZodType<Prisma.UserCreateWithoutMediaUploadedInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutMediaUploadedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutMediaUploadedInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutMediaUploadedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutMediaUploadedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutMediaUploadedInputSchema),z.lazy(() => UserUncheckedCreateWithoutMediaUploadedInputSchema) ]),
}).strict();

export const AdMediaCreateWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaCreateWithoutMediaInput> = z.object({
  id: z.string().optional(),
  order: z.number().int().optional(),
  ad: z.lazy(() => AdCreateNestedOneWithoutMediaInputSchema)
}).strict();

export const AdMediaUncheckedCreateWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaUncheckedCreateWithoutMediaInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  order: z.number().int().optional()
}).strict();

export const AdMediaCreateOrConnectWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaCreateOrConnectWithoutMediaInput> = z.object({
  where: z.lazy(() => AdMediaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdMediaCreateWithoutMediaInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema) ]),
}).strict();

export const AdMediaCreateManyMediaInputEnvelopeSchema: z.ZodType<Prisma.AdMediaCreateManyMediaInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AdMediaCreateManyMediaInputSchema),z.lazy(() => AdMediaCreateManyMediaInputSchema).array() ]),
}).strict();

export const UserUpsertWithoutMediaUploadedInputSchema: z.ZodType<Prisma.UserUpsertWithoutMediaUploadedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutMediaUploadedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMediaUploadedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutMediaUploadedInputSchema),z.lazy(() => UserUncheckedCreateWithoutMediaUploadedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutMediaUploadedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutMediaUploadedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutMediaUploadedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMediaUploadedInputSchema) ]),
}).strict();

export const UserUpdateWithoutMediaUploadedInputSchema: z.ZodType<Prisma.UserUpdateWithoutMediaUploadedInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutMediaUploadedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutMediaUploadedInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const AdMediaUpsertWithWhereUniqueWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaUpsertWithWhereUniqueWithoutMediaInput> = z.object({
  where: z.lazy(() => AdMediaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AdMediaUpdateWithoutMediaInputSchema),z.lazy(() => AdMediaUncheckedUpdateWithoutMediaInputSchema) ]),
  create: z.union([ z.lazy(() => AdMediaCreateWithoutMediaInputSchema),z.lazy(() => AdMediaUncheckedCreateWithoutMediaInputSchema) ]),
}).strict();

export const AdMediaUpdateWithWhereUniqueWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaUpdateWithWhereUniqueWithoutMediaInput> = z.object({
  where: z.lazy(() => AdMediaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AdMediaUpdateWithoutMediaInputSchema),z.lazy(() => AdMediaUncheckedUpdateWithoutMediaInputSchema) ]),
}).strict();

export const AdMediaUpdateManyWithWhereWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaUpdateManyWithWhereWithoutMediaInput> = z.object({
  where: z.lazy(() => AdMediaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AdMediaUpdateManyMutationInputSchema),z.lazy(() => AdMediaUncheckedUpdateManyWithoutMediaInputSchema) ]),
}).strict();

export const AdCreateWithoutPaymentsInputSchema: z.ZodType<Prisma.AdCreateWithoutPaymentsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutPaymentsInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutPaymentsInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutPaymentsInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutPaymentsInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutPaymentsInputSchema),z.lazy(() => AdUncheckedCreateWithoutPaymentsInputSchema) ]),
}).strict();

export const UserCreateWithoutPaymentsInputSchema: z.ZodType<Prisma.UserCreateWithoutPaymentsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPaymentsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPaymentsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPaymentsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPaymentsInputSchema) ]),
}).strict();

export const AdUpsertWithoutPaymentsInputSchema: z.ZodType<Prisma.AdUpsertWithoutPaymentsInput> = z.object({
  update: z.union([ z.lazy(() => AdUpdateWithoutPaymentsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutPaymentsInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutPaymentsInputSchema),z.lazy(() => AdUncheckedCreateWithoutPaymentsInputSchema) ]),
  where: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const AdUpdateToOneWithWhereWithoutPaymentsInputSchema: z.ZodType<Prisma.AdUpdateToOneWithWhereWithoutPaymentsInput> = z.object({
  where: z.lazy(() => AdWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdUpdateWithoutPaymentsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutPaymentsInputSchema) ]),
}).strict();

export const AdUpdateWithoutPaymentsInputSchema: z.ZodType<Prisma.AdUpdateWithoutPaymentsInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutPaymentsInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutPaymentsInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUpsertWithoutPaymentsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPaymentsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedCreateWithoutPaymentsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPaymentsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPaymentsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPaymentsInputSchema) ]),
}).strict();

export const UserUpdateWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUpdateWithoutPaymentsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPaymentsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPaymentsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutFavoritesInputSchema: z.ZodType<Prisma.UserCreateWithoutFavoritesInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFavoritesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFavoritesInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFavoritesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFavoritesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFavoritesInputSchema),z.lazy(() => UserUncheckedCreateWithoutFavoritesInputSchema) ]),
}).strict();

export const AdCreateWithoutFavoritesInputSchema: z.ZodType<Prisma.AdCreateWithoutFavoritesInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutFavoritesInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutFavoritesInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutFavoritesInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutFavoritesInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutFavoritesInputSchema),z.lazy(() => AdUncheckedCreateWithoutFavoritesInputSchema) ]),
}).strict();

export const UserUpsertWithoutFavoritesInputSchema: z.ZodType<Prisma.UserUpsertWithoutFavoritesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFavoritesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFavoritesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFavoritesInputSchema),z.lazy(() => UserUncheckedCreateWithoutFavoritesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFavoritesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFavoritesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFavoritesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFavoritesInputSchema) ]),
}).strict();

export const UserUpdateWithoutFavoritesInputSchema: z.ZodType<Prisma.UserUpdateWithoutFavoritesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFavoritesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFavoritesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const AdUpsertWithoutFavoritesInputSchema: z.ZodType<Prisma.AdUpsertWithoutFavoritesInput> = z.object({
  update: z.union([ z.lazy(() => AdUpdateWithoutFavoritesInputSchema),z.lazy(() => AdUncheckedUpdateWithoutFavoritesInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutFavoritesInputSchema),z.lazy(() => AdUncheckedCreateWithoutFavoritesInputSchema) ]),
  where: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const AdUpdateToOneWithWhereWithoutFavoritesInputSchema: z.ZodType<Prisma.AdUpdateToOneWithWhereWithoutFavoritesInput> = z.object({
  where: z.lazy(() => AdWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdUpdateWithoutFavoritesInputSchema),z.lazy(() => AdUncheckedUpdateWithoutFavoritesInputSchema) ]),
}).strict();

export const AdUpdateWithoutFavoritesInputSchema: z.ZodType<Prisma.AdUpdateWithoutFavoritesInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutFavoritesInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutFavoritesInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutSavedSearchesInputSchema: z.ZodType<Prisma.UserCreateWithoutSavedSearchesInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSavedSearchesInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSavedSearchesInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSavedSearchesInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSavedSearchesInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSavedSearchesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSavedSearchesInputSchema) ]),
}).strict();

export const UserUpsertWithoutSavedSearchesInputSchema: z.ZodType<Prisma.UserUpsertWithoutSavedSearchesInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSavedSearchesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSavedSearchesInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSavedSearchesInputSchema),z.lazy(() => UserUncheckedCreateWithoutSavedSearchesInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSavedSearchesInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSavedSearchesInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSavedSearchesInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSavedSearchesInputSchema) ]),
}).strict();

export const UserUpdateWithoutSavedSearchesInputSchema: z.ZodType<Prisma.UserUpdateWithoutSavedSearchesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSavedSearchesInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSavedSearchesInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const AdCreateWithoutGeoViewsInputSchema: z.ZodType<Prisma.AdCreateWithoutGeoViewsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutGeoViewsInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutGeoViewsInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutGeoViewsInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutGeoViewsInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutGeoViewsInputSchema),z.lazy(() => AdUncheckedCreateWithoutGeoViewsInputSchema) ]),
}).strict();

export const AdUpsertWithoutGeoViewsInputSchema: z.ZodType<Prisma.AdUpsertWithoutGeoViewsInput> = z.object({
  update: z.union([ z.lazy(() => AdUpdateWithoutGeoViewsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutGeoViewsInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutGeoViewsInputSchema),z.lazy(() => AdUncheckedCreateWithoutGeoViewsInputSchema) ]),
  where: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const AdUpdateToOneWithWhereWithoutGeoViewsInputSchema: z.ZodType<Prisma.AdUpdateToOneWithWhereWithoutGeoViewsInput> = z.object({
  where: z.lazy(() => AdWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdUpdateWithoutGeoViewsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutGeoViewsInputSchema) ]),
}).strict();

export const AdUpdateWithoutGeoViewsInputSchema: z.ZodType<Prisma.AdUpdateWithoutGeoViewsInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutGeoViewsInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutGeoViewsInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutMessagesSentInputSchema: z.ZodType<Prisma.UserCreateWithoutMessagesSentInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutMessagesSentInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutMessagesSentInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutMessagesSentInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutMessagesSentInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutMessagesSentInputSchema),z.lazy(() => UserUncheckedCreateWithoutMessagesSentInputSchema) ]),
}).strict();

export const UserCreateWithoutMessagesReceivedInputSchema: z.ZodType<Prisma.UserCreateWithoutMessagesReceivedInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutMessagesReceivedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutMessagesReceivedInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutMessagesReceivedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutMessagesReceivedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutMessagesReceivedInputSchema),z.lazy(() => UserUncheckedCreateWithoutMessagesReceivedInputSchema) ]),
}).strict();

export const UserUpsertWithoutMessagesSentInputSchema: z.ZodType<Prisma.UserUpsertWithoutMessagesSentInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutMessagesSentInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMessagesSentInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutMessagesSentInputSchema),z.lazy(() => UserUncheckedCreateWithoutMessagesSentInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutMessagesSentInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutMessagesSentInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutMessagesSentInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMessagesSentInputSchema) ]),
}).strict();

export const UserUpdateWithoutMessagesSentInputSchema: z.ZodType<Prisma.UserUpdateWithoutMessagesSentInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutMessagesSentInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutMessagesSentInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutMessagesReceivedInputSchema: z.ZodType<Prisma.UserUpsertWithoutMessagesReceivedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutMessagesReceivedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMessagesReceivedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutMessagesReceivedInputSchema),z.lazy(() => UserUncheckedCreateWithoutMessagesReceivedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutMessagesReceivedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutMessagesReceivedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutMessagesReceivedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutMessagesReceivedInputSchema) ]),
}).strict();

export const UserUpdateWithoutMessagesReceivedInputSchema: z.ZodType<Prisma.UserUpdateWithoutMessagesReceivedInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutMessagesReceivedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutMessagesReceivedInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutNotificationsInputSchema: z.ZodType<Prisma.UserCreateWithoutNotificationsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutNotificationsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutNotificationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutNotificationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema) ]),
}).strict();

export const UserUpsertWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutNotificationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutNotificationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutNotificationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutNotificationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutNotificationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutNotificationsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutNotificationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutNotificationsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const AdCreateWithoutShareEventsInputSchema: z.ZodType<Prisma.AdCreateWithoutShareEventsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutShareEventsInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutShareEventsInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutShareEventsInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutShareEventsInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutShareEventsInputSchema),z.lazy(() => AdUncheckedCreateWithoutShareEventsInputSchema) ]),
}).strict();

export const AdUpsertWithoutShareEventsInputSchema: z.ZodType<Prisma.AdUpsertWithoutShareEventsInput> = z.object({
  update: z.union([ z.lazy(() => AdUpdateWithoutShareEventsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutShareEventsInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutShareEventsInputSchema),z.lazy(() => AdUncheckedCreateWithoutShareEventsInputSchema) ]),
  where: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const AdUpdateToOneWithWhereWithoutShareEventsInputSchema: z.ZodType<Prisma.AdUpdateToOneWithWhereWithoutShareEventsInput> = z.object({
  where: z.lazy(() => AdWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdUpdateWithoutShareEventsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutShareEventsInputSchema) ]),
}).strict();

export const AdUpdateWithoutShareEventsInputSchema: z.ZodType<Prisma.AdUpdateWithoutShareEventsInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutShareEventsInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutShareEventsInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutReportsInputSchema: z.ZodType<Prisma.UserCreateWithoutReportsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutReportsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutReportsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutReportsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutReportsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutReportsInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportsInputSchema) ]),
}).strict();

export const AdCreateWithoutReportsInputSchema: z.ZodType<Prisma.AdCreateWithoutReportsInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutReportsInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutReportsInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutReportsInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutReportsInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutReportsInputSchema),z.lazy(() => AdUncheckedCreateWithoutReportsInputSchema) ]),
}).strict();

export const UserUpsertWithoutReportsInputSchema: z.ZodType<Prisma.UserUpsertWithoutReportsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutReportsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReportsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutReportsInputSchema),z.lazy(() => UserUncheckedCreateWithoutReportsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutReportsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutReportsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutReportsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutReportsInputSchema) ]),
}).strict();

export const UserUpdateWithoutReportsInputSchema: z.ZodType<Prisma.UserUpdateWithoutReportsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutReportsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutReportsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  auditLogs: z.lazy(() => AuditLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const AdUpsertWithoutReportsInputSchema: z.ZodType<Prisma.AdUpsertWithoutReportsInput> = z.object({
  update: z.union([ z.lazy(() => AdUpdateWithoutReportsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutReportsInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutReportsInputSchema),z.lazy(() => AdUncheckedCreateWithoutReportsInputSchema) ]),
  where: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const AdUpdateToOneWithWhereWithoutReportsInputSchema: z.ZodType<Prisma.AdUpdateToOneWithWhereWithoutReportsInput> = z.object({
  where: z.lazy(() => AdWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdUpdateWithoutReportsInputSchema),z.lazy(() => AdUncheckedUpdateWithoutReportsInputSchema) ]),
}).strict();

export const AdUpdateWithoutReportsInputSchema: z.ZodType<Prisma.AdUpdateWithoutReportsInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutReportsInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutReportsInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserCreateWithoutAuditLogsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutReporterInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAuditLogsInput> = z.object({
  id: z.string(),
  name: z.string(),
  email: z.string(),
  emailVerified: z.boolean(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  twoFactorEnabled: z.boolean().optional().nullable(),
  role: z.string().optional().nullable(),
  banned: z.boolean().optional().nullable(),
  banReason: z.string().optional().nullable(),
  banExpires: z.coerce.date().optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedCreateNestedManyWithoutCreatorInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedCreateNestedManyWithoutUploaderInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedCreateNestedManyWithoutSenderInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedCreateNestedManyWithoutReceiverInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutReporterInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutAuditLogsInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  members: z.lazy(() => MemberCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ads: z.lazy(() => AdCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutAuditLogsInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutAuditLogsInput> = z.object({
  id: z.string(),
  name: z.string(),
  slug: z.string().optional().nullable(),
  logo: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  metadata: z.string().optional().nullable(),
  members: z.lazy(() => MemberUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  ads: z.lazy(() => AdUncheckedCreateNestedManyWithoutOrgInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutAuditLogsInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAuditLogsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAuditLogsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAuditLogsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuditLogsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAuditLogsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAuditLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAuditLogsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAuditLogsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutReporterNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAuditLogsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  twoFactorEnabled: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banned: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banReason: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  banExpires: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessions: z.lazy(() => SessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  twofactors: z.lazy(() => TwoFactorUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  adsCreated: z.lazy(() => AdUncheckedUpdateManyWithoutCreatorNestedInputSchema).optional(),
  mediaUploaded: z.lazy(() => MediaUncheckedUpdateManyWithoutUploaderNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  savedSearches: z.lazy(() => SavedSearchUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  messagesSent: z.lazy(() => MessageUncheckedUpdateManyWithoutSenderNestedInputSchema).optional(),
  messagesReceived: z.lazy(() => MessageUncheckedUpdateManyWithoutReceiverNestedInputSchema).optional(),
  notifications: z.lazy(() => UserNotificationUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutReporterNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutAuditLogsInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutAuditLogsInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutAuditLogsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAuditLogsInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutAuditLogsInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutAuditLogsInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutAuditLogsInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutAuditLogsInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutAuditLogsInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutAuditLogsInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutAuditLogsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ads: z.lazy(() => AdUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutAuditLogsInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutAuditLogsInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  logo: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  members: z.lazy(() => MemberUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  invitations: z.lazy(() => InvitationUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  ads: z.lazy(() => AdUncheckedUpdateManyWithoutOrgNestedInputSchema).optional()
}).strict();

export const AdCreateWithoutMediaInputSchema: z.ZodType<Prisma.AdCreateWithoutMediaInput> = z.object({
  id: z.string().optional(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  org: z.lazy(() => OrganizationCreateNestedOneWithoutAdsInputSchema),
  creator: z.lazy(() => UserCreateNestedOneWithoutAdsCreatedInputSchema),
  category: z.lazy(() => CategoryCreateNestedOneWithoutAdsInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdUncheckedCreateWithoutMediaInputSchema: z.ZodType<Prisma.AdUncheckedCreateWithoutMediaInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedCreateNestedOneWithoutAdInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedCreateNestedManyWithoutAdInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedCreateNestedManyWithoutAdInputSchema).optional()
}).strict();

export const AdCreateOrConnectWithoutMediaInputSchema: z.ZodType<Prisma.AdCreateOrConnectWithoutMediaInput> = z.object({
  where: z.lazy(() => AdWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AdCreateWithoutMediaInputSchema),z.lazy(() => AdUncheckedCreateWithoutMediaInputSchema) ]),
}).strict();

export const MediaCreateWithoutAdsInputSchema: z.ZodType<Prisma.MediaCreateWithoutAdsInput> = z.object({
  id: z.string().optional(),
  url: z.string(),
  type: z.lazy(() => MediaTypeSchema),
  filename: z.string().optional().nullable(),
  size: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  uploader: z.lazy(() => UserCreateNestedOneWithoutMediaUploadedInputSchema)
}).strict();

export const MediaUncheckedCreateWithoutAdsInputSchema: z.ZodType<Prisma.MediaUncheckedCreateWithoutAdsInput> = z.object({
  id: z.string().optional(),
  uploaderId: z.string(),
  url: z.string(),
  type: z.lazy(() => MediaTypeSchema),
  filename: z.string().optional().nullable(),
  size: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const MediaCreateOrConnectWithoutAdsInputSchema: z.ZodType<Prisma.MediaCreateOrConnectWithoutAdsInput> = z.object({
  where: z.lazy(() => MediaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MediaCreateWithoutAdsInputSchema),z.lazy(() => MediaUncheckedCreateWithoutAdsInputSchema) ]),
}).strict();

export const AdUpsertWithoutMediaInputSchema: z.ZodType<Prisma.AdUpsertWithoutMediaInput> = z.object({
  update: z.union([ z.lazy(() => AdUpdateWithoutMediaInputSchema),z.lazy(() => AdUncheckedUpdateWithoutMediaInputSchema) ]),
  create: z.union([ z.lazy(() => AdCreateWithoutMediaInputSchema),z.lazy(() => AdUncheckedCreateWithoutMediaInputSchema) ]),
  where: z.lazy(() => AdWhereInputSchema).optional()
}).strict();

export const AdUpdateToOneWithWhereWithoutMediaInputSchema: z.ZodType<Prisma.AdUpdateToOneWithWhereWithoutMediaInput> = z.object({
  where: z.lazy(() => AdWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => AdUpdateWithoutMediaInputSchema),z.lazy(() => AdUncheckedUpdateWithoutMediaInputSchema) ]),
}).strict();

export const AdUpdateWithoutMediaInputSchema: z.ZodType<Prisma.AdUpdateWithoutMediaInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutMediaInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutMediaInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const MediaUpsertWithoutAdsInputSchema: z.ZodType<Prisma.MediaUpsertWithoutAdsInput> = z.object({
  update: z.union([ z.lazy(() => MediaUpdateWithoutAdsInputSchema),z.lazy(() => MediaUncheckedUpdateWithoutAdsInputSchema) ]),
  create: z.union([ z.lazy(() => MediaCreateWithoutAdsInputSchema),z.lazy(() => MediaUncheckedCreateWithoutAdsInputSchema) ]),
  where: z.lazy(() => MediaWhereInputSchema).optional()
}).strict();

export const MediaUpdateToOneWithWhereWithoutAdsInputSchema: z.ZodType<Prisma.MediaUpdateToOneWithWhereWithoutAdsInput> = z.object({
  where: z.lazy(() => MediaWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => MediaUpdateWithoutAdsInputSchema),z.lazy(() => MediaUncheckedUpdateWithoutAdsInputSchema) ]),
}).strict();

export const MediaUpdateWithoutAdsInputSchema: z.ZodType<Prisma.MediaUpdateWithoutAdsInput> = z.object({
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => EnumMediaTypeFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  uploader: z.lazy(() => UserUpdateOneRequiredWithoutMediaUploadedNestedInputSchema).optional()
}).strict();

export const MediaUncheckedUpdateWithoutAdsInputSchema: z.ZodType<Prisma.MediaUncheckedUpdateWithoutAdsInput> = z.object({
  uploaderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => EnumMediaTypeFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionCreateManyUserInputSchema: z.ZodType<Prisma.SessionCreateManyUserInput> = z.object({
  id: z.string(),
  expiresAt: z.coerce.date(),
  token: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  activeOrganizationId: z.string().optional().nullable(),
  impersonatedBy: z.string().optional().nullable()
}).strict();

export const AccountCreateManyUserInputSchema: z.ZodType<Prisma.AccountCreateManyUserInput> = z.object({
  id: z.string(),
  accountId: z.string(),
  providerId: z.string(),
  accessToken: z.string().optional().nullable(),
  refreshToken: z.string().optional().nullable(),
  idToken: z.string().optional().nullable(),
  accessTokenExpiresAt: z.coerce.date().optional().nullable(),
  refreshTokenExpiresAt: z.coerce.date().optional().nullable(),
  scope: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date()
}).strict();

export const MemberCreateManyUserInputSchema: z.ZodType<Prisma.MemberCreateManyUserInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const InvitationCreateManyUserInputSchema: z.ZodType<Prisma.InvitationCreateManyUserInput> = z.object({
  id: z.string(),
  organizationId: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date()
}).strict();

export const TwoFactorCreateManyUserInputSchema: z.ZodType<Prisma.TwoFactorCreateManyUserInput> = z.object({
  id: z.string(),
  secret: z.string(),
  backupCodes: z.string()
}).strict();

export const AdCreateManyCreatorInputSchema: z.ZodType<Prisma.AdCreateManyCreatorInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const MediaCreateManyUploaderInputSchema: z.ZodType<Prisma.MediaCreateManyUploaderInput> = z.object({
  id: z.string().optional(),
  url: z.string(),
  type: z.lazy(() => MediaTypeSchema),
  filename: z.string().optional().nullable(),
  size: z.number().int().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const PaymentCreateManyUserInputSchema: z.ZodType<Prisma.PaymentCreateManyUserInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  type: z.lazy(() => PaymentTypeSchema),
  status: z.lazy(() => PaymentStatusSchema),
  amount: z.number(),
  sessionId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FavoriteCreateManyUserInputSchema: z.ZodType<Prisma.FavoriteCreateManyUserInput> = z.object({
  id: z.string().optional(),
  adId: z.string()
}).strict();

export const SavedSearchCreateManyUserInputSchema: z.ZodType<Prisma.SavedSearchCreateManyUserInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  filters: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const MessageCreateManySenderInputSchema: z.ZodType<Prisma.MessageCreateManySenderInput> = z.object({
  id: z.string().optional(),
  receiverId: z.string(),
  content: z.string(),
  read: z.boolean().optional(),
  adId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const MessageCreateManyReceiverInputSchema: z.ZodType<Prisma.MessageCreateManyReceiverInput> = z.object({
  id: z.string().optional(),
  senderId: z.string(),
  content: z.string(),
  read: z.boolean().optional(),
  adId: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const UserNotificationCreateManyUserInputSchema: z.ZodType<Prisma.UserNotificationCreateManyUserInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => NotificationTypeSchema),
  title: z.string(),
  message: z.string(),
  read: z.boolean().optional(),
  data: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const ReportCreateManyReporterInputSchema: z.ZodType<Prisma.ReportCreateManyReporterInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  reason: z.string(),
  details: z.string().optional().nullable(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AuditLogCreateManyUserInputSchema: z.ZodType<Prisma.AuditLogCreateManyUserInput> = z.object({
  id: z.string().optional(),
  orgId: z.string().optional().nullable(),
  action: z.string(),
  resource: z.string().optional().nullable(),
  resourceId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const SessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUpdateWithoutUserInput> = z.object({
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutUserInput> = z.object({
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyWithoutUserInput> = z.object({
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  activeOrganizationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impersonatedBy: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> = z.object({
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput> = z.object({
  accountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accessToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  idToken: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accessTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refreshTokenExpiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUpdateWithoutUserInputSchema: z.ZodType<Prisma.MemberUpdateWithoutUserInput> = z.object({
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutUserInput> = z.object({
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutUserInput> = z.object({
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutUserInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutUserInput> = z.object({
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutUserInput> = z.object({
  organizationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUpdateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUpdateWithoutUserInput> = z.object({
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateWithoutUserInput> = z.object({
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TwoFactorUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.TwoFactorUncheckedUpdateManyWithoutUserInput> = z.object({
  secret: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  backupCodes: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.AdUpdateWithoutCreatorInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutCreatorInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutCreatorInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateManyWithoutCreatorInputSchema: z.ZodType<Prisma.AdUncheckedUpdateManyWithoutCreatorInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MediaUpdateWithoutUploaderInputSchema: z.ZodType<Prisma.MediaUpdateWithoutUploaderInput> = z.object({
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => EnumMediaTypeFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ads: z.lazy(() => AdMediaUpdateManyWithoutMediaNestedInputSchema).optional()
}).strict();

export const MediaUncheckedUpdateWithoutUploaderInputSchema: z.ZodType<Prisma.MediaUncheckedUpdateWithoutUploaderInput> = z.object({
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => EnumMediaTypeFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ads: z.lazy(() => AdMediaUncheckedUpdateManyWithoutMediaNestedInputSchema).optional()
}).strict();

export const MediaUncheckedUpdateManyWithoutUploaderInputSchema: z.ZodType<Prisma.MediaUncheckedUpdateManyWithoutUploaderInput> = z.object({
  url: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MediaTypeSchema),z.lazy(() => EnumMediaTypeFieldUpdateOperationsInputSchema) ]).optional(),
  filename: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  size: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentUpdateWithoutUserInputSchema: z.ZodType<Prisma.PaymentUpdateWithoutUserInput> = z.object({
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutPaymentsNestedInputSchema).optional()
}).strict();

export const PaymentUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateWithoutUserInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateManyWithoutUserInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FavoriteUpdateWithoutUserInputSchema: z.ZodType<Prisma.FavoriteUpdateWithoutUserInput> = z.object({
  ad: z.lazy(() => AdUpdateOneRequiredWithoutFavoritesNestedInputSchema).optional()
}).strict();

export const FavoriteUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.FavoriteUncheckedUpdateWithoutUserInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FavoriteUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.FavoriteUncheckedUpdateManyWithoutUserInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SavedSearchUpdateWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchUpdateWithoutUserInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SavedSearchUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchUncheckedUpdateWithoutUserInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SavedSearchUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.SavedSearchUncheckedUpdateManyWithoutUserInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageUpdateWithoutSenderInputSchema: z.ZodType<Prisma.MessageUpdateWithoutSenderInput> = z.object({
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  receiver: z.lazy(() => UserUpdateOneRequiredWithoutMessagesReceivedNestedInputSchema).optional()
}).strict();

export const MessageUncheckedUpdateWithoutSenderInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateWithoutSenderInput> = z.object({
  receiverId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyWithoutSenderInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyWithoutSenderInput> = z.object({
  receiverId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageUpdateWithoutReceiverInputSchema: z.ZodType<Prisma.MessageUpdateWithoutReceiverInput> = z.object({
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sender: z.lazy(() => UserUpdateOneRequiredWithoutMessagesSentNestedInputSchema).optional()
}).strict();

export const MessageUncheckedUpdateWithoutReceiverInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateWithoutReceiverInput> = z.object({
  senderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyWithoutReceiverInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyWithoutReceiverInput> = z.object({
  senderId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  adId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserNotificationUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationUpdateWithoutUserInput> = z.object({
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserNotificationUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationUncheckedUpdateWithoutUserInput> = z.object({
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserNotificationUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.UserNotificationUncheckedUpdateManyWithoutUserInput> = z.object({
  type: z.union([ z.lazy(() => NotificationTypeSchema),z.lazy(() => EnumNotificationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  read: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportUpdateWithoutReporterInputSchema: z.ZodType<Prisma.ReportUpdateWithoutReporterInput> = z.object({
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutReportsNestedInputSchema).optional()
}).strict();

export const ReportUncheckedUpdateWithoutReporterInputSchema: z.ZodType<Prisma.ReportUncheckedUpdateWithoutReporterInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportUncheckedUpdateManyWithoutReporterInputSchema: z.ZodType<Prisma.ReportUncheckedUpdateManyWithoutReporterInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUpdateWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUpdateWithoutUserInput> = z.object({
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateWithoutUserInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutUserInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberCreateManyOrganizationInputSchema: z.ZodType<Prisma.MemberCreateManyOrganizationInput> = z.object({
  id: z.string(),
  userId: z.string(),
  role: z.string(),
  createdAt: z.coerce.date()
}).strict();

export const InvitationCreateManyOrganizationInputSchema: z.ZodType<Prisma.InvitationCreateManyOrganizationInput> = z.object({
  id: z.string(),
  email: z.string(),
  role: z.string().optional().nullable(),
  status: z.string(),
  expiresAt: z.coerce.date(),
  inviterId: z.string()
}).strict();

export const AdCreateManyOrgInputSchema: z.ZodType<Prisma.AdCreateManyOrgInput> = z.object({
  id: z.string().optional(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  categoryId: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AuditLogCreateManyOrgInputSchema: z.ZodType<Prisma.AuditLogCreateManyOrgInput> = z.object({
  id: z.string().optional(),
  userId: z.string().optional().nullable(),
  action: z.string(),
  resource: z.string().optional().nullable(),
  resourceId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const MemberUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUpdateWithoutOrganizationInput> = z.object({
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutMembersNestedInputSchema).optional()
}).strict();

export const MemberUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateWithoutOrganizationInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MemberUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.MemberUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUpdateWithoutOrganizationInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutInvitationsNestedInputSchema).optional()
}).strict();

export const InvitationUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateWithoutOrganizationInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const InvitationUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.InvitationUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  inviterId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdUpdateWithoutOrgInputSchema: z.ZodType<Prisma.AdUpdateWithoutOrgInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  category: z.lazy(() => CategoryUpdateOneWithoutAdsNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutOrgInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutOrgInput> = z.object({
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateManyWithoutOrgInputSchema: z.ZodType<Prisma.AdUncheckedUpdateManyWithoutOrgInput> = z.object({
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categoryId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUpdateWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogUpdateWithoutOrgInput> = z.object({
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneWithoutAuditLogsNestedInputSchema).optional()
}).strict();

export const AuditLogUncheckedUpdateWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateWithoutOrgInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuditLogUncheckedUpdateManyWithoutOrgInputSchema: z.ZodType<Prisma.AuditLogUncheckedUpdateManyWithoutOrgInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resource: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resourceId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentCreateManyAdInputSchema: z.ZodType<Prisma.PaymentCreateManyAdInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  type: z.lazy(() => PaymentTypeSchema),
  status: z.lazy(() => PaymentStatusSchema),
  amount: z.number(),
  sessionId: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional()
}).strict();

export const FavoriteCreateManyAdInputSchema: z.ZodType<Prisma.FavoriteCreateManyAdInput> = z.object({
  id: z.string().optional(),
  userId: z.string()
}).strict();

export const ReportCreateManyAdInputSchema: z.ZodType<Prisma.ReportCreateManyAdInput> = z.object({
  id: z.string().optional(),
  userId: z.string(),
  reason: z.string(),
  details: z.string().optional().nullable(),
  status: z.string().optional(),
  createdAt: z.coerce.date().optional()
}).strict();

export const AdRevisionCreateManyAdInputSchema: z.ZodType<Prisma.AdRevisionCreateManyAdInput> = z.object({
  id: z.string().optional(),
  version: z.number().int(),
  data: InputJsonValueSchema,
  createdAt: z.coerce.date().optional()
}).strict();

export const GeoHeatmapCreateManyAdInputSchema: z.ZodType<Prisma.GeoHeatmapCreateManyAdInput> = z.object({
  id: z.string().optional(),
  lat: z.number(),
  lng: z.number(),
  country: z.string().optional().nullable(),
  region: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ShareEventCreateManyAdInputSchema: z.ZodType<Prisma.ShareEventCreateManyAdInput> = z.object({
  id: z.string().optional(),
  platform: z.lazy(() => SharePlatformSchema),
  ipAddress: z.string().optional().nullable(),
  userAgent: z.string().optional().nullable(),
  sharedAt: z.coerce.date().optional()
}).strict();

export const AdMediaCreateManyAdInputSchema: z.ZodType<Prisma.AdMediaCreateManyAdInput> = z.object({
  id: z.string().optional(),
  mediaId: z.string(),
  order: z.number().int().optional()
}).strict();

export const PaymentUpdateWithoutAdInputSchema: z.ZodType<Prisma.PaymentUpdateWithoutAdInput> = z.object({
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutPaymentsNestedInputSchema).optional()
}).strict();

export const PaymentUncheckedUpdateWithoutAdInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateWithoutAdInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PaymentUncheckedUpdateManyWithoutAdInputSchema: z.ZodType<Prisma.PaymentUncheckedUpdateManyWithoutAdInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => PaymentTypeSchema),z.lazy(() => EnumPaymentTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => PaymentStatusSchema),z.lazy(() => EnumPaymentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  amount: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FavoriteUpdateWithoutAdInputSchema: z.ZodType<Prisma.FavoriteUpdateWithoutAdInput> = z.object({
  user: z.lazy(() => UserUpdateOneRequiredWithoutFavoritesNestedInputSchema).optional()
}).strict();

export const FavoriteUncheckedUpdateWithoutAdInputSchema: z.ZodType<Prisma.FavoriteUncheckedUpdateWithoutAdInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FavoriteUncheckedUpdateManyWithoutAdInputSchema: z.ZodType<Prisma.FavoriteUncheckedUpdateManyWithoutAdInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportUpdateWithoutAdInputSchema: z.ZodType<Prisma.ReportUpdateWithoutAdInput> = z.object({
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  reporter: z.lazy(() => UserUpdateOneRequiredWithoutReportsNestedInputSchema).optional()
}).strict();

export const ReportUncheckedUpdateWithoutAdInputSchema: z.ZodType<Prisma.ReportUncheckedUpdateWithoutAdInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ReportUncheckedUpdateManyWithoutAdInputSchema: z.ZodType<Prisma.ReportUncheckedUpdateManyWithoutAdInput> = z.object({
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  reason: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  details: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdRevisionUpdateWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionUpdateWithoutAdInput> = z.object({
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdRevisionUncheckedUpdateWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionUncheckedUpdateWithoutAdInput> = z.object({
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdRevisionUncheckedUpdateManyWithoutAdInputSchema: z.ZodType<Prisma.AdRevisionUncheckedUpdateManyWithoutAdInput> = z.object({
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GeoHeatmapUpdateWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapUpdateWithoutAdInput> = z.object({
  lat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lng: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GeoHeatmapUncheckedUpdateWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapUncheckedUpdateWithoutAdInput> = z.object({
  lat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lng: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const GeoHeatmapUncheckedUpdateManyWithoutAdInputSchema: z.ZodType<Prisma.GeoHeatmapUncheckedUpdateManyWithoutAdInput> = z.object({
  lat: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lng: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  country: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  region: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShareEventUpdateWithoutAdInputSchema: z.ZodType<Prisma.ShareEventUpdateWithoutAdInput> = z.object({
  platform: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => EnumSharePlatformFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShareEventUncheckedUpdateWithoutAdInputSchema: z.ZodType<Prisma.ShareEventUncheckedUpdateWithoutAdInput> = z.object({
  platform: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => EnumSharePlatformFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ShareEventUncheckedUpdateManyWithoutAdInputSchema: z.ZodType<Prisma.ShareEventUncheckedUpdateManyWithoutAdInput> = z.object({
  platform: z.union([ z.lazy(() => SharePlatformSchema),z.lazy(() => EnumSharePlatformFieldUpdateOperationsInputSchema) ]).optional(),
  ipAddress: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userAgent: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sharedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdMediaUpdateWithoutAdInputSchema: z.ZodType<Prisma.AdMediaUpdateWithoutAdInput> = z.object({
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  media: z.lazy(() => MediaUpdateOneRequiredWithoutAdsNestedInputSchema).optional()
}).strict();

export const AdMediaUncheckedUpdateWithoutAdInputSchema: z.ZodType<Prisma.AdMediaUncheckedUpdateWithoutAdInput> = z.object({
  mediaId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdMediaUncheckedUpdateManyWithoutAdInputSchema: z.ZodType<Prisma.AdMediaUncheckedUpdateManyWithoutAdInput> = z.object({
  mediaId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdCreateManyCategoryInputSchema: z.ZodType<Prisma.AdCreateManyCategoryInput> = z.object({
  id: z.string().optional(),
  orgId: z.string(),
  createdBy: z.string(),
  title: z.string(),
  description: z.string(),
  type: z.lazy(() => AdTypeSchema),
  price: z.number().optional().nullable(),
  published: z.boolean().optional(),
  isDraft: z.boolean().optional(),
  boosted: z.boolean().optional(),
  featured: z.boolean().optional(),
  boostExpiry: z.coerce.date().optional().nullable(),
  featureExpiry: z.coerce.date().optional().nullable(),
  status: z.lazy(() => AdStatusSchema).optional(),
  expiryDate: z.coerce.date().optional().nullable(),
  seoTitle: z.string().optional().nullable(),
  seoDescription: z.string().optional().nullable(),
  seoSlug: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => AdCreatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.string().optional().nullable(),
  brand: z.string().optional().nullable(),
  model: z.string().optional().nullable(),
  trimEdition: z.string().optional().nullable(),
  manufacturedYear: z.string().optional().nullable(),
  modelYear: z.string().optional().nullable(),
  mileage: z.number().optional().nullable(),
  engineCapacity: z.number().optional().nullable(),
  fuelType: z.lazy(() => FuelTypeSchema).optional().nullable(),
  transmission: z.lazy(() => TransmissionSchema).optional().nullable(),
  bodyType: z.lazy(() => BodyTypeSchema).optional().nullable(),
  bikeType: z.lazy(() => BikeTypeSchema).optional().nullable(),
  vehicleType: z.lazy(() => HeavyDutyVehicleTypeSchema).optional().nullable(),
  serviceType: z.string().optional().nullable(),
  partType: z.string().optional().nullable(),
  maintenanceType: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  phoneNumber: z.string().optional().nullable(),
  whatsappNumber: z.string().optional().nullable(),
  termsAndConditions: z.boolean().optional().nullable(),
  location: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  province: z.string().optional().nullable(),
  district: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  specialNote: z.string().optional().nullable(),
  metadata: InputJsonValueSchema.optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AdUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.AdUpdateWithoutCategoryInput> = z.object({
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  org: z.lazy(() => OrganizationUpdateOneRequiredWithoutAdsNestedInputSchema).optional(),
  creator: z.lazy(() => UserUpdateOneRequiredWithoutAdsCreatedNestedInputSchema).optional(),
  analytics: z.lazy(() => AdAnalyticsUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateWithoutCategoryInputSchema: z.ZodType<Prisma.AdUncheckedUpdateWithoutCategoryInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  analytics: z.lazy(() => AdAnalyticsUncheckedUpdateOneWithoutAdNestedInputSchema).optional(),
  payments: z.lazy(() => PaymentUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  favorites: z.lazy(() => FavoriteUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  reports: z.lazy(() => ReportUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  revisions: z.lazy(() => AdRevisionUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  geoViews: z.lazy(() => GeoHeatmapUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  shareEvents: z.lazy(() => ShareEventUncheckedUpdateManyWithoutAdNestedInputSchema).optional(),
  media: z.lazy(() => AdMediaUncheckedUpdateManyWithoutAdNestedInputSchema).optional()
}).strict();

export const AdUncheckedUpdateManyWithoutCategoryInputSchema: z.ZodType<Prisma.AdUncheckedUpdateManyWithoutCategoryInput> = z.object({
  orgId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdBy: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => AdTypeSchema),z.lazy(() => EnumAdTypeFieldUpdateOperationsInputSchema) ]).optional(),
  price: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  published: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  isDraft: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boosted: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  featured: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  boostExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  featureExpiry: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  status: z.union([ z.lazy(() => AdStatusSchema),z.lazy(() => EnumAdStatusFieldUpdateOperationsInputSchema) ]).optional(),
  expiryDate: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoTitle: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoDescription: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  seoSlug: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => AdUpdatetagsInputSchema),z.string().array() ]).optional(),
  condition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  brand: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  trimEdition: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manufacturedYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelYear: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  mileage: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  engineCapacity: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fuelType: z.union([ z.lazy(() => FuelTypeSchema),z.lazy(() => NullableEnumFuelTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  transmission: z.union([ z.lazy(() => TransmissionSchema),z.lazy(() => NullableEnumTransmissionFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bodyType: z.union([ z.lazy(() => BodyTypeSchema),z.lazy(() => NullableEnumBodyTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bikeType: z.union([ z.lazy(() => BikeTypeSchema),z.lazy(() => NullableEnumBikeTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vehicleType: z.union([ z.lazy(() => HeavyDutyVehicleTypeSchema),z.lazy(() => NullableEnumHeavyDutyVehicleTypeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  serviceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  partType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  maintenanceType: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  phoneNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  whatsappNumber: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  termsAndConditions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  location: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  province: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  district: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  city: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  specialNote: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ InputJsonValueSchema,InputJsonValueSchema ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdMediaCreateManyMediaInputSchema: z.ZodType<Prisma.AdMediaCreateManyMediaInput> = z.object({
  id: z.string().optional(),
  adId: z.string(),
  order: z.number().int().optional()
}).strict();

export const AdMediaUpdateWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaUpdateWithoutMediaInput> = z.object({
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ad: z.lazy(() => AdUpdateOneRequiredWithoutMediaNestedInputSchema).optional()
}).strict();

export const AdMediaUncheckedUpdateWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaUncheckedUpdateWithoutMediaInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdMediaUncheckedUpdateManyWithoutMediaInputSchema: z.ZodType<Prisma.AdMediaUncheckedUpdateManyWithoutMediaInput> = z.object({
  adId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  order: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const AccountFindFirstArgsSchema: z.ZodType<Prisma.AccountFindFirstArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountFindFirstOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindManyArgsSchema: z.ZodType<Prisma.AccountFindManyArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountFindUniqueArgsSchema: z.ZodType<Prisma.AccountFindUniqueArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountFindUniqueOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindFirstArgsSchema: z.ZodType<Prisma.VerificationFindFirstArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VerificationFindFirstOrThrowArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationFindManyArgsSchema: z.ZodType<Prisma.VerificationFindManyArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationScalarFieldEnumSchema,VerificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationAggregateArgsSchema: z.ZodType<Prisma.VerificationAggregateArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithRelationInputSchema.array(),VerificationOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationGroupByArgsSchema: z.ZodType<Prisma.VerificationGroupByArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  orderBy: z.union([ VerificationOrderByWithAggregationInputSchema.array(),VerificationOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationScalarFieldEnumSchema.array(),
  having: VerificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationFindUniqueArgsSchema: z.ZodType<Prisma.VerificationFindUniqueArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VerificationFindUniqueOrThrowArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFindFirstArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindFirstOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationFindManyArgsSchema: z.ZodType<Prisma.OrganizationFindManyArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const OrganizationFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const MemberFindFirstArgsSchema: z.ZodType<Prisma.MemberFindFirstArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MemberFindFirstOrThrowArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberFindManyArgsSchema: z.ZodType<Prisma.MemberFindManyArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MemberScalarFieldEnumSchema,MemberScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MemberAggregateArgsSchema: z.ZodType<Prisma.MemberAggregateArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithRelationInputSchema.array(),MemberOrderByWithRelationInputSchema ]).optional(),
  cursor: MemberWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberGroupByArgsSchema: z.ZodType<Prisma.MemberGroupByArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  orderBy: z.union([ MemberOrderByWithAggregationInputSchema.array(),MemberOrderByWithAggregationInputSchema ]).optional(),
  by: MemberScalarFieldEnumSchema.array(),
  having: MemberScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MemberFindUniqueArgsSchema: z.ZodType<Prisma.MemberFindUniqueArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MemberFindUniqueOrThrowArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindFirstArgsSchema: z.ZodType<Prisma.InvitationFindFirstArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindFirstOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationFindManyArgsSchema: z.ZodType<Prisma.InvitationFindManyArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InvitationScalarFieldEnumSchema,InvitationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InvitationAggregateArgsSchema: z.ZodType<Prisma.InvitationAggregateArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithRelationInputSchema.array(),InvitationOrderByWithRelationInputSchema ]).optional(),
  cursor: InvitationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationGroupByArgsSchema: z.ZodType<Prisma.InvitationGroupByArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  orderBy: z.union([ InvitationOrderByWithAggregationInputSchema.array(),InvitationOrderByWithAggregationInputSchema ]).optional(),
  by: InvitationScalarFieldEnumSchema.array(),
  having: InvitationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InvitationFindUniqueArgsSchema: z.ZodType<Prisma.InvitationFindUniqueArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InvitationFindUniqueOrThrowArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorFindFirstArgsSchema: z.ZodType<Prisma.TwoFactorFindFirstArgs> = z.object({
  select: TwoFactorSelectSchema.optional(),
  include: TwoFactorIncludeSchema.optional(),
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TwoFactorFindFirstOrThrowArgs> = z.object({
  select: TwoFactorSelectSchema.optional(),
  include: TwoFactorIncludeSchema.optional(),
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorFindManyArgsSchema: z.ZodType<Prisma.TwoFactorFindManyArgs> = z.object({
  select: TwoFactorSelectSchema.optional(),
  include: TwoFactorIncludeSchema.optional(),
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TwoFactorScalarFieldEnumSchema,TwoFactorScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TwoFactorAggregateArgsSchema: z.ZodType<Prisma.TwoFactorAggregateArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithRelationInputSchema.array(),TwoFactorOrderByWithRelationInputSchema ]).optional(),
  cursor: TwoFactorWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TwoFactorGroupByArgsSchema: z.ZodType<Prisma.TwoFactorGroupByArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  orderBy: z.union([ TwoFactorOrderByWithAggregationInputSchema.array(),TwoFactorOrderByWithAggregationInputSchema ]).optional(),
  by: TwoFactorScalarFieldEnumSchema.array(),
  having: TwoFactorScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TwoFactorFindUniqueArgsSchema: z.ZodType<Prisma.TwoFactorFindUniqueArgs> = z.object({
  select: TwoFactorSelectSchema.optional(),
  include: TwoFactorIncludeSchema.optional(),
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TwoFactorFindUniqueOrThrowArgs> = z.object({
  select: TwoFactorSelectSchema.optional(),
  include: TwoFactorIncludeSchema.optional(),
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TasksFindFirstArgsSchema: z.ZodType<Prisma.TasksFindFirstArgs> = z.object({
  select: TasksSelectSchema.optional(),
  where: TasksWhereInputSchema.optional(),
  orderBy: z.union([ TasksOrderByWithRelationInputSchema.array(),TasksOrderByWithRelationInputSchema ]).optional(),
  cursor: TasksWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TasksScalarFieldEnumSchema,TasksScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TasksFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TasksFindFirstOrThrowArgs> = z.object({
  select: TasksSelectSchema.optional(),
  where: TasksWhereInputSchema.optional(),
  orderBy: z.union([ TasksOrderByWithRelationInputSchema.array(),TasksOrderByWithRelationInputSchema ]).optional(),
  cursor: TasksWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TasksScalarFieldEnumSchema,TasksScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TasksFindManyArgsSchema: z.ZodType<Prisma.TasksFindManyArgs> = z.object({
  select: TasksSelectSchema.optional(),
  where: TasksWhereInputSchema.optional(),
  orderBy: z.union([ TasksOrderByWithRelationInputSchema.array(),TasksOrderByWithRelationInputSchema ]).optional(),
  cursor: TasksWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TasksScalarFieldEnumSchema,TasksScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TasksAggregateArgsSchema: z.ZodType<Prisma.TasksAggregateArgs> = z.object({
  where: TasksWhereInputSchema.optional(),
  orderBy: z.union([ TasksOrderByWithRelationInputSchema.array(),TasksOrderByWithRelationInputSchema ]).optional(),
  cursor: TasksWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TasksGroupByArgsSchema: z.ZodType<Prisma.TasksGroupByArgs> = z.object({
  where: TasksWhereInputSchema.optional(),
  orderBy: z.union([ TasksOrderByWithAggregationInputSchema.array(),TasksOrderByWithAggregationInputSchema ]).optional(),
  by: TasksScalarFieldEnumSchema.array(),
  having: TasksScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TasksFindUniqueArgsSchema: z.ZodType<Prisma.TasksFindUniqueArgs> = z.object({
  select: TasksSelectSchema.optional(),
  where: TasksWhereUniqueInputSchema,
}).strict() ;

export const TasksFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TasksFindUniqueOrThrowArgs> = z.object({
  select: TasksSelectSchema.optional(),
  where: TasksWhereUniqueInputSchema,
}).strict() ;

export const AdFindFirstArgsSchema: z.ZodType<Prisma.AdFindFirstArgs> = z.object({
  select: AdSelectSchema.optional(),
  include: AdIncludeSchema.optional(),
  where: AdWhereInputSchema.optional(),
  orderBy: z.union([ AdOrderByWithRelationInputSchema.array(),AdOrderByWithRelationInputSchema ]).optional(),
  cursor: AdWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdScalarFieldEnumSchema,AdScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AdFindFirstOrThrowArgs> = z.object({
  select: AdSelectSchema.optional(),
  include: AdIncludeSchema.optional(),
  where: AdWhereInputSchema.optional(),
  orderBy: z.union([ AdOrderByWithRelationInputSchema.array(),AdOrderByWithRelationInputSchema ]).optional(),
  cursor: AdWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdScalarFieldEnumSchema,AdScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdFindManyArgsSchema: z.ZodType<Prisma.AdFindManyArgs> = z.object({
  select: AdSelectSchema.optional(),
  include: AdIncludeSchema.optional(),
  where: AdWhereInputSchema.optional(),
  orderBy: z.union([ AdOrderByWithRelationInputSchema.array(),AdOrderByWithRelationInputSchema ]).optional(),
  cursor: AdWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdScalarFieldEnumSchema,AdScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdAggregateArgsSchema: z.ZodType<Prisma.AdAggregateArgs> = z.object({
  where: AdWhereInputSchema.optional(),
  orderBy: z.union([ AdOrderByWithRelationInputSchema.array(),AdOrderByWithRelationInputSchema ]).optional(),
  cursor: AdWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdGroupByArgsSchema: z.ZodType<Prisma.AdGroupByArgs> = z.object({
  where: AdWhereInputSchema.optional(),
  orderBy: z.union([ AdOrderByWithAggregationInputSchema.array(),AdOrderByWithAggregationInputSchema ]).optional(),
  by: AdScalarFieldEnumSchema.array(),
  having: AdScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdFindUniqueArgsSchema: z.ZodType<Prisma.AdFindUniqueArgs> = z.object({
  select: AdSelectSchema.optional(),
  include: AdIncludeSchema.optional(),
  where: AdWhereUniqueInputSchema,
}).strict() ;

export const AdFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AdFindUniqueOrThrowArgs> = z.object({
  select: AdSelectSchema.optional(),
  include: AdIncludeSchema.optional(),
  where: AdWhereUniqueInputSchema,
}).strict() ;

export const AdRevisionFindFirstArgsSchema: z.ZodType<Prisma.AdRevisionFindFirstArgs> = z.object({
  select: AdRevisionSelectSchema.optional(),
  include: AdRevisionIncludeSchema.optional(),
  where: AdRevisionWhereInputSchema.optional(),
  orderBy: z.union([ AdRevisionOrderByWithRelationInputSchema.array(),AdRevisionOrderByWithRelationInputSchema ]).optional(),
  cursor: AdRevisionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdRevisionScalarFieldEnumSchema,AdRevisionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdRevisionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AdRevisionFindFirstOrThrowArgs> = z.object({
  select: AdRevisionSelectSchema.optional(),
  include: AdRevisionIncludeSchema.optional(),
  where: AdRevisionWhereInputSchema.optional(),
  orderBy: z.union([ AdRevisionOrderByWithRelationInputSchema.array(),AdRevisionOrderByWithRelationInputSchema ]).optional(),
  cursor: AdRevisionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdRevisionScalarFieldEnumSchema,AdRevisionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdRevisionFindManyArgsSchema: z.ZodType<Prisma.AdRevisionFindManyArgs> = z.object({
  select: AdRevisionSelectSchema.optional(),
  include: AdRevisionIncludeSchema.optional(),
  where: AdRevisionWhereInputSchema.optional(),
  orderBy: z.union([ AdRevisionOrderByWithRelationInputSchema.array(),AdRevisionOrderByWithRelationInputSchema ]).optional(),
  cursor: AdRevisionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdRevisionScalarFieldEnumSchema,AdRevisionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdRevisionAggregateArgsSchema: z.ZodType<Prisma.AdRevisionAggregateArgs> = z.object({
  where: AdRevisionWhereInputSchema.optional(),
  orderBy: z.union([ AdRevisionOrderByWithRelationInputSchema.array(),AdRevisionOrderByWithRelationInputSchema ]).optional(),
  cursor: AdRevisionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdRevisionGroupByArgsSchema: z.ZodType<Prisma.AdRevisionGroupByArgs> = z.object({
  where: AdRevisionWhereInputSchema.optional(),
  orderBy: z.union([ AdRevisionOrderByWithAggregationInputSchema.array(),AdRevisionOrderByWithAggregationInputSchema ]).optional(),
  by: AdRevisionScalarFieldEnumSchema.array(),
  having: AdRevisionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdRevisionFindUniqueArgsSchema: z.ZodType<Prisma.AdRevisionFindUniqueArgs> = z.object({
  select: AdRevisionSelectSchema.optional(),
  include: AdRevisionIncludeSchema.optional(),
  where: AdRevisionWhereUniqueInputSchema,
}).strict() ;

export const AdRevisionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AdRevisionFindUniqueOrThrowArgs> = z.object({
  select: AdRevisionSelectSchema.optional(),
  include: AdRevisionIncludeSchema.optional(),
  where: AdRevisionWhereUniqueInputSchema,
}).strict() ;

export const AdAnalyticsFindFirstArgsSchema: z.ZodType<Prisma.AdAnalyticsFindFirstArgs> = z.object({
  select: AdAnalyticsSelectSchema.optional(),
  include: AdAnalyticsIncludeSchema.optional(),
  where: AdAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ AdAnalyticsOrderByWithRelationInputSchema.array(),AdAnalyticsOrderByWithRelationInputSchema ]).optional(),
  cursor: AdAnalyticsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdAnalyticsScalarFieldEnumSchema,AdAnalyticsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdAnalyticsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AdAnalyticsFindFirstOrThrowArgs> = z.object({
  select: AdAnalyticsSelectSchema.optional(),
  include: AdAnalyticsIncludeSchema.optional(),
  where: AdAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ AdAnalyticsOrderByWithRelationInputSchema.array(),AdAnalyticsOrderByWithRelationInputSchema ]).optional(),
  cursor: AdAnalyticsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdAnalyticsScalarFieldEnumSchema,AdAnalyticsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdAnalyticsFindManyArgsSchema: z.ZodType<Prisma.AdAnalyticsFindManyArgs> = z.object({
  select: AdAnalyticsSelectSchema.optional(),
  include: AdAnalyticsIncludeSchema.optional(),
  where: AdAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ AdAnalyticsOrderByWithRelationInputSchema.array(),AdAnalyticsOrderByWithRelationInputSchema ]).optional(),
  cursor: AdAnalyticsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdAnalyticsScalarFieldEnumSchema,AdAnalyticsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdAnalyticsAggregateArgsSchema: z.ZodType<Prisma.AdAnalyticsAggregateArgs> = z.object({
  where: AdAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ AdAnalyticsOrderByWithRelationInputSchema.array(),AdAnalyticsOrderByWithRelationInputSchema ]).optional(),
  cursor: AdAnalyticsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdAnalyticsGroupByArgsSchema: z.ZodType<Prisma.AdAnalyticsGroupByArgs> = z.object({
  where: AdAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ AdAnalyticsOrderByWithAggregationInputSchema.array(),AdAnalyticsOrderByWithAggregationInputSchema ]).optional(),
  by: AdAnalyticsScalarFieldEnumSchema.array(),
  having: AdAnalyticsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdAnalyticsFindUniqueArgsSchema: z.ZodType<Prisma.AdAnalyticsFindUniqueArgs> = z.object({
  select: AdAnalyticsSelectSchema.optional(),
  include: AdAnalyticsIncludeSchema.optional(),
  where: AdAnalyticsWhereUniqueInputSchema,
}).strict() ;

export const AdAnalyticsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AdAnalyticsFindUniqueOrThrowArgs> = z.object({
  select: AdAnalyticsSelectSchema.optional(),
  include: AdAnalyticsIncludeSchema.optional(),
  where: AdAnalyticsWhereUniqueInputSchema,
}).strict() ;

export const CategoryFindFirstArgsSchema: z.ZodType<Prisma.CategoryFindFirstArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CategoryFindFirstOrThrowArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryFindManyArgsSchema: z.ZodType<Prisma.CategoryFindManyArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CategoryScalarFieldEnumSchema,CategoryScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CategoryAggregateArgsSchema: z.ZodType<Prisma.CategoryAggregateArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithRelationInputSchema.array(),CategoryOrderByWithRelationInputSchema ]).optional(),
  cursor: CategoryWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CategoryGroupByArgsSchema: z.ZodType<Prisma.CategoryGroupByArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  orderBy: z.union([ CategoryOrderByWithAggregationInputSchema.array(),CategoryOrderByWithAggregationInputSchema ]).optional(),
  by: CategoryScalarFieldEnumSchema.array(),
  having: CategoryScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CategoryFindUniqueArgsSchema: z.ZodType<Prisma.CategoryFindUniqueArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CategoryFindUniqueOrThrowArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const TagFindFirstArgsSchema: z.ZodType<Prisma.TagFindFirstArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TagFindFirstOrThrowArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagFindManyArgsSchema: z.ZodType<Prisma.TagFindManyArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TagScalarFieldEnumSchema,TagScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const TagAggregateArgsSchema: z.ZodType<Prisma.TagAggregateArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithRelationInputSchema.array(),TagOrderByWithRelationInputSchema ]).optional(),
  cursor: TagWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagGroupByArgsSchema: z.ZodType<Prisma.TagGroupByArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  orderBy: z.union([ TagOrderByWithAggregationInputSchema.array(),TagOrderByWithAggregationInputSchema ]).optional(),
  by: TagScalarFieldEnumSchema.array(),
  having: TagScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const TagFindUniqueArgsSchema: z.ZodType<Prisma.TagFindUniqueArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TagFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TagFindUniqueOrThrowArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const MediaFindFirstArgsSchema: z.ZodType<Prisma.MediaFindFirstArgs> = z.object({
  select: MediaSelectSchema.optional(),
  include: MediaIncludeSchema.optional(),
  where: MediaWhereInputSchema.optional(),
  orderBy: z.union([ MediaOrderByWithRelationInputSchema.array(),MediaOrderByWithRelationInputSchema ]).optional(),
  cursor: MediaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MediaScalarFieldEnumSchema,MediaScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MediaFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MediaFindFirstOrThrowArgs> = z.object({
  select: MediaSelectSchema.optional(),
  include: MediaIncludeSchema.optional(),
  where: MediaWhereInputSchema.optional(),
  orderBy: z.union([ MediaOrderByWithRelationInputSchema.array(),MediaOrderByWithRelationInputSchema ]).optional(),
  cursor: MediaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MediaScalarFieldEnumSchema,MediaScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MediaFindManyArgsSchema: z.ZodType<Prisma.MediaFindManyArgs> = z.object({
  select: MediaSelectSchema.optional(),
  include: MediaIncludeSchema.optional(),
  where: MediaWhereInputSchema.optional(),
  orderBy: z.union([ MediaOrderByWithRelationInputSchema.array(),MediaOrderByWithRelationInputSchema ]).optional(),
  cursor: MediaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MediaScalarFieldEnumSchema,MediaScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MediaAggregateArgsSchema: z.ZodType<Prisma.MediaAggregateArgs> = z.object({
  where: MediaWhereInputSchema.optional(),
  orderBy: z.union([ MediaOrderByWithRelationInputSchema.array(),MediaOrderByWithRelationInputSchema ]).optional(),
  cursor: MediaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MediaGroupByArgsSchema: z.ZodType<Prisma.MediaGroupByArgs> = z.object({
  where: MediaWhereInputSchema.optional(),
  orderBy: z.union([ MediaOrderByWithAggregationInputSchema.array(),MediaOrderByWithAggregationInputSchema ]).optional(),
  by: MediaScalarFieldEnumSchema.array(),
  having: MediaScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MediaFindUniqueArgsSchema: z.ZodType<Prisma.MediaFindUniqueArgs> = z.object({
  select: MediaSelectSchema.optional(),
  include: MediaIncludeSchema.optional(),
  where: MediaWhereUniqueInputSchema,
}).strict() ;

export const MediaFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MediaFindUniqueOrThrowArgs> = z.object({
  select: MediaSelectSchema.optional(),
  include: MediaIncludeSchema.optional(),
  where: MediaWhereUniqueInputSchema,
}).strict() ;

export const PaymentFindFirstArgsSchema: z.ZodType<Prisma.PaymentFindFirstArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithRelationInputSchema.array(),PaymentOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PaymentScalarFieldEnumSchema,PaymentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PaymentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PaymentFindFirstOrThrowArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithRelationInputSchema.array(),PaymentOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PaymentScalarFieldEnumSchema,PaymentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PaymentFindManyArgsSchema: z.ZodType<Prisma.PaymentFindManyArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithRelationInputSchema.array(),PaymentOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PaymentScalarFieldEnumSchema,PaymentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PaymentAggregateArgsSchema: z.ZodType<Prisma.PaymentAggregateArgs> = z.object({
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithRelationInputSchema.array(),PaymentOrderByWithRelationInputSchema ]).optional(),
  cursor: PaymentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PaymentGroupByArgsSchema: z.ZodType<Prisma.PaymentGroupByArgs> = z.object({
  where: PaymentWhereInputSchema.optional(),
  orderBy: z.union([ PaymentOrderByWithAggregationInputSchema.array(),PaymentOrderByWithAggregationInputSchema ]).optional(),
  by: PaymentScalarFieldEnumSchema.array(),
  having: PaymentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PaymentFindUniqueArgsSchema: z.ZodType<Prisma.PaymentFindUniqueArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereUniqueInputSchema,
}).strict() ;

export const PaymentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PaymentFindUniqueOrThrowArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereUniqueInputSchema,
}).strict() ;

export const FavoriteFindFirstArgsSchema: z.ZodType<Prisma.FavoriteFindFirstArgs> = z.object({
  select: FavoriteSelectSchema.optional(),
  include: FavoriteIncludeSchema.optional(),
  where: FavoriteWhereInputSchema.optional(),
  orderBy: z.union([ FavoriteOrderByWithRelationInputSchema.array(),FavoriteOrderByWithRelationInputSchema ]).optional(),
  cursor: FavoriteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FavoriteScalarFieldEnumSchema,FavoriteScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FavoriteFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FavoriteFindFirstOrThrowArgs> = z.object({
  select: FavoriteSelectSchema.optional(),
  include: FavoriteIncludeSchema.optional(),
  where: FavoriteWhereInputSchema.optional(),
  orderBy: z.union([ FavoriteOrderByWithRelationInputSchema.array(),FavoriteOrderByWithRelationInputSchema ]).optional(),
  cursor: FavoriteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FavoriteScalarFieldEnumSchema,FavoriteScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FavoriteFindManyArgsSchema: z.ZodType<Prisma.FavoriteFindManyArgs> = z.object({
  select: FavoriteSelectSchema.optional(),
  include: FavoriteIncludeSchema.optional(),
  where: FavoriteWhereInputSchema.optional(),
  orderBy: z.union([ FavoriteOrderByWithRelationInputSchema.array(),FavoriteOrderByWithRelationInputSchema ]).optional(),
  cursor: FavoriteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FavoriteScalarFieldEnumSchema,FavoriteScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FavoriteAggregateArgsSchema: z.ZodType<Prisma.FavoriteAggregateArgs> = z.object({
  where: FavoriteWhereInputSchema.optional(),
  orderBy: z.union([ FavoriteOrderByWithRelationInputSchema.array(),FavoriteOrderByWithRelationInputSchema ]).optional(),
  cursor: FavoriteWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FavoriteGroupByArgsSchema: z.ZodType<Prisma.FavoriteGroupByArgs> = z.object({
  where: FavoriteWhereInputSchema.optional(),
  orderBy: z.union([ FavoriteOrderByWithAggregationInputSchema.array(),FavoriteOrderByWithAggregationInputSchema ]).optional(),
  by: FavoriteScalarFieldEnumSchema.array(),
  having: FavoriteScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FavoriteFindUniqueArgsSchema: z.ZodType<Prisma.FavoriteFindUniqueArgs> = z.object({
  select: FavoriteSelectSchema.optional(),
  include: FavoriteIncludeSchema.optional(),
  where: FavoriteWhereUniqueInputSchema,
}).strict() ;

export const FavoriteFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FavoriteFindUniqueOrThrowArgs> = z.object({
  select: FavoriteSelectSchema.optional(),
  include: FavoriteIncludeSchema.optional(),
  where: FavoriteWhereUniqueInputSchema,
}).strict() ;

export const SavedSearchFindFirstArgsSchema: z.ZodType<Prisma.SavedSearchFindFirstArgs> = z.object({
  select: SavedSearchSelectSchema.optional(),
  include: SavedSearchIncludeSchema.optional(),
  where: SavedSearchWhereInputSchema.optional(),
  orderBy: z.union([ SavedSearchOrderByWithRelationInputSchema.array(),SavedSearchOrderByWithRelationInputSchema ]).optional(),
  cursor: SavedSearchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SavedSearchScalarFieldEnumSchema,SavedSearchScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SavedSearchFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SavedSearchFindFirstOrThrowArgs> = z.object({
  select: SavedSearchSelectSchema.optional(),
  include: SavedSearchIncludeSchema.optional(),
  where: SavedSearchWhereInputSchema.optional(),
  orderBy: z.union([ SavedSearchOrderByWithRelationInputSchema.array(),SavedSearchOrderByWithRelationInputSchema ]).optional(),
  cursor: SavedSearchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SavedSearchScalarFieldEnumSchema,SavedSearchScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SavedSearchFindManyArgsSchema: z.ZodType<Prisma.SavedSearchFindManyArgs> = z.object({
  select: SavedSearchSelectSchema.optional(),
  include: SavedSearchIncludeSchema.optional(),
  where: SavedSearchWhereInputSchema.optional(),
  orderBy: z.union([ SavedSearchOrderByWithRelationInputSchema.array(),SavedSearchOrderByWithRelationInputSchema ]).optional(),
  cursor: SavedSearchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SavedSearchScalarFieldEnumSchema,SavedSearchScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SavedSearchAggregateArgsSchema: z.ZodType<Prisma.SavedSearchAggregateArgs> = z.object({
  where: SavedSearchWhereInputSchema.optional(),
  orderBy: z.union([ SavedSearchOrderByWithRelationInputSchema.array(),SavedSearchOrderByWithRelationInputSchema ]).optional(),
  cursor: SavedSearchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SavedSearchGroupByArgsSchema: z.ZodType<Prisma.SavedSearchGroupByArgs> = z.object({
  where: SavedSearchWhereInputSchema.optional(),
  orderBy: z.union([ SavedSearchOrderByWithAggregationInputSchema.array(),SavedSearchOrderByWithAggregationInputSchema ]).optional(),
  by: SavedSearchScalarFieldEnumSchema.array(),
  having: SavedSearchScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SavedSearchFindUniqueArgsSchema: z.ZodType<Prisma.SavedSearchFindUniqueArgs> = z.object({
  select: SavedSearchSelectSchema.optional(),
  include: SavedSearchIncludeSchema.optional(),
  where: SavedSearchWhereUniqueInputSchema,
}).strict() ;

export const SavedSearchFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SavedSearchFindUniqueOrThrowArgs> = z.object({
  select: SavedSearchSelectSchema.optional(),
  include: SavedSearchIncludeSchema.optional(),
  where: SavedSearchWhereUniqueInputSchema,
}).strict() ;

export const GeoHeatmapFindFirstArgsSchema: z.ZodType<Prisma.GeoHeatmapFindFirstArgs> = z.object({
  select: GeoHeatmapSelectSchema.optional(),
  include: GeoHeatmapIncludeSchema.optional(),
  where: GeoHeatmapWhereInputSchema.optional(),
  orderBy: z.union([ GeoHeatmapOrderByWithRelationInputSchema.array(),GeoHeatmapOrderByWithRelationInputSchema ]).optional(),
  cursor: GeoHeatmapWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GeoHeatmapScalarFieldEnumSchema,GeoHeatmapScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GeoHeatmapFindFirstOrThrowArgsSchema: z.ZodType<Prisma.GeoHeatmapFindFirstOrThrowArgs> = z.object({
  select: GeoHeatmapSelectSchema.optional(),
  include: GeoHeatmapIncludeSchema.optional(),
  where: GeoHeatmapWhereInputSchema.optional(),
  orderBy: z.union([ GeoHeatmapOrderByWithRelationInputSchema.array(),GeoHeatmapOrderByWithRelationInputSchema ]).optional(),
  cursor: GeoHeatmapWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GeoHeatmapScalarFieldEnumSchema,GeoHeatmapScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GeoHeatmapFindManyArgsSchema: z.ZodType<Prisma.GeoHeatmapFindManyArgs> = z.object({
  select: GeoHeatmapSelectSchema.optional(),
  include: GeoHeatmapIncludeSchema.optional(),
  where: GeoHeatmapWhereInputSchema.optional(),
  orderBy: z.union([ GeoHeatmapOrderByWithRelationInputSchema.array(),GeoHeatmapOrderByWithRelationInputSchema ]).optional(),
  cursor: GeoHeatmapWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ GeoHeatmapScalarFieldEnumSchema,GeoHeatmapScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const GeoHeatmapAggregateArgsSchema: z.ZodType<Prisma.GeoHeatmapAggregateArgs> = z.object({
  where: GeoHeatmapWhereInputSchema.optional(),
  orderBy: z.union([ GeoHeatmapOrderByWithRelationInputSchema.array(),GeoHeatmapOrderByWithRelationInputSchema ]).optional(),
  cursor: GeoHeatmapWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const GeoHeatmapGroupByArgsSchema: z.ZodType<Prisma.GeoHeatmapGroupByArgs> = z.object({
  where: GeoHeatmapWhereInputSchema.optional(),
  orderBy: z.union([ GeoHeatmapOrderByWithAggregationInputSchema.array(),GeoHeatmapOrderByWithAggregationInputSchema ]).optional(),
  by: GeoHeatmapScalarFieldEnumSchema.array(),
  having: GeoHeatmapScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const GeoHeatmapFindUniqueArgsSchema: z.ZodType<Prisma.GeoHeatmapFindUniqueArgs> = z.object({
  select: GeoHeatmapSelectSchema.optional(),
  include: GeoHeatmapIncludeSchema.optional(),
  where: GeoHeatmapWhereUniqueInputSchema,
}).strict() ;

export const GeoHeatmapFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.GeoHeatmapFindUniqueOrThrowArgs> = z.object({
  select: GeoHeatmapSelectSchema.optional(),
  include: GeoHeatmapIncludeSchema.optional(),
  where: GeoHeatmapWhereUniqueInputSchema,
}).strict() ;

export const MessageFindFirstArgsSchema: z.ZodType<Prisma.MessageFindFirstArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageScalarFieldEnumSchema,MessageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MessageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MessageFindFirstOrThrowArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageScalarFieldEnumSchema,MessageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MessageFindManyArgsSchema: z.ZodType<Prisma.MessageFindManyArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageScalarFieldEnumSchema,MessageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MessageAggregateArgsSchema: z.ZodType<Prisma.MessageAggregateArgs> = z.object({
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MessageGroupByArgsSchema: z.ZodType<Prisma.MessageGroupByArgs> = z.object({
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithAggregationInputSchema.array(),MessageOrderByWithAggregationInputSchema ]).optional(),
  by: MessageScalarFieldEnumSchema.array(),
  having: MessageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MessageFindUniqueArgsSchema: z.ZodType<Prisma.MessageFindUniqueArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
}).strict() ;

export const MessageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MessageFindUniqueOrThrowArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
}).strict() ;

export const UserNotificationFindFirstArgsSchema: z.ZodType<Prisma.UserNotificationFindFirstArgs> = z.object({
  select: UserNotificationSelectSchema.optional(),
  include: UserNotificationIncludeSchema.optional(),
  where: UserNotificationWhereInputSchema.optional(),
  orderBy: z.union([ UserNotificationOrderByWithRelationInputSchema.array(),UserNotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: UserNotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserNotificationScalarFieldEnumSchema,UserNotificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserNotificationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserNotificationFindFirstOrThrowArgs> = z.object({
  select: UserNotificationSelectSchema.optional(),
  include: UserNotificationIncludeSchema.optional(),
  where: UserNotificationWhereInputSchema.optional(),
  orderBy: z.union([ UserNotificationOrderByWithRelationInputSchema.array(),UserNotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: UserNotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserNotificationScalarFieldEnumSchema,UserNotificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserNotificationFindManyArgsSchema: z.ZodType<Prisma.UserNotificationFindManyArgs> = z.object({
  select: UserNotificationSelectSchema.optional(),
  include: UserNotificationIncludeSchema.optional(),
  where: UserNotificationWhereInputSchema.optional(),
  orderBy: z.union([ UserNotificationOrderByWithRelationInputSchema.array(),UserNotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: UserNotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserNotificationScalarFieldEnumSchema,UserNotificationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserNotificationAggregateArgsSchema: z.ZodType<Prisma.UserNotificationAggregateArgs> = z.object({
  where: UserNotificationWhereInputSchema.optional(),
  orderBy: z.union([ UserNotificationOrderByWithRelationInputSchema.array(),UserNotificationOrderByWithRelationInputSchema ]).optional(),
  cursor: UserNotificationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserNotificationGroupByArgsSchema: z.ZodType<Prisma.UserNotificationGroupByArgs> = z.object({
  where: UserNotificationWhereInputSchema.optional(),
  orderBy: z.union([ UserNotificationOrderByWithAggregationInputSchema.array(),UserNotificationOrderByWithAggregationInputSchema ]).optional(),
  by: UserNotificationScalarFieldEnumSchema.array(),
  having: UserNotificationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserNotificationFindUniqueArgsSchema: z.ZodType<Prisma.UserNotificationFindUniqueArgs> = z.object({
  select: UserNotificationSelectSchema.optional(),
  include: UserNotificationIncludeSchema.optional(),
  where: UserNotificationWhereUniqueInputSchema,
}).strict() ;

export const UserNotificationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserNotificationFindUniqueOrThrowArgs> = z.object({
  select: UserNotificationSelectSchema.optional(),
  include: UserNotificationIncludeSchema.optional(),
  where: UserNotificationWhereUniqueInputSchema,
}).strict() ;

export const ShareEventFindFirstArgsSchema: z.ZodType<Prisma.ShareEventFindFirstArgs> = z.object({
  select: ShareEventSelectSchema.optional(),
  include: ShareEventIncludeSchema.optional(),
  where: ShareEventWhereInputSchema.optional(),
  orderBy: z.union([ ShareEventOrderByWithRelationInputSchema.array(),ShareEventOrderByWithRelationInputSchema ]).optional(),
  cursor: ShareEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShareEventScalarFieldEnumSchema,ShareEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShareEventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ShareEventFindFirstOrThrowArgs> = z.object({
  select: ShareEventSelectSchema.optional(),
  include: ShareEventIncludeSchema.optional(),
  where: ShareEventWhereInputSchema.optional(),
  orderBy: z.union([ ShareEventOrderByWithRelationInputSchema.array(),ShareEventOrderByWithRelationInputSchema ]).optional(),
  cursor: ShareEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShareEventScalarFieldEnumSchema,ShareEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShareEventFindManyArgsSchema: z.ZodType<Prisma.ShareEventFindManyArgs> = z.object({
  select: ShareEventSelectSchema.optional(),
  include: ShareEventIncludeSchema.optional(),
  where: ShareEventWhereInputSchema.optional(),
  orderBy: z.union([ ShareEventOrderByWithRelationInputSchema.array(),ShareEventOrderByWithRelationInputSchema ]).optional(),
  cursor: ShareEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ShareEventScalarFieldEnumSchema,ShareEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ShareEventAggregateArgsSchema: z.ZodType<Prisma.ShareEventAggregateArgs> = z.object({
  where: ShareEventWhereInputSchema.optional(),
  orderBy: z.union([ ShareEventOrderByWithRelationInputSchema.array(),ShareEventOrderByWithRelationInputSchema ]).optional(),
  cursor: ShareEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShareEventGroupByArgsSchema: z.ZodType<Prisma.ShareEventGroupByArgs> = z.object({
  where: ShareEventWhereInputSchema.optional(),
  orderBy: z.union([ ShareEventOrderByWithAggregationInputSchema.array(),ShareEventOrderByWithAggregationInputSchema ]).optional(),
  by: ShareEventScalarFieldEnumSchema.array(),
  having: ShareEventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ShareEventFindUniqueArgsSchema: z.ZodType<Prisma.ShareEventFindUniqueArgs> = z.object({
  select: ShareEventSelectSchema.optional(),
  include: ShareEventIncludeSchema.optional(),
  where: ShareEventWhereUniqueInputSchema,
}).strict() ;

export const ShareEventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ShareEventFindUniqueOrThrowArgs> = z.object({
  select: ShareEventSelectSchema.optional(),
  include: ShareEventIncludeSchema.optional(),
  where: ShareEventWhereUniqueInputSchema,
}).strict() ;

export const ReportFindFirstArgsSchema: z.ZodType<Prisma.ReportFindFirstArgs> = z.object({
  select: ReportSelectSchema.optional(),
  include: ReportIncludeSchema.optional(),
  where: ReportWhereInputSchema.optional(),
  orderBy: z.union([ ReportOrderByWithRelationInputSchema.array(),ReportOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReportScalarFieldEnumSchema,ReportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReportFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ReportFindFirstOrThrowArgs> = z.object({
  select: ReportSelectSchema.optional(),
  include: ReportIncludeSchema.optional(),
  where: ReportWhereInputSchema.optional(),
  orderBy: z.union([ ReportOrderByWithRelationInputSchema.array(),ReportOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReportScalarFieldEnumSchema,ReportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReportFindManyArgsSchema: z.ZodType<Prisma.ReportFindManyArgs> = z.object({
  select: ReportSelectSchema.optional(),
  include: ReportIncludeSchema.optional(),
  where: ReportWhereInputSchema.optional(),
  orderBy: z.union([ ReportOrderByWithRelationInputSchema.array(),ReportOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ReportScalarFieldEnumSchema,ReportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ReportAggregateArgsSchema: z.ZodType<Prisma.ReportAggregateArgs> = z.object({
  where: ReportWhereInputSchema.optional(),
  orderBy: z.union([ ReportOrderByWithRelationInputSchema.array(),ReportOrderByWithRelationInputSchema ]).optional(),
  cursor: ReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReportGroupByArgsSchema: z.ZodType<Prisma.ReportGroupByArgs> = z.object({
  where: ReportWhereInputSchema.optional(),
  orderBy: z.union([ ReportOrderByWithAggregationInputSchema.array(),ReportOrderByWithAggregationInputSchema ]).optional(),
  by: ReportScalarFieldEnumSchema.array(),
  having: ReportScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ReportFindUniqueArgsSchema: z.ZodType<Prisma.ReportFindUniqueArgs> = z.object({
  select: ReportSelectSchema.optional(),
  include: ReportIncludeSchema.optional(),
  where: ReportWhereUniqueInputSchema,
}).strict() ;

export const ReportFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ReportFindUniqueOrThrowArgs> = z.object({
  select: ReportSelectSchema.optional(),
  include: ReportIncludeSchema.optional(),
  where: ReportWhereUniqueInputSchema,
}).strict() ;

export const AuditLogFindFirstArgsSchema: z.ZodType<Prisma.AuditLogFindFirstArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AuditLogFindFirstOrThrowArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogFindManyArgsSchema: z.ZodType<Prisma.AuditLogFindManyArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuditLogScalarFieldEnumSchema,AuditLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuditLogAggregateArgsSchema: z.ZodType<Prisma.AuditLogAggregateArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithRelationInputSchema.array(),AuditLogOrderByWithRelationInputSchema ]).optional(),
  cursor: AuditLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuditLogGroupByArgsSchema: z.ZodType<Prisma.AuditLogGroupByArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  orderBy: z.union([ AuditLogOrderByWithAggregationInputSchema.array(),AuditLogOrderByWithAggregationInputSchema ]).optional(),
  by: AuditLogScalarFieldEnumSchema.array(),
  having: AuditLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuditLogFindUniqueArgsSchema: z.ZodType<Prisma.AuditLogFindUniqueArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AuditLogFindUniqueOrThrowArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AdMediaFindFirstArgsSchema: z.ZodType<Prisma.AdMediaFindFirstArgs> = z.object({
  select: AdMediaSelectSchema.optional(),
  include: AdMediaIncludeSchema.optional(),
  where: AdMediaWhereInputSchema.optional(),
  orderBy: z.union([ AdMediaOrderByWithRelationInputSchema.array(),AdMediaOrderByWithRelationInputSchema ]).optional(),
  cursor: AdMediaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdMediaScalarFieldEnumSchema,AdMediaScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdMediaFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AdMediaFindFirstOrThrowArgs> = z.object({
  select: AdMediaSelectSchema.optional(),
  include: AdMediaIncludeSchema.optional(),
  where: AdMediaWhereInputSchema.optional(),
  orderBy: z.union([ AdMediaOrderByWithRelationInputSchema.array(),AdMediaOrderByWithRelationInputSchema ]).optional(),
  cursor: AdMediaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdMediaScalarFieldEnumSchema,AdMediaScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdMediaFindManyArgsSchema: z.ZodType<Prisma.AdMediaFindManyArgs> = z.object({
  select: AdMediaSelectSchema.optional(),
  include: AdMediaIncludeSchema.optional(),
  where: AdMediaWhereInputSchema.optional(),
  orderBy: z.union([ AdMediaOrderByWithRelationInputSchema.array(),AdMediaOrderByWithRelationInputSchema ]).optional(),
  cursor: AdMediaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdMediaScalarFieldEnumSchema,AdMediaScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdMediaAggregateArgsSchema: z.ZodType<Prisma.AdMediaAggregateArgs> = z.object({
  where: AdMediaWhereInputSchema.optional(),
  orderBy: z.union([ AdMediaOrderByWithRelationInputSchema.array(),AdMediaOrderByWithRelationInputSchema ]).optional(),
  cursor: AdMediaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdMediaGroupByArgsSchema: z.ZodType<Prisma.AdMediaGroupByArgs> = z.object({
  where: AdMediaWhereInputSchema.optional(),
  orderBy: z.union([ AdMediaOrderByWithAggregationInputSchema.array(),AdMediaOrderByWithAggregationInputSchema ]).optional(),
  by: AdMediaScalarFieldEnumSchema.array(),
  having: AdMediaScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdMediaFindUniqueArgsSchema: z.ZodType<Prisma.AdMediaFindUniqueArgs> = z.object({
  select: AdMediaSelectSchema.optional(),
  include: AdMediaIncludeSchema.optional(),
  where: AdMediaWhereUniqueInputSchema,
}).strict() ;

export const AdMediaFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AdMediaFindUniqueOrThrowArgs> = z.object({
  select: AdMediaSelectSchema.optional(),
  include: AdMediaIncludeSchema.optional(),
  where: AdMediaWhereUniqueInputSchema,
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountCreateArgsSchema: z.ZodType<Prisma.AccountCreateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
}).strict() ;

export const AccountUpsertArgsSchema: z.ZodType<Prisma.AccountUpsertArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
}).strict() ;

export const AccountDeleteArgsSchema: z.ZodType<Prisma.AccountDeleteArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateArgsSchema: z.ZodType<Prisma.AccountUpdateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationCreateArgsSchema: z.ZodType<Prisma.VerificationCreateArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  data: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
}).strict() ;

export const VerificationUpsertArgsSchema: z.ZodType<Prisma.VerificationUpsertArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema,
  create: z.union([ VerificationCreateInputSchema,VerificationUncheckedCreateInputSchema ]),
  update: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
}).strict() ;

export const VerificationCreateManyArgsSchema: z.ZodType<Prisma.VerificationCreateManyArgs> = z.object({
  data: z.union([ VerificationCreateManyInputSchema,VerificationCreateManyInputSchema.array() ]),
}).strict() ;

export const VerificationDeleteArgsSchema: z.ZodType<Prisma.VerificationDeleteArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateArgsSchema: z.ZodType<Prisma.VerificationUpdateArgs> = z.object({
  select: VerificationSelectSchema.optional(),
  data: z.union([ VerificationUpdateInputSchema,VerificationUncheckedUpdateInputSchema ]),
  where: VerificationWhereUniqueInputSchema,
}).strict() ;

export const VerificationUpdateManyArgsSchema: z.ZodType<Prisma.VerificationUpdateManyArgs> = z.object({
  data: z.union([ VerificationUpdateManyMutationInputSchema,VerificationUncheckedUpdateManyInputSchema ]),
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const VerificationDeleteManyArgsSchema: z.ZodType<Prisma.VerificationDeleteManyArgs> = z.object({
  where: VerificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationCreateArgsSchema: z.ZodType<Prisma.OrganizationCreateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict() ;

export const OrganizationUpsertArgsSchema: z.ZodType<Prisma.OrganizationUpsertArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict() ;

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
}).strict() ;

export const OrganizationDeleteArgsSchema: z.ZodType<Prisma.OrganizationDeleteArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateArgsSchema: z.ZodType<Prisma.OrganizationUpdateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict() ;

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberCreateArgsSchema: z.ZodType<Prisma.MemberCreateArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  data: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
}).strict() ;

export const MemberUpsertArgsSchema: z.ZodType<Prisma.MemberUpsertArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereUniqueInputSchema,
  create: z.union([ MemberCreateInputSchema,MemberUncheckedCreateInputSchema ]),
  update: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
}).strict() ;

export const MemberCreateManyArgsSchema: z.ZodType<Prisma.MemberCreateManyArgs> = z.object({
  data: z.union([ MemberCreateManyInputSchema,MemberCreateManyInputSchema.array() ]),
}).strict() ;

export const MemberDeleteArgsSchema: z.ZodType<Prisma.MemberDeleteArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberUpdateArgsSchema: z.ZodType<Prisma.MemberUpdateArgs> = z.object({
  select: MemberSelectSchema.optional(),
  include: MemberIncludeSchema.optional(),
  data: z.union([ MemberUpdateInputSchema,MemberUncheckedUpdateInputSchema ]),
  where: MemberWhereUniqueInputSchema,
}).strict() ;

export const MemberUpdateManyArgsSchema: z.ZodType<Prisma.MemberUpdateManyArgs> = z.object({
  data: z.union([ MemberUpdateManyMutationInputSchema,MemberUncheckedUpdateManyInputSchema ]),
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MemberDeleteManyArgsSchema: z.ZodType<Prisma.MemberDeleteManyArgs> = z.object({
  where: MemberWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationCreateArgsSchema: z.ZodType<Prisma.InvitationCreateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
}).strict() ;

export const InvitationUpsertArgsSchema: z.ZodType<Prisma.InvitationUpsertArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
  create: z.union([ InvitationCreateInputSchema,InvitationUncheckedCreateInputSchema ]),
  update: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
}).strict() ;

export const InvitationCreateManyArgsSchema: z.ZodType<Prisma.InvitationCreateManyArgs> = z.object({
  data: z.union([ InvitationCreateManyInputSchema,InvitationCreateManyInputSchema.array() ]),
}).strict() ;

export const InvitationDeleteArgsSchema: z.ZodType<Prisma.InvitationDeleteArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateArgsSchema: z.ZodType<Prisma.InvitationUpdateArgs> = z.object({
  select: InvitationSelectSchema.optional(),
  include: InvitationIncludeSchema.optional(),
  data: z.union([ InvitationUpdateInputSchema,InvitationUncheckedUpdateInputSchema ]),
  where: InvitationWhereUniqueInputSchema,
}).strict() ;

export const InvitationUpdateManyArgsSchema: z.ZodType<Prisma.InvitationUpdateManyArgs> = z.object({
  data: z.union([ InvitationUpdateManyMutationInputSchema,InvitationUncheckedUpdateManyInputSchema ]),
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const InvitationDeleteManyArgsSchema: z.ZodType<Prisma.InvitationDeleteManyArgs> = z.object({
  where: InvitationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorCreateArgsSchema: z.ZodType<Prisma.TwoFactorCreateArgs> = z.object({
  select: TwoFactorSelectSchema.optional(),
  include: TwoFactorIncludeSchema.optional(),
  data: z.union([ TwoFactorCreateInputSchema,TwoFactorUncheckedCreateInputSchema ]),
}).strict() ;

export const TwoFactorUpsertArgsSchema: z.ZodType<Prisma.TwoFactorUpsertArgs> = z.object({
  select: TwoFactorSelectSchema.optional(),
  include: TwoFactorIncludeSchema.optional(),
  where: TwoFactorWhereUniqueInputSchema,
  create: z.union([ TwoFactorCreateInputSchema,TwoFactorUncheckedCreateInputSchema ]),
  update: z.union([ TwoFactorUpdateInputSchema,TwoFactorUncheckedUpdateInputSchema ]),
}).strict() ;

export const TwoFactorCreateManyArgsSchema: z.ZodType<Prisma.TwoFactorCreateManyArgs> = z.object({
  data: z.union([ TwoFactorCreateManyInputSchema,TwoFactorCreateManyInputSchema.array() ]),
}).strict() ;

export const TwoFactorDeleteArgsSchema: z.ZodType<Prisma.TwoFactorDeleteArgs> = z.object({
  select: TwoFactorSelectSchema.optional(),
  include: TwoFactorIncludeSchema.optional(),
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorUpdateArgsSchema: z.ZodType<Prisma.TwoFactorUpdateArgs> = z.object({
  select: TwoFactorSelectSchema.optional(),
  include: TwoFactorIncludeSchema.optional(),
  data: z.union([ TwoFactorUpdateInputSchema,TwoFactorUncheckedUpdateInputSchema ]),
  where: TwoFactorWhereUniqueInputSchema,
}).strict() ;

export const TwoFactorUpdateManyArgsSchema: z.ZodType<Prisma.TwoFactorUpdateManyArgs> = z.object({
  data: z.union([ TwoFactorUpdateManyMutationInputSchema,TwoFactorUncheckedUpdateManyInputSchema ]),
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TwoFactorDeleteManyArgsSchema: z.ZodType<Prisma.TwoFactorDeleteManyArgs> = z.object({
  where: TwoFactorWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TasksCreateArgsSchema: z.ZodType<Prisma.TasksCreateArgs> = z.object({
  select: TasksSelectSchema.optional(),
  data: z.union([ TasksCreateInputSchema,TasksUncheckedCreateInputSchema ]),
}).strict() ;

export const TasksUpsertArgsSchema: z.ZodType<Prisma.TasksUpsertArgs> = z.object({
  select: TasksSelectSchema.optional(),
  where: TasksWhereUniqueInputSchema,
  create: z.union([ TasksCreateInputSchema,TasksUncheckedCreateInputSchema ]),
  update: z.union([ TasksUpdateInputSchema,TasksUncheckedUpdateInputSchema ]),
}).strict() ;

export const TasksCreateManyArgsSchema: z.ZodType<Prisma.TasksCreateManyArgs> = z.object({
  data: z.union([ TasksCreateManyInputSchema,TasksCreateManyInputSchema.array() ]),
}).strict() ;

export const TasksDeleteArgsSchema: z.ZodType<Prisma.TasksDeleteArgs> = z.object({
  select: TasksSelectSchema.optional(),
  where: TasksWhereUniqueInputSchema,
}).strict() ;

export const TasksUpdateArgsSchema: z.ZodType<Prisma.TasksUpdateArgs> = z.object({
  select: TasksSelectSchema.optional(),
  data: z.union([ TasksUpdateInputSchema,TasksUncheckedUpdateInputSchema ]),
  where: TasksWhereUniqueInputSchema,
}).strict() ;

export const TasksUpdateManyArgsSchema: z.ZodType<Prisma.TasksUpdateManyArgs> = z.object({
  data: z.union([ TasksUpdateManyMutationInputSchema,TasksUncheckedUpdateManyInputSchema ]),
  where: TasksWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TasksDeleteManyArgsSchema: z.ZodType<Prisma.TasksDeleteManyArgs> = z.object({
  where: TasksWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AdCreateArgsSchema: z.ZodType<Prisma.AdCreateArgs> = z.object({
  select: AdSelectSchema.optional(),
  include: AdIncludeSchema.optional(),
  data: z.union([ AdCreateInputSchema,AdUncheckedCreateInputSchema ]),
}).strict() ;

export const AdUpsertArgsSchema: z.ZodType<Prisma.AdUpsertArgs> = z.object({
  select: AdSelectSchema.optional(),
  include: AdIncludeSchema.optional(),
  where: AdWhereUniqueInputSchema,
  create: z.union([ AdCreateInputSchema,AdUncheckedCreateInputSchema ]),
  update: z.union([ AdUpdateInputSchema,AdUncheckedUpdateInputSchema ]),
}).strict() ;

export const AdCreateManyArgsSchema: z.ZodType<Prisma.AdCreateManyArgs> = z.object({
  data: z.union([ AdCreateManyInputSchema,AdCreateManyInputSchema.array() ]),
}).strict() ;

export const AdDeleteArgsSchema: z.ZodType<Prisma.AdDeleteArgs> = z.object({
  select: AdSelectSchema.optional(),
  include: AdIncludeSchema.optional(),
  where: AdWhereUniqueInputSchema,
}).strict() ;

export const AdUpdateArgsSchema: z.ZodType<Prisma.AdUpdateArgs> = z.object({
  select: AdSelectSchema.optional(),
  include: AdIncludeSchema.optional(),
  data: z.union([ AdUpdateInputSchema,AdUncheckedUpdateInputSchema ]),
  where: AdWhereUniqueInputSchema,
}).strict() ;

export const AdUpdateManyArgsSchema: z.ZodType<Prisma.AdUpdateManyArgs> = z.object({
  data: z.union([ AdUpdateManyMutationInputSchema,AdUncheckedUpdateManyInputSchema ]),
  where: AdWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AdDeleteManyArgsSchema: z.ZodType<Prisma.AdDeleteManyArgs> = z.object({
  where: AdWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AdRevisionCreateArgsSchema: z.ZodType<Prisma.AdRevisionCreateArgs> = z.object({
  select: AdRevisionSelectSchema.optional(),
  include: AdRevisionIncludeSchema.optional(),
  data: z.union([ AdRevisionCreateInputSchema,AdRevisionUncheckedCreateInputSchema ]),
}).strict() ;

export const AdRevisionUpsertArgsSchema: z.ZodType<Prisma.AdRevisionUpsertArgs> = z.object({
  select: AdRevisionSelectSchema.optional(),
  include: AdRevisionIncludeSchema.optional(),
  where: AdRevisionWhereUniqueInputSchema,
  create: z.union([ AdRevisionCreateInputSchema,AdRevisionUncheckedCreateInputSchema ]),
  update: z.union([ AdRevisionUpdateInputSchema,AdRevisionUncheckedUpdateInputSchema ]),
}).strict() ;

export const AdRevisionCreateManyArgsSchema: z.ZodType<Prisma.AdRevisionCreateManyArgs> = z.object({
  data: z.union([ AdRevisionCreateManyInputSchema,AdRevisionCreateManyInputSchema.array() ]),
}).strict() ;

export const AdRevisionDeleteArgsSchema: z.ZodType<Prisma.AdRevisionDeleteArgs> = z.object({
  select: AdRevisionSelectSchema.optional(),
  include: AdRevisionIncludeSchema.optional(),
  where: AdRevisionWhereUniqueInputSchema,
}).strict() ;

export const AdRevisionUpdateArgsSchema: z.ZodType<Prisma.AdRevisionUpdateArgs> = z.object({
  select: AdRevisionSelectSchema.optional(),
  include: AdRevisionIncludeSchema.optional(),
  data: z.union([ AdRevisionUpdateInputSchema,AdRevisionUncheckedUpdateInputSchema ]),
  where: AdRevisionWhereUniqueInputSchema,
}).strict() ;

export const AdRevisionUpdateManyArgsSchema: z.ZodType<Prisma.AdRevisionUpdateManyArgs> = z.object({
  data: z.union([ AdRevisionUpdateManyMutationInputSchema,AdRevisionUncheckedUpdateManyInputSchema ]),
  where: AdRevisionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AdRevisionDeleteManyArgsSchema: z.ZodType<Prisma.AdRevisionDeleteManyArgs> = z.object({
  where: AdRevisionWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AdAnalyticsCreateArgsSchema: z.ZodType<Prisma.AdAnalyticsCreateArgs> = z.object({
  select: AdAnalyticsSelectSchema.optional(),
  include: AdAnalyticsIncludeSchema.optional(),
  data: z.union([ AdAnalyticsCreateInputSchema,AdAnalyticsUncheckedCreateInputSchema ]),
}).strict() ;

export const AdAnalyticsUpsertArgsSchema: z.ZodType<Prisma.AdAnalyticsUpsertArgs> = z.object({
  select: AdAnalyticsSelectSchema.optional(),
  include: AdAnalyticsIncludeSchema.optional(),
  where: AdAnalyticsWhereUniqueInputSchema,
  create: z.union([ AdAnalyticsCreateInputSchema,AdAnalyticsUncheckedCreateInputSchema ]),
  update: z.union([ AdAnalyticsUpdateInputSchema,AdAnalyticsUncheckedUpdateInputSchema ]),
}).strict() ;

export const AdAnalyticsCreateManyArgsSchema: z.ZodType<Prisma.AdAnalyticsCreateManyArgs> = z.object({
  data: z.union([ AdAnalyticsCreateManyInputSchema,AdAnalyticsCreateManyInputSchema.array() ]),
}).strict() ;

export const AdAnalyticsDeleteArgsSchema: z.ZodType<Prisma.AdAnalyticsDeleteArgs> = z.object({
  select: AdAnalyticsSelectSchema.optional(),
  include: AdAnalyticsIncludeSchema.optional(),
  where: AdAnalyticsWhereUniqueInputSchema,
}).strict() ;

export const AdAnalyticsUpdateArgsSchema: z.ZodType<Prisma.AdAnalyticsUpdateArgs> = z.object({
  select: AdAnalyticsSelectSchema.optional(),
  include: AdAnalyticsIncludeSchema.optional(),
  data: z.union([ AdAnalyticsUpdateInputSchema,AdAnalyticsUncheckedUpdateInputSchema ]),
  where: AdAnalyticsWhereUniqueInputSchema,
}).strict() ;

export const AdAnalyticsUpdateManyArgsSchema: z.ZodType<Prisma.AdAnalyticsUpdateManyArgs> = z.object({
  data: z.union([ AdAnalyticsUpdateManyMutationInputSchema,AdAnalyticsUncheckedUpdateManyInputSchema ]),
  where: AdAnalyticsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AdAnalyticsDeleteManyArgsSchema: z.ZodType<Prisma.AdAnalyticsDeleteManyArgs> = z.object({
  where: AdAnalyticsWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CategoryCreateArgsSchema: z.ZodType<Prisma.CategoryCreateArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  data: z.union([ CategoryCreateInputSchema,CategoryUncheckedCreateInputSchema ]),
}).strict() ;

export const CategoryUpsertArgsSchema: z.ZodType<Prisma.CategoryUpsertArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
  create: z.union([ CategoryCreateInputSchema,CategoryUncheckedCreateInputSchema ]),
  update: z.union([ CategoryUpdateInputSchema,CategoryUncheckedUpdateInputSchema ]),
}).strict() ;

export const CategoryCreateManyArgsSchema: z.ZodType<Prisma.CategoryCreateManyArgs> = z.object({
  data: z.union([ CategoryCreateManyInputSchema,CategoryCreateManyInputSchema.array() ]),
}).strict() ;

export const CategoryDeleteArgsSchema: z.ZodType<Prisma.CategoryDeleteArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryUpdateArgsSchema: z.ZodType<Prisma.CategoryUpdateArgs> = z.object({
  select: CategorySelectSchema.optional(),
  include: CategoryIncludeSchema.optional(),
  data: z.union([ CategoryUpdateInputSchema,CategoryUncheckedUpdateInputSchema ]),
  where: CategoryWhereUniqueInputSchema,
}).strict() ;

export const CategoryUpdateManyArgsSchema: z.ZodType<Prisma.CategoryUpdateManyArgs> = z.object({
  data: z.union([ CategoryUpdateManyMutationInputSchema,CategoryUncheckedUpdateManyInputSchema ]),
  where: CategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const CategoryDeleteManyArgsSchema: z.ZodType<Prisma.CategoryDeleteManyArgs> = z.object({
  where: CategoryWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TagCreateArgsSchema: z.ZodType<Prisma.TagCreateArgs> = z.object({
  select: TagSelectSchema.optional(),
  data: z.union([ TagCreateInputSchema,TagUncheckedCreateInputSchema ]),
}).strict() ;

export const TagUpsertArgsSchema: z.ZodType<Prisma.TagUpsertArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereUniqueInputSchema,
  create: z.union([ TagCreateInputSchema,TagUncheckedCreateInputSchema ]),
  update: z.union([ TagUpdateInputSchema,TagUncheckedUpdateInputSchema ]),
}).strict() ;

export const TagCreateManyArgsSchema: z.ZodType<Prisma.TagCreateManyArgs> = z.object({
  data: z.union([ TagCreateManyInputSchema,TagCreateManyInputSchema.array() ]),
}).strict() ;

export const TagDeleteArgsSchema: z.ZodType<Prisma.TagDeleteArgs> = z.object({
  select: TagSelectSchema.optional(),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TagUpdateArgsSchema: z.ZodType<Prisma.TagUpdateArgs> = z.object({
  select: TagSelectSchema.optional(),
  data: z.union([ TagUpdateInputSchema,TagUncheckedUpdateInputSchema ]),
  where: TagWhereUniqueInputSchema,
}).strict() ;

export const TagUpdateManyArgsSchema: z.ZodType<Prisma.TagUpdateManyArgs> = z.object({
  data: z.union([ TagUpdateManyMutationInputSchema,TagUncheckedUpdateManyInputSchema ]),
  where: TagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const TagDeleteManyArgsSchema: z.ZodType<Prisma.TagDeleteManyArgs> = z.object({
  where: TagWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MediaCreateArgsSchema: z.ZodType<Prisma.MediaCreateArgs> = z.object({
  select: MediaSelectSchema.optional(),
  include: MediaIncludeSchema.optional(),
  data: z.union([ MediaCreateInputSchema,MediaUncheckedCreateInputSchema ]),
}).strict() ;

export const MediaUpsertArgsSchema: z.ZodType<Prisma.MediaUpsertArgs> = z.object({
  select: MediaSelectSchema.optional(),
  include: MediaIncludeSchema.optional(),
  where: MediaWhereUniqueInputSchema,
  create: z.union([ MediaCreateInputSchema,MediaUncheckedCreateInputSchema ]),
  update: z.union([ MediaUpdateInputSchema,MediaUncheckedUpdateInputSchema ]),
}).strict() ;

export const MediaCreateManyArgsSchema: z.ZodType<Prisma.MediaCreateManyArgs> = z.object({
  data: z.union([ MediaCreateManyInputSchema,MediaCreateManyInputSchema.array() ]),
}).strict() ;

export const MediaDeleteArgsSchema: z.ZodType<Prisma.MediaDeleteArgs> = z.object({
  select: MediaSelectSchema.optional(),
  include: MediaIncludeSchema.optional(),
  where: MediaWhereUniqueInputSchema,
}).strict() ;

export const MediaUpdateArgsSchema: z.ZodType<Prisma.MediaUpdateArgs> = z.object({
  select: MediaSelectSchema.optional(),
  include: MediaIncludeSchema.optional(),
  data: z.union([ MediaUpdateInputSchema,MediaUncheckedUpdateInputSchema ]),
  where: MediaWhereUniqueInputSchema,
}).strict() ;

export const MediaUpdateManyArgsSchema: z.ZodType<Prisma.MediaUpdateManyArgs> = z.object({
  data: z.union([ MediaUpdateManyMutationInputSchema,MediaUncheckedUpdateManyInputSchema ]),
  where: MediaWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MediaDeleteManyArgsSchema: z.ZodType<Prisma.MediaDeleteManyArgs> = z.object({
  where: MediaWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PaymentCreateArgsSchema: z.ZodType<Prisma.PaymentCreateArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  data: z.union([ PaymentCreateInputSchema,PaymentUncheckedCreateInputSchema ]),
}).strict() ;

export const PaymentUpsertArgsSchema: z.ZodType<Prisma.PaymentUpsertArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereUniqueInputSchema,
  create: z.union([ PaymentCreateInputSchema,PaymentUncheckedCreateInputSchema ]),
  update: z.union([ PaymentUpdateInputSchema,PaymentUncheckedUpdateInputSchema ]),
}).strict() ;

export const PaymentCreateManyArgsSchema: z.ZodType<Prisma.PaymentCreateManyArgs> = z.object({
  data: z.union([ PaymentCreateManyInputSchema,PaymentCreateManyInputSchema.array() ]),
}).strict() ;

export const PaymentDeleteArgsSchema: z.ZodType<Prisma.PaymentDeleteArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  where: PaymentWhereUniqueInputSchema,
}).strict() ;

export const PaymentUpdateArgsSchema: z.ZodType<Prisma.PaymentUpdateArgs> = z.object({
  select: PaymentSelectSchema.optional(),
  include: PaymentIncludeSchema.optional(),
  data: z.union([ PaymentUpdateInputSchema,PaymentUncheckedUpdateInputSchema ]),
  where: PaymentWhereUniqueInputSchema,
}).strict() ;

export const PaymentUpdateManyArgsSchema: z.ZodType<Prisma.PaymentUpdateManyArgs> = z.object({
  data: z.union([ PaymentUpdateManyMutationInputSchema,PaymentUncheckedUpdateManyInputSchema ]),
  where: PaymentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const PaymentDeleteManyArgsSchema: z.ZodType<Prisma.PaymentDeleteManyArgs> = z.object({
  where: PaymentWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FavoriteCreateArgsSchema: z.ZodType<Prisma.FavoriteCreateArgs> = z.object({
  select: FavoriteSelectSchema.optional(),
  include: FavoriteIncludeSchema.optional(),
  data: z.union([ FavoriteCreateInputSchema,FavoriteUncheckedCreateInputSchema ]),
}).strict() ;

export const FavoriteUpsertArgsSchema: z.ZodType<Prisma.FavoriteUpsertArgs> = z.object({
  select: FavoriteSelectSchema.optional(),
  include: FavoriteIncludeSchema.optional(),
  where: FavoriteWhereUniqueInputSchema,
  create: z.union([ FavoriteCreateInputSchema,FavoriteUncheckedCreateInputSchema ]),
  update: z.union([ FavoriteUpdateInputSchema,FavoriteUncheckedUpdateInputSchema ]),
}).strict() ;

export const FavoriteCreateManyArgsSchema: z.ZodType<Prisma.FavoriteCreateManyArgs> = z.object({
  data: z.union([ FavoriteCreateManyInputSchema,FavoriteCreateManyInputSchema.array() ]),
}).strict() ;

export const FavoriteDeleteArgsSchema: z.ZodType<Prisma.FavoriteDeleteArgs> = z.object({
  select: FavoriteSelectSchema.optional(),
  include: FavoriteIncludeSchema.optional(),
  where: FavoriteWhereUniqueInputSchema,
}).strict() ;

export const FavoriteUpdateArgsSchema: z.ZodType<Prisma.FavoriteUpdateArgs> = z.object({
  select: FavoriteSelectSchema.optional(),
  include: FavoriteIncludeSchema.optional(),
  data: z.union([ FavoriteUpdateInputSchema,FavoriteUncheckedUpdateInputSchema ]),
  where: FavoriteWhereUniqueInputSchema,
}).strict() ;

export const FavoriteUpdateManyArgsSchema: z.ZodType<Prisma.FavoriteUpdateManyArgs> = z.object({
  data: z.union([ FavoriteUpdateManyMutationInputSchema,FavoriteUncheckedUpdateManyInputSchema ]),
  where: FavoriteWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const FavoriteDeleteManyArgsSchema: z.ZodType<Prisma.FavoriteDeleteManyArgs> = z.object({
  where: FavoriteWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SavedSearchCreateArgsSchema: z.ZodType<Prisma.SavedSearchCreateArgs> = z.object({
  select: SavedSearchSelectSchema.optional(),
  include: SavedSearchIncludeSchema.optional(),
  data: z.union([ SavedSearchCreateInputSchema,SavedSearchUncheckedCreateInputSchema ]),
}).strict() ;

export const SavedSearchUpsertArgsSchema: z.ZodType<Prisma.SavedSearchUpsertArgs> = z.object({
  select: SavedSearchSelectSchema.optional(),
  include: SavedSearchIncludeSchema.optional(),
  where: SavedSearchWhereUniqueInputSchema,
  create: z.union([ SavedSearchCreateInputSchema,SavedSearchUncheckedCreateInputSchema ]),
  update: z.union([ SavedSearchUpdateInputSchema,SavedSearchUncheckedUpdateInputSchema ]),
}).strict() ;

export const SavedSearchCreateManyArgsSchema: z.ZodType<Prisma.SavedSearchCreateManyArgs> = z.object({
  data: z.union([ SavedSearchCreateManyInputSchema,SavedSearchCreateManyInputSchema.array() ]),
}).strict() ;

export const SavedSearchDeleteArgsSchema: z.ZodType<Prisma.SavedSearchDeleteArgs> = z.object({
  select: SavedSearchSelectSchema.optional(),
  include: SavedSearchIncludeSchema.optional(),
  where: SavedSearchWhereUniqueInputSchema,
}).strict() ;

export const SavedSearchUpdateArgsSchema: z.ZodType<Prisma.SavedSearchUpdateArgs> = z.object({
  select: SavedSearchSelectSchema.optional(),
  include: SavedSearchIncludeSchema.optional(),
  data: z.union([ SavedSearchUpdateInputSchema,SavedSearchUncheckedUpdateInputSchema ]),
  where: SavedSearchWhereUniqueInputSchema,
}).strict() ;

export const SavedSearchUpdateManyArgsSchema: z.ZodType<Prisma.SavedSearchUpdateManyArgs> = z.object({
  data: z.union([ SavedSearchUpdateManyMutationInputSchema,SavedSearchUncheckedUpdateManyInputSchema ]),
  where: SavedSearchWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const SavedSearchDeleteManyArgsSchema: z.ZodType<Prisma.SavedSearchDeleteManyArgs> = z.object({
  where: SavedSearchWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const GeoHeatmapCreateArgsSchema: z.ZodType<Prisma.GeoHeatmapCreateArgs> = z.object({
  select: GeoHeatmapSelectSchema.optional(),
  include: GeoHeatmapIncludeSchema.optional(),
  data: z.union([ GeoHeatmapCreateInputSchema,GeoHeatmapUncheckedCreateInputSchema ]),
}).strict() ;

export const GeoHeatmapUpsertArgsSchema: z.ZodType<Prisma.GeoHeatmapUpsertArgs> = z.object({
  select: GeoHeatmapSelectSchema.optional(),
  include: GeoHeatmapIncludeSchema.optional(),
  where: GeoHeatmapWhereUniqueInputSchema,
  create: z.union([ GeoHeatmapCreateInputSchema,GeoHeatmapUncheckedCreateInputSchema ]),
  update: z.union([ GeoHeatmapUpdateInputSchema,GeoHeatmapUncheckedUpdateInputSchema ]),
}).strict() ;

export const GeoHeatmapCreateManyArgsSchema: z.ZodType<Prisma.GeoHeatmapCreateManyArgs> = z.object({
  data: z.union([ GeoHeatmapCreateManyInputSchema,GeoHeatmapCreateManyInputSchema.array() ]),
}).strict() ;

export const GeoHeatmapDeleteArgsSchema: z.ZodType<Prisma.GeoHeatmapDeleteArgs> = z.object({
  select: GeoHeatmapSelectSchema.optional(),
  include: GeoHeatmapIncludeSchema.optional(),
  where: GeoHeatmapWhereUniqueInputSchema,
}).strict() ;

export const GeoHeatmapUpdateArgsSchema: z.ZodType<Prisma.GeoHeatmapUpdateArgs> = z.object({
  select: GeoHeatmapSelectSchema.optional(),
  include: GeoHeatmapIncludeSchema.optional(),
  data: z.union([ GeoHeatmapUpdateInputSchema,GeoHeatmapUncheckedUpdateInputSchema ]),
  where: GeoHeatmapWhereUniqueInputSchema,
}).strict() ;

export const GeoHeatmapUpdateManyArgsSchema: z.ZodType<Prisma.GeoHeatmapUpdateManyArgs> = z.object({
  data: z.union([ GeoHeatmapUpdateManyMutationInputSchema,GeoHeatmapUncheckedUpdateManyInputSchema ]),
  where: GeoHeatmapWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const GeoHeatmapDeleteManyArgsSchema: z.ZodType<Prisma.GeoHeatmapDeleteManyArgs> = z.object({
  where: GeoHeatmapWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MessageCreateArgsSchema: z.ZodType<Prisma.MessageCreateArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  data: z.union([ MessageCreateInputSchema,MessageUncheckedCreateInputSchema ]),
}).strict() ;

export const MessageUpsertArgsSchema: z.ZodType<Prisma.MessageUpsertArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
  create: z.union([ MessageCreateInputSchema,MessageUncheckedCreateInputSchema ]),
  update: z.union([ MessageUpdateInputSchema,MessageUncheckedUpdateInputSchema ]),
}).strict() ;

export const MessageCreateManyArgsSchema: z.ZodType<Prisma.MessageCreateManyArgs> = z.object({
  data: z.union([ MessageCreateManyInputSchema,MessageCreateManyInputSchema.array() ]),
}).strict() ;

export const MessageDeleteArgsSchema: z.ZodType<Prisma.MessageDeleteArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
}).strict() ;

export const MessageUpdateArgsSchema: z.ZodType<Prisma.MessageUpdateArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  data: z.union([ MessageUpdateInputSchema,MessageUncheckedUpdateInputSchema ]),
  where: MessageWhereUniqueInputSchema,
}).strict() ;

export const MessageUpdateManyArgsSchema: z.ZodType<Prisma.MessageUpdateManyArgs> = z.object({
  data: z.union([ MessageUpdateManyMutationInputSchema,MessageUncheckedUpdateManyInputSchema ]),
  where: MessageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const MessageDeleteManyArgsSchema: z.ZodType<Prisma.MessageDeleteManyArgs> = z.object({
  where: MessageWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserNotificationCreateArgsSchema: z.ZodType<Prisma.UserNotificationCreateArgs> = z.object({
  select: UserNotificationSelectSchema.optional(),
  include: UserNotificationIncludeSchema.optional(),
  data: z.union([ UserNotificationCreateInputSchema,UserNotificationUncheckedCreateInputSchema ]),
}).strict() ;

export const UserNotificationUpsertArgsSchema: z.ZodType<Prisma.UserNotificationUpsertArgs> = z.object({
  select: UserNotificationSelectSchema.optional(),
  include: UserNotificationIncludeSchema.optional(),
  where: UserNotificationWhereUniqueInputSchema,
  create: z.union([ UserNotificationCreateInputSchema,UserNotificationUncheckedCreateInputSchema ]),
  update: z.union([ UserNotificationUpdateInputSchema,UserNotificationUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserNotificationCreateManyArgsSchema: z.ZodType<Prisma.UserNotificationCreateManyArgs> = z.object({
  data: z.union([ UserNotificationCreateManyInputSchema,UserNotificationCreateManyInputSchema.array() ]),
}).strict() ;

export const UserNotificationDeleteArgsSchema: z.ZodType<Prisma.UserNotificationDeleteArgs> = z.object({
  select: UserNotificationSelectSchema.optional(),
  include: UserNotificationIncludeSchema.optional(),
  where: UserNotificationWhereUniqueInputSchema,
}).strict() ;

export const UserNotificationUpdateArgsSchema: z.ZodType<Prisma.UserNotificationUpdateArgs> = z.object({
  select: UserNotificationSelectSchema.optional(),
  include: UserNotificationIncludeSchema.optional(),
  data: z.union([ UserNotificationUpdateInputSchema,UserNotificationUncheckedUpdateInputSchema ]),
  where: UserNotificationWhereUniqueInputSchema,
}).strict() ;

export const UserNotificationUpdateManyArgsSchema: z.ZodType<Prisma.UserNotificationUpdateManyArgs> = z.object({
  data: z.union([ UserNotificationUpdateManyMutationInputSchema,UserNotificationUncheckedUpdateManyInputSchema ]),
  where: UserNotificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const UserNotificationDeleteManyArgsSchema: z.ZodType<Prisma.UserNotificationDeleteManyArgs> = z.object({
  where: UserNotificationWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShareEventCreateArgsSchema: z.ZodType<Prisma.ShareEventCreateArgs> = z.object({
  select: ShareEventSelectSchema.optional(),
  include: ShareEventIncludeSchema.optional(),
  data: z.union([ ShareEventCreateInputSchema,ShareEventUncheckedCreateInputSchema ]),
}).strict() ;

export const ShareEventUpsertArgsSchema: z.ZodType<Prisma.ShareEventUpsertArgs> = z.object({
  select: ShareEventSelectSchema.optional(),
  include: ShareEventIncludeSchema.optional(),
  where: ShareEventWhereUniqueInputSchema,
  create: z.union([ ShareEventCreateInputSchema,ShareEventUncheckedCreateInputSchema ]),
  update: z.union([ ShareEventUpdateInputSchema,ShareEventUncheckedUpdateInputSchema ]),
}).strict() ;

export const ShareEventCreateManyArgsSchema: z.ZodType<Prisma.ShareEventCreateManyArgs> = z.object({
  data: z.union([ ShareEventCreateManyInputSchema,ShareEventCreateManyInputSchema.array() ]),
}).strict() ;

export const ShareEventDeleteArgsSchema: z.ZodType<Prisma.ShareEventDeleteArgs> = z.object({
  select: ShareEventSelectSchema.optional(),
  include: ShareEventIncludeSchema.optional(),
  where: ShareEventWhereUniqueInputSchema,
}).strict() ;

export const ShareEventUpdateArgsSchema: z.ZodType<Prisma.ShareEventUpdateArgs> = z.object({
  select: ShareEventSelectSchema.optional(),
  include: ShareEventIncludeSchema.optional(),
  data: z.union([ ShareEventUpdateInputSchema,ShareEventUncheckedUpdateInputSchema ]),
  where: ShareEventWhereUniqueInputSchema,
}).strict() ;

export const ShareEventUpdateManyArgsSchema: z.ZodType<Prisma.ShareEventUpdateManyArgs> = z.object({
  data: z.union([ ShareEventUpdateManyMutationInputSchema,ShareEventUncheckedUpdateManyInputSchema ]),
  where: ShareEventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ShareEventDeleteManyArgsSchema: z.ZodType<Prisma.ShareEventDeleteManyArgs> = z.object({
  where: ShareEventWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReportCreateArgsSchema: z.ZodType<Prisma.ReportCreateArgs> = z.object({
  select: ReportSelectSchema.optional(),
  include: ReportIncludeSchema.optional(),
  data: z.union([ ReportCreateInputSchema,ReportUncheckedCreateInputSchema ]),
}).strict() ;

export const ReportUpsertArgsSchema: z.ZodType<Prisma.ReportUpsertArgs> = z.object({
  select: ReportSelectSchema.optional(),
  include: ReportIncludeSchema.optional(),
  where: ReportWhereUniqueInputSchema,
  create: z.union([ ReportCreateInputSchema,ReportUncheckedCreateInputSchema ]),
  update: z.union([ ReportUpdateInputSchema,ReportUncheckedUpdateInputSchema ]),
}).strict() ;

export const ReportCreateManyArgsSchema: z.ZodType<Prisma.ReportCreateManyArgs> = z.object({
  data: z.union([ ReportCreateManyInputSchema,ReportCreateManyInputSchema.array() ]),
}).strict() ;

export const ReportDeleteArgsSchema: z.ZodType<Prisma.ReportDeleteArgs> = z.object({
  select: ReportSelectSchema.optional(),
  include: ReportIncludeSchema.optional(),
  where: ReportWhereUniqueInputSchema,
}).strict() ;

export const ReportUpdateArgsSchema: z.ZodType<Prisma.ReportUpdateArgs> = z.object({
  select: ReportSelectSchema.optional(),
  include: ReportIncludeSchema.optional(),
  data: z.union([ ReportUpdateInputSchema,ReportUncheckedUpdateInputSchema ]),
  where: ReportWhereUniqueInputSchema,
}).strict() ;

export const ReportUpdateManyArgsSchema: z.ZodType<Prisma.ReportUpdateManyArgs> = z.object({
  data: z.union([ ReportUpdateManyMutationInputSchema,ReportUncheckedUpdateManyInputSchema ]),
  where: ReportWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const ReportDeleteManyArgsSchema: z.ZodType<Prisma.ReportDeleteManyArgs> = z.object({
  where: ReportWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AuditLogCreateArgsSchema: z.ZodType<Prisma.AuditLogCreateArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  data: z.union([ AuditLogCreateInputSchema,AuditLogUncheckedCreateInputSchema ]),
}).strict() ;

export const AuditLogUpsertArgsSchema: z.ZodType<Prisma.AuditLogUpsertArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
  create: z.union([ AuditLogCreateInputSchema,AuditLogUncheckedCreateInputSchema ]),
  update: z.union([ AuditLogUpdateInputSchema,AuditLogUncheckedUpdateInputSchema ]),
}).strict() ;

export const AuditLogCreateManyArgsSchema: z.ZodType<Prisma.AuditLogCreateManyArgs> = z.object({
  data: z.union([ AuditLogCreateManyInputSchema,AuditLogCreateManyInputSchema.array() ]),
}).strict() ;

export const AuditLogDeleteArgsSchema: z.ZodType<Prisma.AuditLogDeleteArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogUpdateArgsSchema: z.ZodType<Prisma.AuditLogUpdateArgs> = z.object({
  select: AuditLogSelectSchema.optional(),
  include: AuditLogIncludeSchema.optional(),
  data: z.union([ AuditLogUpdateInputSchema,AuditLogUncheckedUpdateInputSchema ]),
  where: AuditLogWhereUniqueInputSchema,
}).strict() ;

export const AuditLogUpdateManyArgsSchema: z.ZodType<Prisma.AuditLogUpdateManyArgs> = z.object({
  data: z.union([ AuditLogUpdateManyMutationInputSchema,AuditLogUncheckedUpdateManyInputSchema ]),
  where: AuditLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AuditLogDeleteManyArgsSchema: z.ZodType<Prisma.AuditLogDeleteManyArgs> = z.object({
  where: AuditLogWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AdMediaCreateArgsSchema: z.ZodType<Prisma.AdMediaCreateArgs> = z.object({
  select: AdMediaSelectSchema.optional(),
  include: AdMediaIncludeSchema.optional(),
  data: z.union([ AdMediaCreateInputSchema,AdMediaUncheckedCreateInputSchema ]),
}).strict() ;

export const AdMediaUpsertArgsSchema: z.ZodType<Prisma.AdMediaUpsertArgs> = z.object({
  select: AdMediaSelectSchema.optional(),
  include: AdMediaIncludeSchema.optional(),
  where: AdMediaWhereUniqueInputSchema,
  create: z.union([ AdMediaCreateInputSchema,AdMediaUncheckedCreateInputSchema ]),
  update: z.union([ AdMediaUpdateInputSchema,AdMediaUncheckedUpdateInputSchema ]),
}).strict() ;

export const AdMediaCreateManyArgsSchema: z.ZodType<Prisma.AdMediaCreateManyArgs> = z.object({
  data: z.union([ AdMediaCreateManyInputSchema,AdMediaCreateManyInputSchema.array() ]),
}).strict() ;

export const AdMediaDeleteArgsSchema: z.ZodType<Prisma.AdMediaDeleteArgs> = z.object({
  select: AdMediaSelectSchema.optional(),
  include: AdMediaIncludeSchema.optional(),
  where: AdMediaWhereUniqueInputSchema,
}).strict() ;

export const AdMediaUpdateArgsSchema: z.ZodType<Prisma.AdMediaUpdateArgs> = z.object({
  select: AdMediaSelectSchema.optional(),
  include: AdMediaIncludeSchema.optional(),
  data: z.union([ AdMediaUpdateInputSchema,AdMediaUncheckedUpdateInputSchema ]),
  where: AdMediaWhereUniqueInputSchema,
}).strict() ;

export const AdMediaUpdateManyArgsSchema: z.ZodType<Prisma.AdMediaUpdateManyArgs> = z.object({
  data: z.union([ AdMediaUpdateManyMutationInputSchema,AdMediaUncheckedUpdateManyInputSchema ]),
  where: AdMediaWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;

export const AdMediaDeleteManyArgsSchema: z.ZodType<Prisma.AdMediaDeleteManyArgs> = z.object({
  where: AdMediaWhereInputSchema.optional(),
  limit: z.number().optional(),
}).strict() ;